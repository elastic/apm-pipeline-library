Given the list of patterns, the CHANGE_TARGET, GIT_SHA env variables and the kind of match then it
evaluates the change list with the pattern list:

- When exact match then all the files should match those patterns then it returns `true` otherwise
`false`.
- Otherwise if any files match any of those patterns then it returns `true` otherwise `false`.

```
  // All the files in the changeset should match with ^_beats
  def match = isGitRegionMatch(patterns: ["^_beats", isFullMatch: true)

  // All the files in the changeset should match with ^_beats and *.py
  def match = isGitRegionMatch(patterns: ["^_beats", "**/*.py", isFullMatch: true)

  // Any files in the changeset that match with ^_beats or ^apm-server.docker.yml
  def match = isGitRegionMatch(patterns: ["^_beats", "^apm-server.docker.yml"])
  def match = isGitRegionMatch(patterns: ["^_beats", "^apm-server.docker.yml", isFullMatch: false)

  // All the files in the changeset should match with ^_beats*
  def match = isGitRegionMatch(patterns: ['^_beats*', isFullMatch: true, comparator: 'glob')
```

* patterns: list of patterns to be matched. Mandatory
* isFullMatch: whether all the elements in the patterns should match with the changeset. Default: false. Optional
* comparator: what way to compare the pattern specified to the actual value. Possible values are `glob` and `regexp`. glob is the default
