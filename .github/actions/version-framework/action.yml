---
name: 'Matrix Version Framework'
description: 'Create matrix for the supported versions and frameworks'
inputs:
  versionsFile:
    description: 'The YAML file with the versions. Being VERSION the key for the list'
    required: true
  frameworksFile:
    description: 'The YAML file with the frameworks. Being FRAMEWORK the key for the list'
    required: true
  excludedFile:
    description: 'The YAML file with the excluded tuples. Being exclude the key for the list of tuples (VERSION, FRAMEWORK)'
    required: false
outputs:
  matrix:
    description: "Processed matrix with the required tuples of version and framework"
    value: ${{ steps.generator.outputs.matrix }}
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - id: generator
      shell: python
      run: |
        import json
        import os
        import yaml
        from pathlib import Path
        excludes = {}
        if len('${{ inputs.excludedFile }}') > 0:
          excludes = yaml.safe_load(Path('${{ inputs.excludedFile }}').read_text())
        frameworks = yaml.safe_load(Path('${{ inputs.frameworksFile }}').read_text())
        versions = yaml.safe_load(Path('${{ inputs.versionsFile }}').read_text())
        matrix = {'include': []}
        for version in versions['VERSION']:
          for framework in frameworks['FRAMEWORK']:
            if len(list(filter(lambda item: item['VERSION'] == version and item["FRAMEWORK"] == framework, excludes['exclude']))) > 0:
              print('excluded ' + version + ' with ' + framework)
            else:
              matrix['include'].append({"version": version, "framework": framework})
        with open(os.environ.get('GITHUB_OUTPUT'), "a") as f:
          f.write("matrix={}\n".format(json.dumps(matrix)))
    - id: debug
      shell: bash
      run: |
        echo 'Matrix to test: ${{ steps.generator.outputs.matrix }}'
