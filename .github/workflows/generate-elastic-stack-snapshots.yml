---
name: generate-elastic-stack-snapshots

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1-5'

permissions:
  contents: read

jobs:
  bump:
    runs-on: ubuntu-latest
    steps:
      - name: fetch snapshots
        run: |-
          ## we avoid surprises by uploading the unexpected credentials json file
          mkdir snapshots
          cd snapshots
          URL="https://artifacts-api.elastic.co/v1"
          NO_KPI_URL_PARAM="x-elastic-no-kpi=true"

          QUERY_OUTPUT=$(curl -s "${URL}/versions?${NO_KPI_URL_PARAM}"| jq -r '.aliases[] | select(contains("SNAPSHOT"))')
          for version in ${QUERY_OUTPUT}; do
            LATEST_OUTPUT=$(curl -s "${URL}/versions/${version}/builds/latest?${NO_KPI_URL_PARAM}" | jq 'del(.build.projects,.manifests) | . |= .build')
            BRANCH=$(echo "$LATEST_OUTPUT" | jq -r .branch)
            echo "${LATEST_OUTPUT}" | tee "$BRANCH.json"
          done
          ## support main branch
          cp master.json main.json || true

          ## generate a manifest with the current active snapshot branches (it also includes main).
          ## Aka those with artifacts that have been generated in the last 30 days.
          BRANCHES=$(curl -s "${URL}/versions?${NO_KPI_URL_PARAM}" | jq -r 'del(.aliases[] | select(test("SNAPSHOT$")|not)) | .aliases' | jq '. + [ "main" ]' | sed 's#-SNAPSHOT##g')
          {
            echo "{"
            echo "\"branches\":"
            echo "${BRANCHES}"
            echo "}"
          } > branches.json

          ## Remove branches that have not been created yet, for such it queries the GitHub repositoreis
          for branch in $(jq -r '.branches | .[]' branches.json); do
            if git ls-remote --exit-code --heads https://github.com/elastic/elasticsearch.git "$branch" ; then
              echo $branch
            else
              ## fallback to kibana just in case
              if git ls-remote --exit-code --heads https://github.com/elastic/kibana.git "$branch" ; then
                echo $branch
              else
                echo "$branch does not exist"
                {
                  echo "{"
                  echo "\"branches\":"
                  jq ".branches - [\"$branch\"]" branches.json
                  echo "}"
                } > branches.json.tmp
                mv branches.json.tmp branches.json
              fi
            fi
          done

      - name: 'Get service account'
        uses: hashicorp/vault-action@v2.4.2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          method: approle
          secrets: |
            secret/observability-team/ci/artifacts-api-bucket service-account | SERVICE_ACCOUNT ;

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ env.SERVICE_ACCOUNT }}'

      - id: 'upload-file'
        uses: 'google-github-actions/upload-cloud-storage@v0'
        with:
          path: snapshots
          glob: "*.json"
          destination: "artifacts-api"
          headers: |-
            content-type: application/json
            x-goog-meta-generator: generate-elastic-stack-snapshots.yml

      - name: debug
        run: echo "${{ steps.upload-file.outputs.uploaded }}"
