---
name: release

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: Type of release [major, minor, patch]
        required: true
        default: "patch"
        type: choice
        options:
          - "patch"
          - "minor"
          - "major"

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    steps:

      - uses: actions/checkout@v3

      - run: npm install semver

      - name: Create tag
        id: new-version
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const semver = require('semver')

            const release_type = context.payload.inputs.release_type

            const { data: latestRelease } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            console.log(`Latest release is "${latestRelease.tag_name}"`)
            const rawVersion = latestRelease.tag_name.replace('v', '')
            console.log(`Latest version is "${rawVersion}"`)

            const newVersion = semver.inc(rawVersion, release_type)
            const newTag = `v${newVersion}`

            console.log(`Creating a ${release_type} release with title: ${newVersion} and SHA: ${context.sha}`);
            const createdTag = await github.rest.git.createTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: newTag,
              message: newTag,
              object: context.sha,
              type: 'commit'
            })

            const createdRef = await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/' + newTag,
                sha: createdTag.data.sha
            })

            if (createdRef.status === 201) {
                console.log(`Tag ${newTag} was created successfully`);
            }

            console.log(`Updating current tag with ${context.sha}`);
            const updateRef = await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/current',
              sha: context.sha
            })

            if (updateRef.status === 201) {
              console.log(`Tag current was updated successfully`);
            }

            return newTag

      - uses: release-drafter/release-drafter@v5
        with:
          version: ${{ steps.new-version.outputs.result }}
          publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
