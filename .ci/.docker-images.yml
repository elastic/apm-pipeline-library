---
# Dockerfile build config for .github/workflows/publish-docker-images.yml
# See docs/INTERNAL_DOCKER_IMAGES.md for further information.
# yaml-language-server: $schema=./.docker-images.schema.json

templates:

  - &apm-agent-library-docker-images
    repository: "elastic/apm-pipeline-library"
    working_directory: ".ci/docker"

  - &opbeans-docker-images
    tag: "daily"

  - &apm-agent-nodejs-docker-images
    name: "apm-agent-nodejs"
    repository: "elastic/apm-agent-nodejs"
    working_directory: ".ci/docker/node-container"

  - &apm-agent-ruby-docker-images
    name: "apm-agent-ruby"
    repository: "elastic/apm-agent-ruby"
    working_directory: "spec"

  - &apm-agent-rum-docker-images
    repository: "elastic/apm-agent-rum-js"

  - &observability-dev-docker-images
    repository: "elastic/observability-dev"

images:

  # observability-robots Docker Images

  - name: "picklesdoc"
    repository: "elastic/observability-robots"
    build_script: "make build"
    push_script: "make push"
    working_directory: "apps/pickles"

  - name: "test-plans"
    repository: "elastic/observability-robots"
    build_script: "make build"
    push_script: "make push"
    working_directory: "apps/test-plans"

  # observability-dev Docker Images

  - <<: *observability-dev-docker-images
    name: "bandstand"
    working_directory: "apps/automation/bandstand"

  - <<: *observability-dev-docker-images
    name: "apm-proxy"
    working_directory: "tools/apm_proxy/frontend"
    prepare_script: "git clone https://github.com/haproxytech/spoa-mirror.git"

  - <<: *observability-dev-docker-images
    name: "apm-proxy-be"
    working_directory: "tools/apm_proxy/backend"

  # Opbeans Docker Images

  - <<: *opbeans-docker-images
    name: "opbeans-dotnet"
    repository: "elastic/opbeans-dotnet"

  - <<: *opbeans-docker-images
    name: "opbeans-node"
    repository: "elastic/opbeans-node"

  - <<: *opbeans-docker-images
    name: "opbeans-python"
    repository: "elastic/opbeans-python"

  - <<: *opbeans-docker-images
    name: "opbeans-frontend"
    repository: "elastic/opbeans-frontend"

  - <<: *opbeans-docker-images
    name: "opbeans-java"
    repository: "elastic/opbeans-java"

  - <<: *opbeans-docker-images
    name: "opbeans-go"
    repository: "elastic/opbeans-go"

  - <<: *opbeans-docker-images
    name: "opbeans-loadgen"
    repository: "elastic/opbeans-loadgen"

  - <<: *opbeans-docker-images
    name: "opbeans-php"
    repository: "elastic/opbeans-php"

  - <<: *opbeans-docker-images
    name: "opbeans-ruby"
    repository: "elastic/opbeans-ruby"

  # APM Pipeline Library Docker Images

  - <<: *apm-agent-library-docker-images
    name: "dind-buildx"
    test_script: "cd .. && make test-dind-buildx"
    working_directory: ".ci/docker/dind-buildx"

  - <<: *apm-agent-library-docker-images
    name: "github-label-sync"
    test_script: "cd .. && make test-github-label-sync"
    working_directory: ".ci/docker/github-label-sync"

  - <<: *apm-agent-library-docker-images
    name: "shellcheck"
    test_script: "cd .. && make test-shellcheck"
    working_directory: ".ci/docker/shellcheck"

  - <<: *apm-agent-library-docker-images
    name: "yamllint"
    test_script: "cd .. && make test-yamllint"
    working_directory: ".ci/docker/yamllint"

  - <<: *apm-agent-library-docker-images
    name: "kibana-yarn"
    test_script: "cd .. && make test-kibana-yarn"
    working_directory: ".ci/docker/kibana-yarn"

  - <<: *apm-agent-library-docker-images
    name: "vmware-mock"
    test_script: "cd .. && make test-vmware-mock"
    working_directory: ".ci/docker/vmware-mock"

  # APM Agent Python Docker Images

  - name: "apm-agent-python-testing"
    repository: "elastic/apm-agent-python"
    working_directory: .ci/docker
    build_script: ./util.sh --action build
    push_script: ./util.sh --action push

  # APM Agent Ruby Docker images
  # dockerhub
  - <<: *apm-agent-ruby-docker-images
    name: "apm-agent-jruby"
    working_directory: ".ci/docker/jruby"
    build_script: "./run.sh --action build --registry 'elasticobservability'"
    test_script: "./run.sh --action test --registry 'elasticobservability'"
    push_script: "./run.sh --action push --registry 'elasticobservability'"

  # APM Agent RUM Docker images

  - <<: *apm-agent-rum-docker-images
    name: "node-playwright"
    tag: "12"
    working_directory: ".ci/docker/node-playwright"
    build_opts: "--build-arg NODEJS_VERSION='14'"

  - name: opentelemetry-collector-contrib
    working_directory: "apps/opentelemetry-collector-contrib"
    repository: "elastic/observability-robots"
    build_opts: "--no-cache-filter=clone"
