// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

@Library('apm@current') _

pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'apm-pipeline-library'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    PIPELINE_LOG_LEVEL = 'DEBUG'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
  }
  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  parameters {
    booleanParam(name: 'make_release', defaultValue: "false", description: "Enable perform a Release")
  }
  stages {
    /**
     Checkout the code and stash it, to use it on other stages.
    */
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        withGithubNotify(context: 'Checkout') {
          pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
          deleteDir()
          gitCheckout(basedir: "${BASE_DIR}")
          stash allowEmpty: true, name: 'source', useDefaultExcludes: false
        }
      }
    }

    stage('Check Licenses') {
      steps {
        withGithubNotify(context: 'Check Licenses') {
          deleteDir()
          unstash 'source'
          dir("${BASE_DIR}"){
            catchError(
                buildResult: 'SUCCESS',
                stageResult: 'UNSTABLE',
                message: 'Some files does not contain license'
                ) {
              checkLicenses(skip: true, junit:true, ext: '.groovy')
            }
          }
        }
      }
    }
    stage('Check pre-commit') {
      steps {
        withGithubNotify(context: 'Check pre-commit', tab: 'tests') {
          deleteDir()
          unstash 'source'
          dir("${BASE_DIR}"){
            preCommit(commit: "${GIT_BASE_COMMIT}", junit: true)
          }
        }
      }
    }
    /**
     Checkout the code and stash it, to use it on other stages.
    */
    stage('Test') {
      steps {
        withGithubNotify(context: 'Test', description: 'UTs', tab: 'tests') {
          deleteDir()
          unstash 'source'
          dir("${BASE_DIR}"){
            sh './mvnw clean test --batch-mode -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn'
          }
        }
      }
      post {
        always {
          archiveArtifacts(allowEmptyArchive: true, artifacts: '${BASE_DIR}/**/mail-out-test*.html')
          junit(allowEmptyResults: true,
            keepLongStdio: true,
            testResults: "${BASE_DIR}/target/surefire-reports/junit-*.xml,${BASE_DIR}/target/surefire-reports/TEST-*.xml")
        }
      }
    }

    stage('Check Pipelines') {
      steps {
        withGithubNotify(context: 'Check Pipelines') {
          dir("${BASE_DIR}"){
            validateDeclarativePipeline '.ci/Jenkinsfile'
            validateDeclarativePipeline '.ci/buildBeatsDockerImages.groovy'
            validateDeclarativePipeline '.ci/buildDockerImages.groovy'
            validateDeclarativePipeline '.ci/dockerImagesOpbeans.groovy'
            validateDeclarativePipeline '.ci/schedule-daily.groovy'
            validateDeclarativePipeline '.ci/schedule-weekly.groovy'
            validateDeclarativePipeline 'resources/JenkinsfileTemplate.groovy'
          }
        }
      }
    }
    stage('Release') {
      environment {
        // gren and other tools are in the .ci/scripts folder.
        PATH = "${env.WORKSPACE}/${env.BASE_DIR}/.ci/scripts:${env.PATH}"
      }
      when {
        expression {
          return params.make_release
        }
      }
      steps {
        dockerLogin(secret: "secret/apm-team/ci/docker-registry/prod",
          registry: "docker.elastic.co"
        )
        dir("${BASE_DIR}"){
          sh(label: 'Performing the Release', script: './resources/scripts/jenkins/release-perform.sh')
          sleep 30 //wait for changes available
          withCredentials([string(credentialsId: '2a9602aa-ab9f-4e52-baf3-b71ca88469c7', variable: 'GREN_GITHUB_TOKEN')]) {
            sh(label: 'Creating Release Notes', script: './resources/scripts/jenkins/release-notes.sh')
            sh(label: 'Add changelog', script: '''#!/bin/bash
              git add CHANGELOG.md
              git commit -m "docs: update CHANGELOG.md"
            ''')
          }
          gitPush()
          gitCreateTag(tag: 'current', tagArgs: '--force', pushArgs: '--force')
        }
      }
    }
    stage('Workers Checks'){
      parallel {
        stage('linux && immutable check'){
          agent { label 'linux && immutable' }
          options { skipDefaultCheckout() }
          environment {
            PATH = "${env.PATH}:${env.WORKSPACE}/bin:${env.WORKSPACE}/${BASE_DIR}/.ci/scripts"
          }
          steps {
            testUnix()
          }
          post {
            always {
              junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/**/junit-*.xml")
            }
          }
        }
        stage('Ubuntu 18.04 test'){
          agent { label 'ubuntu-edge' }
          options { skipDefaultCheckout() }
          environment {
            PATH = "${env.PATH}:${env.WORKSPACE}/bin:${env.WORKSPACE}/${BASE_DIR}/.ci/scripts"
          }
          steps {
            testUnix()
          }
          post {
            always {
              junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/**/junit-*.xml")
            }
          }
        }
        stage('Debian 9 test'){
          agent { label 'debian-9' }
          options { skipDefaultCheckout() }
          environment {
            PATH = "${env.PATH}:${env.WORKSPACE}/bin:${env.WORKSPACE}/${BASE_DIR}/.ci/scripts"
          }
          steps {
            testUnix()
          }
          post {
            always {
              junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/**/junit-*.xml")
            }
          }
        }
        stage('windows 2012 immutable check'){
          agent { label 'windows-2012-r2-immutable' }
          options { skipDefaultCheckout() }
          steps {
            checkWindows()
          }
        }
        stage('windows 2016 immutable check'){
          agent { label 'windows-2016-immutable' }
          options { skipDefaultCheckout() }
          steps {
            testWindows()
          }
          post {
            always {
              junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/**/junit-*.xml")
            }
          }
        }
        stage('windows 2019 immutable check'){
          agent { label 'windows-2019-immutable' }
          options { skipDefaultCheckout() }
          steps {
            testWindows()
          }
          post {
            always {
              junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/**/junit-*.xml")
            }
          }
        }
        stage('windows 2019 docker immutable check'){
          agent { label 'windows-2019-docker-immutable' }
          options { skipDefaultCheckout() }
          steps {
            testWindows()
          }
          post {
            always {
              junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/**/junit-*.xml")
            }
          }
        }
        stage('Mac OS X check - 01'){
          agent { label 'macosx' }
          options { skipDefaultCheckout() }
          steps {
            testUnix()
          }
          post {
            always {
              junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/**/junit-*.xml")
            }
          }
        }
        stage('BareMetal worker-854309 check'){
          agent { label 'worker-854309' }
          options { skipDefaultCheckout() }
          steps {
            testUnix()
          }
          post {
            always {
              junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/**/junit-*.xml")
            }
          }
        }
        stage('BareMetal worker-1095690 check'){
          agent { label 'worker-1095690' }
          options { skipDefaultCheckout() }
          steps {
            testUnix()
          }
          post {
            always {
              junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/**/junit-*.xml")
            }
          }
        }
      }
    }
  }
  post {
    always {
      githubPrComment()
    }
    cleanup {
      notifyBuildResult()
    }
  }
}

def testUnix(){
  deleteDir()
  unstash 'source'
  dir("${BASE_DIR}"){
    sh script: '''
    pip install testinfra
    PATH=${HOME}/.local/bin:${PATH}
    py.test -v test-infra/test_generic.py --junit-xml=target/junit-test-infra.xml
    '''
  }
}

def testWindows(){
  deleteDir()
  unstash 'source'
  dir("${BASE_DIR}"){
    bat returnStatus: true, script: 'echo foo'
  }
}
