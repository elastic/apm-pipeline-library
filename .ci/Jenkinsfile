// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

@Library('apm@main') _

pipeline {
  agent {
    kubernetes {
      defaultContainer 'python'
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          securityContext:
            runAsUser: 1000 # default UID of jenkins user in agent image
          containers:
          - name: python
            image: python:3.9
            command:
              - sleep
            args:
              - infinity
      '''
      }
   }
  environment {
    REPO = 'apm-integration-testing'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    PIPELINE_LOG_LEVEL = 'INFO'
    LANG = "C.UTF-8"
    LC_ALL = "C.UTF-8"
    SLACK_CHANNEL = '#observablt-bots'
    JOB_GCS_BUCKET = 'apm-ci-temp'
    JOB_GCS_CREDENTIALS = 'apm-ci-gcs-plugin-file-credentials'
    GITHUB_CHECK = 'true'
    HOME = "${env.WORKSPACE}"
    PATH = "${env.HOME}/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    REPO_BRANCH = "main"
    DOCKER_SECRET = "secret/observability-team/ci/docker-registry/prod"
    DOCKER_REGISTRY = 'docker.elastic.co'
    DOCKER_PREFIX = "observability-ci"
    VENV="./venv"
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    disableConcurrentBuilds(abortPrevious: isPR())
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        sh(script:'df -h')
        withGithubNotify(context: 'Checkout') {
          deleteDir()
          gitCheckout(basedir: "${BASE_DIR}", branch: "${REPO_BRANCH}",
            repo: "git@github.com:elastic/${REPO}.git",
            credentialsId:"f6c7695a-671e-4f4f-a331-acdce44ff9ba")
        }
      }
    }
    stage('lint') {
      steps {
        withGithubNotify(context: 'lint') {
          deleteDir()
          gitCheckout(basedir: "${BASE_DIR}", branch: "${REPO_BRANCH}",
            repo: "git@github.com:elastic/${REPO}.git",
            credentialsId:"f6c7695a-671e-4f4f-a331-acdce44ff9ba")
          dir("${BASE_DIR}"){
            preCommit(commit: "${GIT_BASE_COMMIT}", junit: true, registry: '')
            sh(script: '''
              python -m venv ${VENV}
              . ${VENV}/bin/activate
              pip install -q -r requirements.txt
            ''')
            sh(script: 'make test-compose')
          }
        }
      }
    }
    stage('Build Containers') {
      agent {
        kubernetes {
          defaultContainer 'python'
          yaml '''
          apiVersion: v1
          kind: Pod
          spec:
            containers:
              - name: dind
                image: docker:20.10.12-dind
                securityContext:
                  privileged: true
                env:
                  - name: DOCKER_TLS_CERTDIR
                    value: ""
                command:
                  - dockerd
                args:
                  - -H tcp://localhost:2375
                  - -H unix:///var/run/docker.sock
                ports:
                  - containerPort: 2375
                    hostIP: 127.0.0.1
                volumeMounts:
                  - name: docker-cache
                    mountPath: /var/lib/docker
              - name: python
                image: python:3.9
                securityContext:
                  runAsUser: 1000 # default UID of jenkins user in agent image
                command:
                  - sleep
                args:
                  - infinity
                env:
                  - name: DOCKER_HOST
                    value: tcp://localhost:2375
            volumes:
              - name: docker-cache
                emptyDir: {}
            '''
        }
      }
      options { skipDefaultCheckout() }
      environment {
        HOME = "${env.WORKSPACE}"
        PATH = "${env.HOME}/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      }
      steps {
        withGithubNotify(context: 'Build Containers') {
          deleteDir()
          container('dind') {
            sh 'docker version'
            sh(script: "mkdir -p ${env.WORKSPACE}/bin && cp \$(command -v docker) ${env.WORKSPACE}/bin")
          }
          sh 'docker version'
          gitCheckout(basedir: "${BASE_DIR}", branch: "${REPO_BRANCH}",
            repo: "git@github.com:elastic/${REPO}.git",
            credentialsId:"f6c7695a-671e-4f4f-a331-acdce44ff9ba")
          dir("${BASE_DIR}"){
            dockerLogin(secret: "${DOCKER_SECRET}", registry: "${DOCKER_REGISTRY}")
            sh(script: '''
              python -m venv ${VENV}
              . ${VENV}/bin/activate
              pip install -q -r requirements.txt
              ./scripts/compose.py build 7.16.2 --release --output-format yaml --no-apm-server-self-instrument --with-agent-go-net-http --force-build --apm-log-level=debug  --go-agent-version=master
            ''')
            sh(script: """
              docker build --pull -t apm-integration-testing .
              docker tag apm-integration-testing:latest ${DOCKER_REGISTRY}/${DOCKER_PREFIX}/apm-integration-testing:latest
              docker push ${DOCKER_REGISTRY}/${DOCKER_PREFIX}/apm-integration-testing:latest
              docker tag apm-integration-testing_agent-go-net-http:latest ${DOCKER_REGISTRY}/${DOCKER_PREFIX}/apm-integration-testing_agent-go-net-http:latest
              docker push ${DOCKER_REGISTRY}/${DOCKER_PREFIX}/apm-integration-testing_agent-go-net-http:latest
            """)
          }
        }
      }
    }
    stage('APM Go ITs') {
      agent {
        kubernetes {
          defaultContainer 'python'
          yaml """
            apiVersion: v1
            kind: Pod
            spec:
              hostAliases:
                - ip: "127.0.0.1"
                  hostnames:
                    - "gonethttpapp"
                    - "apm-server"
                    - "elasticsearch"
                    - "kibana"
              securityContext:
                runAsUser: 1000 # default UID of jenkins user in agent image
              containers:
              - name: python
                image: ${DOCKER_REGISTRY}/${DOCKER_PREFIX}/apm-integration-testin:latest
                command:
                  - sleep
                args:
                  - infinity
                env:
                  - name: APM_SERVER_URL
                    value: http://apm-server:8200
                  - name: ES_URL
                    value: http://elasticsearch:9200
                  - name: KIBANA_URL
                    value: http://kibana:5601
                  - name: GO_NETHTTP_URL
                    value: http://gonethttpapp:8080
                  - name: PYTHONDONTWRITEBYTECODE
                    value: 1
                  - name: PYTHONHTTPSVERIFY
                    value: 1
                  - name: ES_USER
                    value: elastic
                  - name: ES_PASS
                    value: changeme
                  - name: ELASTIC_APM_SECRET_TOKEN
                    value: SuPeRsEcReT
              - image: ${DOCKER_REGISTRY}/${DOCKER_PREFIX}/apm-integration-testing_agent-go-net-http:latest
                name: gonethttpapp
                env:
                  - name: ELASTIC_APM_API_REQUEST_TIME
                    value: 3s
                  - name: ELASTIC_APM_FLUSH_INTERVAL
                    value: 500ms
                  - name: ELASTIC_APM_LOG_LEVEL
                    value: debug
                  - name: ELASTIC_APM_SERVER_URL
                    value: http://apm-server:8200
                  - name: ELASTIC_APM_SERVICE_NAME
                    value: gonethttpapp
                  - name: ELASTIC_APM_TRANSACTION_IGNORE_NAMES
                    value: healthcheck
                  - name: ELASTIC_APM_VERIFY_SERVER_CERT
                    value: "false"
                ports:
                  - containerPort: 8080
                    hostIP: 127.0.0.1
              - image: docker.elastic.co/apm/apm-server:7.16.2
                name: localtesting-7-16-2-apm-server
                args:
                  - apm-server
                  - -e
                  - --httpprof
                  - :6060
                  - -E
                  - apm-server.rum.enabled=true
                  - -E
                  - apm-server.rum.event_rate.limit=1000
                  - -E
                  - apm-server.host=0.0.0.0:8200
                  - -E
                  - apm-server.read_timeout=1m
                  - -E
                  - apm-server.shutdown_timeout=2m
                  - -E
                  - apm-server.write_timeout=1m
                  - -E
                  - logging.json=true
                  - -E
                  - logging.metrics.enabled=false
                  - -E
                  - monitoring.elasticsearch=true
                  - -E
                  - monitoring.enabled=true
                  - -E
                  - apm-server.rum.allow_headers=["x-custom-header"]
                  - -E
                  - apm-server.kibana.enabled=true
                  - -E
                  - apm-server.kibana.host=kibana:5601
                  - -E
                  - apm-server.agent.config.cache.expiration=30s
                  - -E
                  - apm-server.kibana.username=apm_server_user
                  - -E
                  - apm-server.kibana.password=changeme
                  - -E
                  - output.elasticsearch.hosts=["http://elasticsearch:9200"]
                  - -E
                  - output.elasticsearch.username=apm_server_user
                  - -E
                  - output.elasticsearch.password=changeme
                  - -E
                  - output.elasticsearch.enabled=true
                env:
                  - name: BEAT_STRICT_PERMS
                    value: "false"
                ports:
                  - containerPort: 8200
                    hostIP: 127.0.0.1
                  - containerPort: 6060
                    hostIP: 127.0.0.1
                securityContext:
                  capabilities:
                    add:
                      - CHOWN
                      - DAC_OVERRIDE
                      - SETGID
                      - SETUID
                    drop:
                      - ALL
              - image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2
                name: localtesting-7-16-2-elasticsearch
                env:
                  - name: ES_JAVA_OPTS
                    value: -XX:UseAVX=2 -Xms1g -Xmx1g
                  - name: bootstrap.memory_lock
                    value: "true"
                  - name: cluster.name
                    value: docker-cluster
                  - name: cluster.routing.allocation.disk.threshold_enabled
                    value: "false"
                  - name: discovery.type
                    value: single-node
                  - name: xpack.license.self_generated.type
                    value: trial
                  - name: xpack.security.authc.api_key.enabled
                    value: "true"
                  - name: xpack.security.authc.token.enabled
                    value: "true"
                  - name: xpack.security.enabled
                    value: "true"
                ports:
                  - containerPort: 9200
                    hostIP: 127.0.0.1
              - image: docker.elastic.co/kibana/kibana:7.16.2
                name: localtesting-7-16-2-kibana
                env:
                  - name: ELASTICSEARCH_HOSTS
                    value: http://elasticsearch:9200
                  - name: ELASTICSEARCH_PASSWORD
                    value: changeme
                  - name: ELASTICSEARCH_USERNAME
                    value: kibana_system_user
                  - name: SERVER_HOST
                    value: 0.0.0.0
                  - name: SERVER_NAME
                    value: kibana.example.org
                  - name: STATUS_ALLOWANONYMOUS
                    value: "true"
                  - name: TELEMETRY_ENABLED
                    value: "false"
                  - name: XPACK_APM_SERVICEMAPENABLED
                    value: "true"
                  - name: XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY
                    value: fhjskloppd678ehkdfdlliverpoolfcr
                  - name: XPACK_FLEET_AGENTS_ELASTICSEARCH_HOST
                    value: http://elasticsearch:9200
                  - name: XPACK_FLEET_AGENTS_KIBANA_HOST
                    value: http://kibana:5601
                  - name: XPACK_MONITORING_ENABLED
                    value: "true"
                  - name: XPACK_SECURITY_ENCRYPTIONKEY
                    value: fhjskloppd678ehkdfdlliverpoolfcr
                  - name: XPACK_SECURITY_LOGINASSISTANCEMESSAGE
                    value: Login&#32;details:&#32;`admin/changeme`.&#32;Further&#32;details&#32;[here](https://github.com/elastic/apm-integration-testing#logging-in).
                  - name: XPACK_XPACK_MAIN_TELEMETRY_ENABLED
                    value: "false"
                ports:
                  - containerPort: 5601
                    hostIP: 127.0.0.1
          """
          }
       }
       environment {
         HOME = "${env.WORKSPACE}"
         PATH = "${env.HOME}/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
       }
      steps {
        withGithubNotify(context: 'APM Go ITs') {
          deleteDir()
          gitCheckout(basedir: "${BASE_DIR}", branch: "${REPO_BRANCH}",
            repo: "git@github.com:elastic/${REPO}.git",
            credentialsId:"f6c7695a-671e-4f4f-a331-acdce44ff9ba")
          dir("${BASE_DIR}"){
            sh(script: """
              make test-agent-go
            """)
          }
        }
      }
    }
  }
}
