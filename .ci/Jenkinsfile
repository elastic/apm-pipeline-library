// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

@Library('apm@main') _

pipeline {
  agent {
    kubernetes {
      defaultContainer 'golang'
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: golang
            image: docker.elastic.co/beats-dev/golang-crossbuild:1.17.5-darwin-arm64-debian10
            command:
              - sleep
            args:
              - infinity
      '''
      }
   }
  environment {
    REPO = 'beats'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    PIPELINE_LOG_LEVEL = 'INFO'
    MAVEN_CONFIG = "${params.MAVEN_CONFIG}"
    LANG = "C.UTF-8"
    LC_ALL = "C.UTF-8"
    SLACK_CHANNEL = '#observablt-bots'
    JOB_GCS_BUCKET = 'apm-ci-temp'
    JOB_GCS_CREDENTIALS = 'apm-ci-gcs-plugin-file-credentials'
    GITHUB_CHECK = 'true'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    disableConcurrentBuilds(abortPrevious: isPR())
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        withGithubNotify(context: 'Checkout') {
          deleteDir()
          gitCheckout(basedir: "${BASE_DIR}")
          stash allowEmpty: true, name: 'source', useDefaultExcludes: false
        }
      }
    }
    stage('lint') {
      steps {
        withGithubNotify(context: 'lint') {
          deleteDir()
          unstash 'source'
          dir("${BASE_DIR}"){
            sh(script:'''
              make -C filebeat check;
              make -C filebeat update;
              make -C x-pack/filebeat check;
              make -C x-pack/filebeat update;
              make check-no-changes;
            ''')
          }
        }
      }
    }
    stage('build') {
      steps {
        withGithubNotify(context: 'Build') {
          deleteDir()
          unstash 'source'
          dir("${BASE_DIR}/filebeat"){
            sh(script:'''
              mage build;
            ''')
          }
        }
      }
    }
    stage('test') {
      steps {
        withGithubNotify(context: 'test') {
          deleteDir()
          unstash 'source'
          dir("${BASE_DIR}/filebeat"){
            sh(script:'''
              mage unitTest;
            ''')
          }
        }
      }
    }
  }
}
