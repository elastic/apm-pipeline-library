// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

@Library('apm@main') _

pipeline {
  agent {
    kubernetes {
      defaultContainer 'python'
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          securityContext:
            runAsUser: 1000 # default UID of jenkins user in agent image
          containers:
          - name: python
            image: python:3.7-stretch
            command:
              - sleep
            args:
              - infinity
      '''
      }
   }
  environment {
    REPO = 'apm-agent-python'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    PIPELINE_LOG_LEVEL = 'INFO'
    LANG = "C.UTF-8"
    LC_ALL = "C.UTF-8"
    SLACK_CHANNEL = '#observablt-bots'
    JOB_GCS_BUCKET = 'apm-ci-temp'
    JOB_GCS_CREDENTIALS = 'apm-ci-gcs-plugin-file-credentials'
    GITHUB_CHECK = 'true'
    HOME = "${env.WORKSPACE}"
    PATH = "${env.HOME}/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    REPO_BRANCH = "master"
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    disableConcurrentBuilds(abortPrevious: isPR())
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        sh(script:'df -h')
        withGithubNotify(context: 'Checkout') {
          deleteDir()
          gitCheckout(basedir: "${BASE_DIR}", branch: "${REPO_BRANCH}",
            repo: "git@github.com:elastic/${REPO}.git",
            credentialsId:"f6c7695a-671e-4f4f-a331-acdce44ff9ba")
        }
      }
    }
    stage('lint') {
      steps {
        withGithubNotify(context: 'lint') {
          deleteDir()
          gitCheckout(basedir: "${BASE_DIR}", branch: "${REPO_BRANCH}",
            repo: "git@github.com:elastic/${REPO}.git",
            credentialsId:"f6c7695a-671e-4f4f-a331-acdce44ff9ba")
          dir("${BASE_DIR}"){
            preCommit(commit: "${GIT_BASE_COMMIT}", junit: true, registry: '')
          }
        }
      }
    }
    stage('matrix') {
      matrix {
        agent {
          kubernetes {
            defaultContainer 'python'
            yaml """
              apiVersion: v1
              kind: Pod
              spec:
                securityContext:
                  runAsUser: 1000 # default UID of jenkins user in agent image
                containers:
                - name: python
                  image: python:${PYTHON_VERSION}-stretch
                  command:
                    - sleep
                  args:
                    - infinity
            """
            }
        }
        axes {
          axis {
            name "PYTHON_VERSION"
            values "3.6", "3.7", "3.8", "3.9", "3.10"
          }
          axis {
            name "FRAMEWORK"
            values "django-4.0", "django-3.2", "django-3.1", "django-2.0", "django-1.11"
          }
        }
        stages {
          stage('tests'){
            steps {
              withGithubNotify(context: 'test') {
                deleteDir()
                gitCheckout(basedir: "${BASE_DIR}", branch: "${REPO_BRANCH}",
                  repo: "git@github.com:elastic/${REPO}.git",
                  credentialsId:"f6c7695a-671e-4f4f-a331-acdce44ff9ba")
                dir("${BASE_DIR}"){
                  withEnv([
                    "PYTHONDONTWRITEBYTECODE=1",
                    "WEBFRAMEWORK=${FRAMEWORK}",
                    "PIP_CACHE=/tmp/cache/pip",
                    "WITH_COVERAGE=true"
                    ]
                    ){
                      sh(script: "mkdir ${env.PIP_CACHE}")
                      sh(script:'''
                        timeout 5m /bin/bash ./tests/scripts/run_tests.sh
                      ''')
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
