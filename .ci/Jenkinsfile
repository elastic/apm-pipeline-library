// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

@Library('apm@current') _

pipeline {
  agent any
  environment {
    BASE_DIR="src/github.com/elastic/apm-pipeline-library"
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    PIPELINE_LOG_LEVEL = 'INFO'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
  }
  parameters {
    booleanParam(name: 'make_release', defaultValue: "false", description: "Enable perform a Release")
  }
  stages {
    stage('Initializing'){
      agent { label 'linux && immutable' }
      options { skipDefaultCheckout() }
      environment {
        PATH = "${env.PATH}:${env.WORKSPACE}/bin"
      }
      stages {
        /**
         Checkout the code and stash it, to use it on other stages.
        */
        stage('Checkout') {
          steps {
            withGithubNotify(context: 'Checkout') {
              deleteDir()
              gitCheckout(basedir: "${BASE_DIR}")
              stash allowEmpty: true, name: 'source', useDefaultExcludes: false
            }
          }
        }

        stage('Check Licenses') {
          steps {
            withGithubNotify(context: 'Check Licenses') {
              deleteDir()
              unstash 'source'
              dir("${BASE_DIR}"){
                catchError(
                    buildResult: 'SUCCESS',
                    stageResult: 'UNSTABLE',
                    message: 'Some files does not contain license'
                    ) {
                  checkLicenses(skip: true, junit:true, ext: '.groovy')
                }
              }
            }
          }
        }
        stage('Check pre-commit') {
          environment {
            HOME = "${env.WORKSPACE}"
            PATH = "${env.WORKSPACE}/${env.BASE_DIR}/.ci/scripts:${env.PATH}"
          }
          steps {
            withGithubNotify(context: 'Check pre-commit') {
              deleteDir()
              unstash 'source'
              dir("${BASE_DIR}"){
                sh '''
                  env | sort
                  curl https://pre-commit.com/install-local.py | python -
                  git diff-tree --no-commit-id --name-only -r ${GIT_BASE_COMMIT} | xargs pre-commit run --files
                '''
              }
            }
          }
        }
        /**
         Checkout the code and stash it, to use it on other stages.
        */
        stage('Test') {
          steps {
            withGithubNotify(context: 'Test', description: 'UTs', tab: 'tests') {
              deleteDir()
              unstash 'source'
              dir("${BASE_DIR}"){
                sh './mvnw clean test --batch-mode -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn'
              }
            }
          }
          post {
            always {
              archiveArtifacts(allowEmptyArchive: true, artifacts: '${BASE_DIR}/**/mail-out-test*.html')
              junit(allowEmptyResults: true,
                keepLongStdio: true,
                testResults: "${BASE_DIR}/target/surefire-reports/junit-*.xml,${BASE_DIR}/target/surefire-reports/TEST-*.xml")
            }
          }
        }

        stage('Check Pipelines') {
          steps {
            withGithubNotify(context: 'Check Pipelines') {
              validateDeclarativePipeline '.ci/Jenkinsfile'
              validateDeclarativePipeline '.ci/buildDockerImages.groovy'
              validateDeclarativePipeline '.ci/dockerImagesESLatest.groovy'
              validateDeclarativePipeline '.ci/dockerImagesOpbeans.groovy'
              validateDeclarativePipeline '.ci/schedule-daily.groovy'
              validateDeclarativePipeline '.ci/schedule-weekly.groovy'
              validateDeclarativePipeline 'resources/JenkinsfileTemplate.groovy'
            }
          }
        }
        stage('Release') {
          when {
            expression {
              return params.make_release
            }
          }
          steps {
            dir("${BASE_DIR}"){
              sh(label: "Checkout branch ${BRANCH_NAME}", script: "git checkout -f ${BRANCH_NAME}")
              sh(label: 'Performing the Release', script: 'mvn release:prepare release:perform --batch-mode -Darguments="-DskipTests=true --batch-mode"')
              withCredentials([string(credentialsId: '2a9602aa-ab9f-4e52-baf3-b71ca88469c7', variable: 'GREN_GITHUB_TOKEN')]) {
                sh(label: 'Creating Release Notes', script: 'export && ./resources/scripts/jenkins/release-notes.sh')
              }
              gitCreateTag(tag: 'current')
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult()
    }
  }
}
