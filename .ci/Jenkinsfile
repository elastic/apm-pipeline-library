// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

@Library('apm@main') _

pipeline {
  agent none
  environment {
    REPO = 'apm-pipeline-library'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    PIPELINE_LOG_LEVEL = 'DEBUG'
    MAVEN_CONFIG = "${params.MAVEN_CONFIG}"
    LANG = "C.UTF-8"
    LC_ALL = "C.UTF-8"
    SLACK_CHANNEL = '#observablt-bots'
    JOB_GCS_BUCKET = 'apm-ci-temp'
    JOB_GCS_CREDENTIALS = 'apm-ci-gcs-plugin-file-credentials'
    GITHUB_CHECK = 'true'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    disableConcurrentBuilds(abortPrevious: isPR())
    skipDefaultCheckout true
  }
  triggers {
    issueCommentTrigger("(${obltGitHubComments()}|^run infra tests|^/test all)")
  }
  parameters {
    string(name: 'MAVEN_CONFIG', defaultValue: '', description: 'Additional maven options.')
    booleanParam(name: 'make_release', defaultValue: "false", description: "Enable perform a Release")
  }
  stages {
    stage('Checkout') {
      agent { label 'master' }
      steps {
        withGithubNotify(context: 'Checkout') {
          pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
          deleteDir()
          gitCheckout(basedir: "${BASE_DIR}")
        }
      }
    }
    stage('Environment') {
      options { skipDefaultCheckout() }
      steps {
        echo "${env.CHANGE_BRANCH}"
        echo "${env.CHANGE_TARGET}"
        echo "${env.GIT_COMMIT}"
        echo "${env.BRANCH_NAME}"
      }
    }

  }
  post {
    cleanup {
      notifyBuildResult(prComment: true, slackComment: true, analyzeFlakey: true, jobName: getFlakyJobName(withBranch: 'main'))
      deleteDir()
    }
  }
}
