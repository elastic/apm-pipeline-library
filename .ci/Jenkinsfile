// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

@Library('apm@master') _

pipeline {
  agent none
  environment {
    REPO = 'apm-pipeline-library'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    PIPELINE_LOG_LEVEL = 'DEBUG'
    MAVEN_CONFIG = "${params.MAVEN_CONFIG}"
    LANG = "C.UTF-8"
    LC_ALL = "C.UTF-8"
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
  }
  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  parameters {
    string(name: 'MAVEN_CONFIG', defaultValue: '', description: 'Additional maven options.')
    booleanParam(name: 'make_release', defaultValue: "false", description: "Enable perform a Release")
  }
  stages {
    /**
     Checkout the code and stash it, to use it on other stages.
    */
    stage('Node-14') {
      agent {
          docker {
            image 'node:14-alpine'
            label 'ubuntu-18'
          }
      }
      steps {
        sh 'node --version'
      }
    }
    stage('Ubuntu') {
      agent {
        label 'ubuntu-18'
      }
      stages {
        stage('Node-12') {
          agent {
              docker {
                image 'node:12-alpine'
              }
          }
          steps {
            sh 'node --version'
          }
        }
        stage('Node-8') {
          agent {
              docker {
                image 'node:8-alpine'
              }
          }
          steps {
            sh 'node --version'
          }
        }
      }
    }
  }
}
