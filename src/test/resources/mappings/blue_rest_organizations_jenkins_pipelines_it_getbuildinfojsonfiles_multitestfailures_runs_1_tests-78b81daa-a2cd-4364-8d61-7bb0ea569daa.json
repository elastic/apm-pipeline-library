{
  "id" : "78b81daa-a2cd-4364-8d61-7bb0ea569daa",
  "name" : "blue_rest_organizations_jenkins_pipelines_it_getbuildinfojsonfiles_multitestfailures_runs_1_tests",
  "request" : {
    "url" : "/blue/rest/organizations/jenkins/pipelines/it/getBuildInfoJsonFiles/multiTestFailures/runs/1/tests/?status=FAILED&limit=1000",
    "method" : "GET"
  },
  "response" : {
    "status" : 200,
    "body" : "[{\"_class\":\"io.jenkins.blueocean.service.embedded.rest.junit.BlueJUnitTestResult\",\"_links\":{\"stdOut\":{\"_class\":\"io.jenkins.blueocean.rest.hal.Link\",\"href\":\"/blue/rest/organizations/jenkins/pipelines/it/pipelines/getBuildInfoJsonFiles/pipelines/multiTestFailures/runs/1/tests/io.jenkins.blueocean.service.embedded.rest.junit.BlueJUnitTestResult%3Afilebeat.tests.system.test_harvester.Test%253Ajunit%252Ffilebeat.tests.system.test_harvester%252FTest%252Ftest_debug_reader/stdOut/\"},\"self\":{\"_class\":\"io.jenkins.blueocean.rest.hal.Link\",\"href\":\"/blue/rest/organizations/jenkins/pipelines/it/pipelines/getBuildInfoJsonFiles/pipelines/multiTestFailures/runs/1/tests/io.jenkins.blueocean.service.embedded.rest.junit.BlueJUnitTestResult%3Afilebeat.tests.system.test_harvester.Test%253Ajunit%252Ffilebeat.tests.system.test_harvester%252FTest%252Ftest_debug_reader/\"},\"stdErr\":{\"_class\":\"io.jenkins.blueocean.rest.hal.Link\",\"href\":\"/blue/rest/organizations/jenkins/pipelines/it/pipelines/getBuildInfoJsonFiles/pipelines/multiTestFailures/runs/1/tests/io.jenkins.blueocean.service.embedded.rest.junit.BlueJUnitTestResult%3Afilebeat.tests.system.test_harvester.Test%253Ajunit%252Ffilebeat.tests.system.test_harvester%252FTest%252Ftest_debug_reader/stdErr/\"}},\"age\":1,\"duration\":5.176,\"errorDetails\":\"beat.beat.TimeoutError: Timeout waiting for 'cond' to be true. Waited 5 seconds.\",\"errorStackTrace\":\"self = <test_harvester.Test testMethod=test_debug_reader>\\n\\n    def test_debug_reader(self):\\n        \\\"\\\"\\\"\\n        Test that you can enable a debug reader.\\n        \\\"\\\"\\\"\\n        self.render_config_template(\\n            path=os.path.abspath(self.working_dir) + \\\"/log/*\\\",\\n        )\\n    \\n        os.mkdir(self.working_dir + \\\"/log/\\\")\\n    \\n        logfile = self.working_dir + \\\"/log/test.log\\\"\\n    \\n        lines = [\\n            b\\\"Hello World\\n\\\",\\n        ]\\n        with open(logfile, 'wb') as f:\\n            for line in lines:\\n                f.write(line)\\n    \\n            # Write some more data to hit the 16k min buffer size.\\n            # Make it web safe.\\n            f.write(base64.b64encode(os.urandom(16 * 1024)))\\n    \\n        filebeat = self.start_beat()\\n    \\n        # 13 on unix, 14 on windows.\\n        self.wait_until(lambda: self.log_contains(re.compile(\\n>           'Matching null byte found at offset (13|14)')), max_timeout=5)\\n\\ntests/system/test_harvester.py:859: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \\n\\nself = <test_harvester.Test testMethod=test_debug_reader>\\ncond = <function Test.test_debug_reader.<locals>.<lambda> at 0x10abc8b00>\\nmax_timeout = 5, poll_interval = 0.1, name = 'cond'\\n\\n    def wait_until(self, cond, max_timeout=10, poll_interval=0.1, name=\\\"cond\\\"):\\n        \\\"\\\"\\\"\\n        Waits until the cond function returns true,\\n        or until the max_timeout is reached. Calls the cond\\n        function every poll_interval seconds.\\n    \\n        If the max_timeout is reached before cond() returns\\n        true, an exception is raised.\\n        \\\"\\\"\\\"\\n        start = datetime.now()\\n        while not cond():\\n            if datetime.now() - start > timedelta(seconds=max_timeout):\\n                raise TimeoutError(\\\"Timeout waiting for '{}' to be true. \\\".format(name) +\\n>                                  \\\"Waited {} seconds.\\\".format(max_timeout))\\nE               beat.beat.TimeoutError: Timeout waiting for 'cond' to be true. Waited 5 seconds.\\n\\n../libbeat/tests/system/beat/beat.py:363: TimeoutError\",\"hasStdLog\":false,\"id\":\"io.jenkins.blueocean.service.embedded.rest.junit.BlueJUnitTestResult:filebeat.tests.system.test_harvester.Test%3Ajunit%2Ffilebeat.tests.system.test_harvester%2FTest%2Ftest_debug_reader\",\"name\":\"test_debug_reader – filebeat.tests.system.test_harvester.Test\",\"state\":\"UNKNOWN\",\"status\":\"FAILED\"},{\"_class\":\"io.jenkins.blueocean.service.embedded.rest.junit.BlueJUnitTestResult\",\"_links\":{\"stdOut\":{\"_class\":\"io.jenkins.blueocean.rest.hal.Link\",\"href\":\"/blue/rest/organizations/jenkins/pipelines/it/pipelines/getBuildInfoJsonFiles/pipelines/multiTestFailures/runs/1/tests/io.jenkins.blueocean.service.embedded.rest.junit.BlueJUnitTestResult%3Afilebeat.tests.system.test_json.Test%253Ajunit%252Ffilebeat.tests.system.test_json%252FTest%252Ftest_timestamp_in_message/stdOut/\"},\"self\":{\"_class\":\"io.jenkins.blueocean.rest.hal.Link\",\"href\":\"/blue/rest/organizations/jenkins/pipelines/it/pipelines/getBuildInfoJsonFiles/pipelines/multiTestFailures/runs/1/tests/io.jenkins.blueocean.service.embedded.rest.junit.BlueJUnitTestResult%3Afilebeat.tests.system.test_json.Test%253Ajunit%252Ffilebeat.tests.system.test_json%252FTest%252Ftest_timestamp_in_message/\"},\"stdErr\":{\"_class\":\"io.jenkins.blueocean.rest.hal.Link\",\"href\":\"/blue/rest/organizations/jenkins/pipelines/it/pipelines/getBuildInfoJsonFiles/pipelines/multiTestFailures/runs/1/tests/io.jenkins.blueocean.service.embedded.rest.junit.BlueJUnitTestResult%3Afilebeat.tests.system.test_json.Test%253Ajunit%252Ffilebeat.tests.system.test_json%252FTest%252Ftest_timestamp_in_message/stdErr/\"}},\"age\":1,\"duration\":10.179,\"errorDetails\":\"beat.beat.TimeoutError: Timeout waiting for 'cond' to be true. Waited 10 seconds.\",\"errorStackTrace\":\"self = <test_json.Test testMethod=test_timestamp_in_message>\\n\\n    def test_timestamp_in_message(self):\\n        \\\"\\\"\\\"\\n        Should be able to make use of a `@timestamp` field if it exists in the\\n        message.\\n        \\\"\\\"\\\"\\n        self.render_config_template(\\n            path=os.path.abspath(self.working_dir) + \\\"/log/*\\\",\\n            json=dict(\\n                keys_under_root=True,\\n                overwrite_keys=True,\\n                add_error_key=True,\\n            ),\\n        )\\n        os.mkdir(self.working_dir + \\\"/log/\\\")\\n        self.copy_files([\\\"logs/json_timestamp.log\\\"],\\n                        target_dir=\\\"log\\\")\\n    \\n        proc = self.start_beat()\\n        self.wait_until(\\n            lambda: self.output_has(lines=5),\\n>           max_timeout=10)\\n\\ntests/system/test_json.py:175: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \\n\\nself = <test_json.Test testMethod=test_timestamp_in_message>\\ncond = <function Test.test_timestamp_in_message.<locals>.<lambda> at 0x10a870950>\\nmax_timeout = 10, poll_interval = 0.1, name = 'cond'\\n\\n    def wait_until(self, cond, max_timeout=10, poll_interval=0.1, name=\\\"cond\\\"):\\n        \\\"\\\"\\\"\\n        Waits until the cond function returns true,\\n        or until the max_timeout is reached. Calls the cond\\n        function every poll_interval seconds.\\n    \\n        If the max_timeout is reached before cond() returns\\n        true, an exception is raised.\\n        \\\"\\\"\\\"\\n        start = datetime.now()\\n        while not cond():\\n            if datetime.now() - start > timedelta(seconds=max_timeout):\\n                raise TimeoutError(\\\"Timeout waiting for '{}' to be true. \\\".format(name) +\\n>                                  \\\"Waited {} seconds.\\\".format(max_timeout))\\nE               beat.beat.TimeoutError: Timeout waiting for 'cond' to be true. Waited 10 seconds.\\n\\n../libbeat/tests/system/beat/beat.py:363: TimeoutError\",\"hasStdLog\":false,\"id\":\"io.jenkins.blueocean.service.embedded.rest.junit.BlueJUnitTestResult:filebeat.tests.system.test_json.Test%3Ajunit%2Ffilebeat.tests.system.test_json%2FTest%2Ftest_timestamp_in_message\",\"name\":\"test_timestamp_in_message – filebeat.tests.system.test_json.Test\",\"state\":\"UNKNOWN\",\"status\":\"FAILED\"}]",
    "headers" : {
      "Date" : "Mon, 23 Nov 2020 15:49:49 GMT",
      "X-Content-Type-Options" : "nosniff",
      "X-Blueocean-Refresher" : "b5a2187c",
      "Cache-Control" : "no-cache, no-store, no-transform",
      "Link" : "</blue/rest/organizations/jenkins/pipelines/it/getBuildInfoJsonFiles/multiTestFailures/runs/1/tests/?status=FAILED&limit=1000&start=100&limit=100>; rel=\"next\"",
      "X-Jenkins" : "2.252",
      "X-Jenkins-Session" : "b5a2187c",
      "Content-Type" : "application/json;charset=utf-8",
      "Server" : "Jetty(9.4.30.v20200611)"
    }
  },
  "uuid" : "78b81daa-a2cd-4364-8d61-7bb0ea569daa",
  "persistent" : true,
  "insertionIndex" : 4
}
