running (cwd: ./test/start/env): node --unhandled-rejections=strict test.test.js
TAP version 13
# from-env service name test
ok 1 should be strictly equal

1..1
# tests 1
# pass  1

# ok

running (cwd: ./test/start/file): node --unhandled-rejections=strict test.test.js
TAP version 13
# from-file serviceName test
ok 1 should be strictly equal

1..1
# tests 1
# pass  1

# ok

running (cwd: ./): node --unhandled-rejections=strict test/InflightEventSet.test.js
TAP version 13
# InflightEventSet normal operation
ok 1 true
ok 2 no error to drain handler
# InflightEventSet no drain handler
ok 3 nothing happened when set emptied
# InflightEventSet timeout
ok 4 drain handler was called
ok 5 got an error from drain handler
ok 6 time to timeout was near 1000ms (was 1001ms)

1..6
# tests 6
# pass  6

# ok

running (cwd: ./): node --unhandled-rejections=strict test/agent.test.js
TAP version 13
# #getServiceName()
ok 1 agent should not have been started yet
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
# #setFramework()
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
ok 17 should be strictly equal
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
ok 21 should be strictly equal
ok 22 should be strictly equal
ok 23 should be strictly equal
ok 24 should be strictly equal
ok 25 should be strictly equal
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
# #startTransaction()
# agent not yet started: startTransaction() should not crash
# name, type, subtype and action
ok 29 should be strictly equal
ok 30 should be strictly equal
ok 31 should be strictly equal
ok 32 should be strictly equal
# options.startTime
ok 33 duration should be circa more than 1s (was: 1000.605)
ok 34 duration should be less than 1.1s (was: 1000.605)
# options.childOf
ok 35 should be strictly equal
ok 36 should be strictly equal
ok 37 should not be strictly equal
ok 38 should be strictly equal
ok 39 should be strictly equal
# #endTransaction()
# no active transaction
# with no result
ok 40 should be strictly equal
ok 41 should be strictly equal
ok 42 should be strictly equal
# with explicit result
ok 43 should be strictly equal
ok 44 should be strictly equal
ok 45 should be strictly equal
# with custom endTime
ok 46 should be strictly equal
# #currentTransaction
# no active transaction
ok 47 should be falsy
# with active transaction
ok 48 should be strictly equal
# #currentSpan
# no active or binding span
ok 49 should be falsy
# with binding span
ok 50 should be strictly equal
# with active span
ok 51 should be strictly equal
# #currentTraceparent
# no active transaction or span
ok 52 should be falsy
# with active transaction
ok 53 should be strictly equal
# with active span
ok 54 should be strictly equal
# #currentTraceIds
# no active transaction or span
ok 55 should be loosely deeply equivalent
ok 56 should be strictly equal
# with active transaction
ok 57 should be loosely deeply equivalent
ok 58 should be strictly equal
# with active span
ok 59 should be loosely deeply equivalent
ok 60 should be strictly equal
# #setTransactionName
# no active transaction
ok 61 should not throw
# active transaction
ok 62 should be strictly equal
# #startSpan()
# no active transaction
ok 63 should be strictly equal
# active transaction
ok 64 should return a span
ok 65 should be strictly equal
ok 66 should be strictly equal
ok 67 should be strictly equal
ok 68 should be strictly equal
# options.startTime
ok 69 duration should be circa more than 1s (was: 1000.517)
ok 70 duration should be less than 1.1s (was: 1000.517)
# options.childOf
ok 71 should be strictly equal
ok 72 should be strictly equal
ok 73 should not be strictly equal
ok 74 should be strictly equal
ok 75 should be strictly equal
# #setUserContext()
# no active transaction
ok 76 should be strictly equal
# active transaction
ok 77 should be strictly equal
ok 78 should be deeply equivalent
# #setCustomContext()
# no active transaction
ok 79 should be strictly equal
# active transaction
ok 80 should be strictly equal
ok 81 should be deeply equivalent
# #setLabel()
# no active transaction
ok 82 should be strictly equal
# active transaction
ok 83 should be strictly equal
ok 84 should be deeply equivalent
# active transaction without label stringification
ok 85 should be strictly equal
ok 86 should be strictly equal
ok 87 should be strictly equal
ok 88 should be strictly equal
ok 89 should be strictly equal
ok 90 should be deeply equivalent
# #addLabels()
# no active transaction
ok 91 should be strictly equal
# active transaction
ok 92 should be strictly equal
ok 93 should be strictly equal
ok 94 should be deeply equivalent
# active transaction without label stringification
ok 95 should be strictly equal
ok 96 should be deeply equivalent
# filters
# setup mock APM server
# mock APM serverUrl: http://localhost:34097
# #addFilter() - error
{"log.level":"error","@timestamp":"2021-11-25T12:59:54.319Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Can't add filter of type string"}
{"log.level":"error","@timestamp":"2021-11-25T12:59:54.320Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Can't add filter of type string"}
{"log.level":"error","@timestamp":"2021-11-25T12:59:54.320Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Can't add filter of type string"}
ok 97 should be strictly equal
ok 98 should be strictly equal
ok 99 should be strictly equal
ok 100 should be strictly equal
ok 101 captureError should not fail
ok 102 got 2 events
ok 103 event 0 is metadata
ok 104 metadata: service.name
ok 105 metadata: service.runtime
ok 106 metadata: service.agent
ok 107 metadata: system
ok 108 metadata: system.hostname
ok 109 metadata: system.architecture
ok 110 metadata: system.platform
ok 111 metadata: system.container
ok 112 metadata: system.container.id is a string
ok 113 metadata: system.container.id
ok 114 metadata: process
ok 115 metadata: process.pid
ok 116 metadata: process.pid > 0
ok 117 metadata: has a process.title
ok 118 metadata: process.title matches
ok 119 metadata: has process.argv
ok 120 metadata: process.argv has at least two args
ok 121 event 1 is an error
ok 122 should be strictly equal
ok 123 should be strictly equal
# #addFilter() - transaction
{"log.level":"error","@timestamp":"2021-11-25T12:59:54.373Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Can't add filter of type string"}
{"log.level":"error","@timestamp":"2021-11-25T12:59:54.373Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Can't add filter of type string"}
{"log.level":"error","@timestamp":"2021-11-25T12:59:54.374Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Can't add filter of type string"}
ok 124 should be strictly equal
ok 125 should be strictly equal
ok 126 should be strictly equal
ok 127 should be strictly equal
ok 128 got 2 events
ok 129 event 0 is metadata
ok 130 metadata: service.name
ok 131 metadata: service.runtime
ok 132 metadata: service.agent
ok 133 metadata: system
ok 134 metadata: system.hostname
ok 135 metadata: system.architecture
ok 136 metadata: system.platform
ok 137 metadata: system.container
ok 138 metadata: system.container.id is a string
ok 139 metadata: system.container.id
ok 140 metadata: process
ok 141 metadata: process.pid
ok 142 metadata: process.pid > 0
ok 143 metadata: has a process.title
ok 144 metadata: process.title matches
ok 145 metadata: has process.argv
ok 146 metadata: process.argv has at least two args
ok 147 event 1 is a transaction
ok 148 should be strictly equal
ok 149 should be strictly equal
# #addFilter() - span
{"log.level":"error","@timestamp":"2021-11-25T12:59:54.395Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Can't add filter of type string"}
{"log.level":"error","@timestamp":"2021-11-25T12:59:54.396Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Can't add filter of type string"}
{"log.level":"error","@timestamp":"2021-11-25T12:59:54.396Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Can't add filter of type string"}
ok 150 should be strictly equal
ok 151 should be strictly equal
ok 152 should be strictly equal
ok 153 got 2 events
ok 154 event 0 is metadata
ok 155 metadata: service.name
ok 156 metadata: service.runtime
ok 157 metadata: service.agent
ok 158 metadata: system
ok 159 metadata: system.hostname
ok 160 metadata: system.architecture
ok 161 metadata: system.platform
ok 162 metadata: system.container
ok 163 metadata: system.container.id is a string
ok 164 metadata: system.container.id
ok 165 metadata: process
ok 166 metadata: process.pid
ok 167 metadata: process.pid > 0
ok 168 metadata: has a process.title
ok 169 metadata: process.title matches
ok 170 metadata: has process.argv
ok 171 metadata: process.argv has at least two args
ok 172 event 1 is a span
ok 173 should be strictly equal
ok 174 should be strictly equal
# #addErrorFilter()
{"log.level":"error","@timestamp":"2021-11-25T12:59:54.418Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Can't add filter of type string"}
ok 175 should be strictly equal
ok 176 should be strictly equal
ok 177 should be strictly equal
ok 178 should be strictly equal
ok 179 captureError should not fail
ok 180 got 2 events
ok 181 event 0 is metadata
ok 182 metadata: service.name
ok 183 metadata: service.runtime
ok 184 metadata: service.agent
ok 185 metadata: system
ok 186 metadata: system.hostname
ok 187 metadata: system.architecture
ok 188 metadata: system.platform
ok 189 metadata: system.container
ok 190 metadata: system.container.id is a string
ok 191 metadata: system.container.id
ok 192 metadata: process
ok 193 metadata: process.pid
ok 194 metadata: process.pid > 0
ok 195 metadata: has a process.title
ok 196 metadata: process.title matches
ok 197 metadata: has process.argv
ok 198 metadata: process.argv has at least two args
ok 199 event 1 is an error
ok 200 should be strictly equal
ok 201 should be strictly equal
# #addTransactionFilter()
{"log.level":"error","@timestamp":"2021-11-25T12:59:54.436Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Can't add filter of type string"}
ok 202 should be strictly equal
ok 203 should be strictly equal
ok 204 should be strictly equal
ok 205 should be strictly equal
ok 206 got 2 events
ok 207 event 0 is metadata
ok 208 metadata: service.name
ok 209 metadata: service.runtime
ok 210 metadata: service.agent
ok 211 metadata: system
ok 212 metadata: system.hostname
ok 213 metadata: system.architecture
ok 214 metadata: system.platform
ok 215 metadata: system.container
ok 216 metadata: system.container.id is a string
ok 217 metadata: system.container.id
ok 218 metadata: process
ok 219 metadata: process.pid
ok 220 metadata: process.pid > 0
ok 221 metadata: has a process.title
ok 222 metadata: process.title matches
ok 223 metadata: has process.argv
ok 224 metadata: process.argv has at least two args
ok 225 event 1 is a transaction
ok 226 should be strictly equal
ok 227 should be strictly equal
# #addSpanFilter()
{"log.level":"error","@timestamp":"2021-11-25T12:59:54.447Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Can't add filter of type string"}
ok 228 should be strictly equal
ok 229 should be strictly equal
ok 230 should be strictly equal
ok 231 got 2 events
ok 232 event 0 is metadata
ok 233 metadata: service.name
ok 234 metadata: service.runtime
ok 235 metadata: service.agent
ok 236 metadata: system
ok 237 metadata: system.hostname
ok 238 metadata: system.architecture
ok 239 metadata: system.platform
ok 240 metadata: system.container
ok 241 metadata: system.container.id is a string
ok 242 metadata: system.container.id
ok 243 metadata: process
ok 244 metadata: process.pid
ok 245 metadata: process.pid > 0
ok 246 metadata: has a process.title
ok 247 metadata: process.title matches
ok 248 metadata: has process.argv
ok 249 metadata: process.argv has at least two args
ok 250 event 1 is a span
ok 251 should be strictly equal
ok 252 should be strictly equal
# #addMetadataFilter()
ok 253 should be strictly equal
{"log.level":"error","@timestamp":"2021-11-25T12:59:54.465Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Can't add filter of type string"}
ok 254 should be strictly equal
ok 255 should be strictly equal
ok 256 should be strictly equal
ok 257 got 2 events
ok 258 event 0 is metadata
ok 259 metadata: service.name
ok 260 metadata: service.runtime
ok 261 metadata: service.agent
ok 262 metadata: system
ok 263 metadata: system.hostname
ok 264 metadata: system.architecture
ok 265 metadata: system.platform
ok 266 metadata: system.container
ok 267 metadata: system.container.id is a string
ok 268 metadata: system.container.id
ok 269 metadata: process
ok 270 metadata: process.pid
ok 271 metadata: process.pid > 0
ok 272 metadata: has a process.title
ok 273 metadata: process.title matches
ok 274 metadata: has process.argv
ok 275 metadata: process.argv has at least two args
ok 276 should be strictly equal
ok 277 should be strictly equal
# #addFilter() - abort with 'undefined'
ok 278 called first filter
ok 279 APM server did not receive a request
# #addErrorFilter() - abort with 'undefined'
ok 280 called first filter
ok 281 APM server did not receive a request
# #addTransactionFilter() - abort with 'undefined'
ok 282 called first filter
ok 283 APM server did not receive a request
# #addSpanFilter() - abort with 'undefined'
ok 284 called first filter
ok 285 APM server did not receive a request
# #addFilter() - abort with 'null'
ok 286 called first filter
ok 287 APM server did not receive a request
# #addErrorFilter() - abort with 'null'
ok 288 called first filter
ok 289 APM server did not receive a request
# #addTransactionFilter() - abort with 'null'
ok 290 called first filter
ok 291 APM server did not receive a request
# #addSpanFilter() - abort with 'null'
ok 292 called first filter
ok 293 APM server did not receive a request
# #addFilter() - abort with 'false'
ok 294 called first filter
ok 295 APM server did not receive a request
# #addErrorFilter() - abort with 'false'
ok 296 called first filter
ok 297 APM server did not receive a request
# #addTransactionFilter() - abort with 'false'
ok 298 called first filter
ok 299 APM server did not receive a request
# #addSpanFilter() - abort with 'false'
ok 300 called first filter
ok 301 APM server did not receive a request
# #addFilter() - abort with '0'
ok 302 called first filter
ok 303 APM server did not receive a request
# #addErrorFilter() - abort with '0'
ok 304 called first filter
ok 305 APM server did not receive a request
# #addTransactionFilter() - abort with '0'
ok 306 called first filter
ok 307 APM server did not receive a request
# #addSpanFilter() - abort with '0'
ok 308 called first filter
ok 309 APM server did not receive a request
# #addFilter() - abort with ''
ok 310 called first filter
ok 311 APM server did not receive a request
# #addErrorFilter() - abort with ''
ok 312 called first filter
ok 313 APM server did not receive a request
# #addTransactionFilter() - abort with ''
ok 314 called first filter
ok 315 APM server did not receive a request
# #addSpanFilter() - abort with ''
ok 316 called first filter
ok 317 APM server did not receive a request
# #addFilter() - abort with 'NaN'
ok 318 called first filter
ok 319 APM server did not receive a request
# #addErrorFilter() - abort with 'NaN'
ok 320 called first filter
ok 321 APM server did not receive a request
# #addTransactionFilter() - abort with 'NaN'
ok 322 called first filter
ok 323 APM server did not receive a request
# #addSpanFilter() - abort with 'NaN'
ok 324 called first filter
ok 325 APM server did not receive a request
# teardown mock APM server
# #flush()
# flush, start not called
{"log.level":"warn","@timestamp":"2021-11-25T12:59:54.607Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"error":{"type":"Error","message":"cannot flush agent before it is started","stack_trace":"Error: cannot flush agent before it is started\n    at Agent.flush (/app/lib/agent.js:151:37)\n    at Test.<anonymous> (/app/test/agent.test.js:910:11)\n    at Test.bound [as _cb] (/app/node_modules/tape/lib/test.js:96:32)\n    at Test.run (/app/node_modules/tape/lib/test.js:114:31)\n    at Test.bound [as run] (/app/node_modules/tape/lib/test.js:96:32)\n    at Test._end (/app/node_modules/tape/lib/test.js:217:11)\n    at Test.bound [as _end] (/app/node_modules/tape/lib/test.js:96:32)\n    at Test.end (/app/node_modules/tape/lib/test.js:196:10)\n    at Test.bound [as end] (/app/node_modules/tape/lib/test.js:96:32)\n    at Test.<anonymous> (/app/test/agent.test.js:1125:5)"},"message":"cannot flush agent before it is started"}
ok 326 no error passed to agent.flush callback
ok 327 should call flush callback even if agent.start() wasn't called
# flush, start called, but agent inactive
{"log.level":"warn","@timestamp":"2021-11-25T12:59:54.609Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"error":{"type":"Error","message":"cannot flush agent before it is started","stack_trace":"Error: cannot flush agent before it is started\n    at Agent.flush (/app/lib/agent.js:151:37)\n    at Test.<anonymous> (/app/test/agent.test.js:921:11)\n    at Test.bound [as _cb] (/app/node_modules/tape/lib/test.js:96:32)\n    at Test.run (/app/node_modules/tape/lib/test.js:114:31)\n    at Test.bound [as run] (/app/node_modules/tape/lib/test.js:96:32)\n    at Test._end (/app/node_modules/tape/lib/test.js:217:11)\n    at Test.bound [as _end] (/app/node_modules/tape/lib/test.js:96:32)\n    at Test.<anonymous> (/app/node_modules/tape/lib/test.js:216:40)\n    at Test.emit (node:events:365:28)\n    at Test.bound [as emit] (/app/node_modules/tape/lib/test.js:96:32)"},"message":"cannot flush agent before it is started"}
ok 328 no error passed to agent.flush callback
ok 329 should call flush callback even if agent is inactive
# flush, agent started, but no data in the queue
ok 330 no error passed to agent.flush callback
ok 331 should call flush callback even if there's nothing to flush
# flush with transaction in the queue
ok 332 no error passed to agent.flush callback
ok 333 apmServer got 2 events
ok 334 event 1 is a transaction
ok 335 the transaction has the expected name
# flush with inflight spans
ok 336 no error passed to agent.flush callback
ok 337 apmServer got 12 events
ok 338 event[1] is transaction t0
ok 339 event[2] is span s
ok 340 event[3] is span s
ok 341 event[4] is span s
ok 342 event[5] is span s
ok 343 event[6] is span s
ok 344 event[7] is span s
ok 345 event[8] is span s
ok 346 event[9] is span s
ok 347 event[10] is span s
ok 348 event[11] is span s
# flush with inflight error
ok 349 no error passed to agent.flush callback
ok 350 apmServer got 3 events
ok 351 event[1] is transaction t0
ok 352 event[2] is error "boom"
# second flush while flushing inflight spans
ok 353 no error passed to second agent.flush callback
ok 354 apmServer has 3 events
ok 355 event[0] is metadata
ok 356 event[1] is transaction t0
ok 357 event[2] is span s2
ok 358 no error passed to first agent.flush callback
ok 359 apmServer has 5 events
ok 360 event[0] is metadata
ok 361 event[1] is transaction t0
ok 362 event[2] is span s2
ok 363 event[3] is metadata
ok 364 event[4] is span s1
# flush timeout from slow inflight span
ok 365 no error passed to agent.flush callback
ok 366 apmServer got 3 events
ok 367 event[0] is metadata
ok 368 event[1] is transaction t0
ok 369 event[2] is span s2
# #captureError()
# setup mock APM server
# mock APM serverUrl: http://localhost:39519
# with callback
ok 370 no error from captureError callback
ok 371 has valid error.id
ok 372 APM server got 2 events
ok 373 metadata: service.name
ok 374 metadata: service.runtime
ok 375 metadata: service.agent
ok 376 metadata: system
ok 377 metadata: system.hostname
ok 378 metadata: system.architecture
ok 379 metadata: system.platform
ok 380 metadata: system.container
ok 381 metadata: system.container.id is a string
ok 382 metadata: system.container.id
ok 383 metadata: process
ok 384 metadata: process.pid
ok 385 metadata: process.pid > 0
ok 386 metadata: has a process.title
ok 387 metadata: process.title matches
ok 388 metadata: has process.argv
ok 389 metadata: process.argv has at least two args
ok 390 should be strictly equal
# without callback
ok 391 APM server got 2 events
ok 392 metadata: service.name
ok 393 metadata: service.runtime
ok 394 metadata: service.agent
ok 395 metadata: system
ok 396 metadata: system.hostname
ok 397 metadata: system.architecture
ok 398 metadata: system.platform
ok 399 metadata: system.container
ok 400 metadata: system.container.id is a string
ok 401 metadata: system.container.id
ok 402 metadata: process
ok 403 metadata: process.pid
ok 404 metadata: process.pid > 0
ok 405 metadata: has a process.title
ok 406 metadata: process.title matches
ok 407 metadata: has process.argv
ok 408 metadata: process.argv has at least two args
ok 409 should be strictly equal
# generate error id
ok 410 APM server got 2 events
ok 411 has valid error.id
# should send a plain text message to the server
ok 412 APM server got 2 events
ok 413 should be strictly equal
# should use `param_message` as well as `message` if given an object as 1st argument
ok 414 APM server got 2 events
ok 415 should be strictly equal
ok 416 should be strictly equal
# should not fail on a non string err.message
ok 417 APM server got 2 events
ok 418 should be strictly equal
# should allow custom log message together with exception
ok 419 APM server got 2 events
ok 420 should be strictly equal
ok 421 should be strictly equal
# should adhere to default stackTraceLimit
ok 422 APM server got 2 events
ok 423 should be strictly equal
ok 424 should be strictly equal
# should adhere to custom stackTraceLimit
ok 425 APM server got 2 events
ok 426 should be strictly equal
ok 427 should be strictly equal
# should merge context
ok 428 should be strictly equal
ok 429 should be strictly equal
ok 430 APM server got 2 events
ok 431 should be deeply equivalent
ok 432 should be deeply equivalent
# capture location stack trace - off (error)
ok 433 APM server got 2 events
ok 434 should be strictly equal
ok 435 should not have a log
ok 436 should have a stack trace
ok 437 stack trace should be an array
ok 438 stack trace should have at least one frame
ok 439 should be strictly equal
# capture location stack trace - off (string)
ok 440 APM server got 2 events
ok 441 should be strictly equal
ok 442 should not have a log.stacktrace
ok 443 should not have an exception
# capture location stack trace - off (param msg)
ok 444 APM server got 2 events
ok 445 should be strictly equal
ok 446 should not have a log.stacktrace
ok 447 should not have an exception
# capture location stack trace - non-errors (error)
ok 448 APM server got 2 events
ok 449 should be strictly equal
ok 450 should not have a log
ok 451 should have a stack trace
ok 452 stack trace should be an array
ok 453 stack trace should have at least one frame
ok 454 should be strictly equal
# capture location stack trace - non-errors (string)
ok 455 APM server got 2 events
ok 456 should be strictly equal
ok 457 should not have an exception
ok 458 should have a stack trace
ok 459 stack trace should be an array
ok 460 stack trace should have at least one frame
ok 461 should be strictly equal
# capture location stack trace - non-errors (param msg)
ok 462 APM server got 2 events
ok 463 should be strictly equal
ok 464 should not have an exception
ok 465 should have a stack trace
ok 466 stack trace should be an array
ok 467 stack trace should have at least one frame
ok 468 should be strictly equal
# capture location stack trace - all (error)
ok 469 APM server got 2 events
ok 470 should be strictly equal
ok 471 should be strictly equal
ok 472 should have a stack trace
ok 473 stack trace should be an array
ok 474 stack trace should have at least one frame
ok 475 should be strictly equal
ok 476 should have a stack trace
ok 477 stack trace should be an array
ok 478 stack trace should have at least one frame
ok 479 should be strictly equal
# capture location stack trace - all (string)
ok 480 APM server got 2 events
ok 481 should be strictly equal
ok 482 should not have an exception
ok 483 should have a stack trace
ok 484 stack trace should be an array
ok 485 stack trace should have at least one frame
ok 486 should be strictly equal
# capture location stack trace - all (param msg)
ok 487 APM server got 2 events
ok 488 should be strictly equal
ok 489 should not have an exception
ok 490 should have a stack trace
ok 491 stack trace should be an array
ok 492 stack trace should have at least one frame
ok 493 should be strictly equal
# capture error before agent is started - with callback
ok 494 should be strictly equal
# capture error before agent is started - without callback
# include valid context ids and sampled flag
ok 495 APM server got 2 events
ok 496 metadata: service.name
ok 497 metadata: service.runtime
ok 498 metadata: service.agent
ok 499 metadata: system
ok 500 metadata: system.hostname
ok 501 metadata: system.architecture
ok 502 metadata: system.platform
ok 503 metadata: system.container
ok 504 metadata: system.container.id is a string
ok 505 metadata: system.container.id
ok 506 metadata: process
ok 507 metadata: process.pid
ok 508 metadata: process.pid > 0
ok 509 metadata: has a process.title
ok 510 metadata: process.title matches
ok 511 metadata: has process.argv
ok 512 metadata: process.argv has at least two args
ok 513 should be strictly equal
ok 514 id is 32 characters
ok 515 parent_id matches span id
ok 516 trace_id matches transaction trace id
ok 517 transaction_id matches transaction id
ok 518 transaction.type matches transaction type
ok 519 is sampled
# custom timestamp
ok 520 APM server got 2 events
ok 521 metadata: service.name
ok 522 metadata: service.runtime
ok 523 metadata: service.agent
ok 524 metadata: system
ok 525 metadata: system.hostname
ok 526 metadata: system.architecture
ok 527 metadata: system.platform
ok 528 metadata: system.container
ok 529 metadata: system.container.id is a string
ok 530 metadata: system.container.id
ok 531 metadata: process
ok 532 metadata: process.pid
ok 533 metadata: process.pid > 0
ok 534 metadata: has a process.title
ok 535 metadata: process.title matches
ok 536 metadata: has process.argv
ok 537 metadata: process.argv has at least two args
ok 538 should be strictly equal
# options.request
ok 539 APM server got 2 events
ok 540 metadata: service.name
ok 541 metadata: service.runtime
ok 542 metadata: service.agent
ok 543 metadata: system
ok 544 metadata: system.hostname
ok 545 metadata: system.architecture
ok 546 metadata: system.platform
ok 547 metadata: system.container
ok 548 metadata: system.container.id is a string
ok 549 metadata: system.container.id
ok 550 metadata: process
ok 551 metadata: process.pid
ok 552 metadata: process.pid > 0
ok 553 metadata: has a process.title
ok 554 metadata: process.title matches
ok 555 metadata: has process.argv
ok 556 metadata: process.argv has at least two args
ok 557 should be strictly equal
ok 558 should be deeply equivalent
# options.request + captureBody=errors
ok 559 APM server got 2 events
ok 560 metadata: service.name
ok 561 metadata: service.runtime
ok 562 metadata: service.agent
ok 563 metadata: system
ok 564 metadata: system.hostname
ok 565 metadata: system.architecture
ok 566 metadata: system.platform
ok 567 metadata: system.container
ok 568 metadata: system.container.id is a string
ok 569 metadata: system.container.id
ok 570 metadata: process
ok 571 metadata: process.pid
ok 572 metadata: process.pid > 0
ok 573 metadata: has a process.title
ok 574 metadata: process.title matches
ok 575 metadata: has process.argv
ok 576 metadata: process.argv has at least two args
ok 577 should be strictly equal
ok 578 should be deeply equivalent
# options.response
ok 579 APM server got 2 events
ok 580 metadata: service.name
ok 581 metadata: service.runtime
ok 582 metadata: service.agent
ok 583 metadata: system
ok 584 metadata: system.hostname
ok 585 metadata: system.architecture
ok 586 metadata: system.platform
ok 587 metadata: system.container
ok 588 metadata: system.container.id is a string
ok 589 metadata: system.container.id
ok 590 metadata: process
ok 591 metadata: process.pid
ok 592 metadata: process.pid > 0
ok 593 metadata: has a process.title
ok 594 metadata: process.title matches
ok 595 metadata: has process.argv
ok 596 metadata: process.argv has at least two args
ok 597 should be strictly equal
ok 598 should be deeply equivalent
# teardown mock APM server
# #handleUncaughtExceptions()
# should add itself to the uncaughtException event list
ok 599 should be strictly equal
ok 600 should be strictly equal
ok 601 should be strictly equal
# should not add more than one listener for the uncaughtException event
ok 602 should be strictly equal
# should send an uncaughtException to server
ok 603 apmServer got 2 events
ok 604 metadata: service.name
ok 605 metadata: service.runtime
ok 606 metadata: service.agent
ok 607 metadata: system
ok 608 metadata: system.hostname
ok 609 metadata: system.architecture
ok 610 metadata: system.platform
ok 611 metadata: system.container
ok 612 metadata: system.container.id is a string
ok 613 metadata: system.container.id
ok 614 metadata: process
ok 615 metadata: process.pid
ok 616 metadata: process.pid > 0
ok 617 metadata: has a process.title
ok 618 metadata: process.title matches
ok 619 metadata: has process.argv
ok 620 metadata: process.argv has at least two args
ok 621 should be strictly equal
ok 622 the registered uncaughtException handler was called
ok 623 should be strictly equal
# #active: false
# should not error when started in an inactive state
ok 624 should be truthy
ok 625 should not throw
# patches
# #clearPatches(name)
ok 626 should be truthy
ok 627 should not throw
ok 628 should be falsy
ok 629 should not throw
# #addPatch(name, moduleName)
ok 630 should be deeply equivalent
# #addPatch(name, function) - does not exist
ok 631 should be truthy
ok 632 should be truthy
ok 633 should be truthy
ok 634 should be truthy
ok 635 should be deeply equivalent
# #removePatch(name, handler)
ok 636 should be falsy
ok 637 should be truthy
ok 638 should be falsy
ok 639 should be truthy
ok 640 should be falsy
# #removePatch(name, oops) does not remove patches
ok 641 should be falsy
ok 642 module patches are as expected
ok 643 still have 2 patches after removePatch(name)
ok 644 still have 2 patches after removePatch(name, oops)
ok 645 still have 2 patches after removePatch(name, function oops () {})
# #registerMetric(name, labels, callback)
ok 646 should be strictly equal
ok 647 should be strictly equal
ok 648 should be strictly equal
ok 649 should be strictly equal
ok 650 should be strictly equal
ok 651 should be strictly equal
ok 652 should be strictly equal
ok 653 should be strictly equal
ok 654 should be strictly equal
ok 655 should be strictly equal

1..655
# tests 655
# pass  655

# ok

running (cwd: ./): node --unhandled-rejections=strict test/central-config-disabled.test.js
TAP version 13
# central config disabled
ok 1 should not poll APM Server for config

1..1
# tests 1
# pass  1

# ok

running (cwd: ./): node --unhandled-rejections=strict test/central-config-enabled.test.js
TAP version 13
# remote config enabled
ok 1 mock apm-server got central config request
ok 2 agent conf for key transactionSampleRate was updated to expected value
ok 3 agent conf for key transactionMaxSpans was updated to expected value
ok 4 agent conf for key captureBody was updated to expected value
ok 5 agent conf for key transactionIgnoreUrls was updated to expected value
ok 6 agent conf for key logLevel was updated to expected value
# remote config enabled: receives comma delimited
ok 7 mock apm-server got central config request
ok 8 agent conf for key transactionSampleRate was updated to expected value
ok 9 agent conf for key transactionMaxSpans was updated to expected value
ok 10 agent conf for key captureBody was updated to expected value
ok 11 agent conf for key transactionIgnoreUrls was updated to expected value
# remote config enabled: receives non delimited string
ok 12 mock apm-server got central config request
ok 13 agent conf for key transactionSampleRate was updated to expected value
ok 14 agent conf for key transactionMaxSpans was updated to expected value
ok 15 agent conf for key captureBody was updated to expected value
ok 16 agent conf for key transactionIgnoreUrls was updated to expected value
# central transaction_sample_rate precision: "0"
ok 17 mock apm-server got central config request
ok 18 agent conf for key transactionSampleRate was updated to expected value
# central transaction_sample_rate precision: "0.0001"
ok 19 mock apm-server got central config request
ok 20 agent conf for key transactionSampleRate was updated to expected value
# central transaction_sample_rate precision: "0.00002"
ok 21 mock apm-server got central config request
ok 22 agent conf for key transactionSampleRate was updated to expected value
# central transaction_sample_rate precision: "0.300000002"
ok 23 mock apm-server got central config request
ok 24 agent conf for key transactionSampleRate was updated to expected value
# central transaction_sample_rate precision: "0.444444"
ok 25 mock apm-server got central config request
ok 26 agent conf for key transactionSampleRate was updated to expected value
# central transaction_sample_rate precision: "0.555555"
ok 27 mock apm-server got central config request
ok 28 agent conf for key transactionSampleRate was updated to expected value
# central transaction_sample_rate precision: "1"
ok 29 mock apm-server got central config request
ok 30 agent conf for key transactionSampleRate was updated to expected value
# agent.logger updates for central config `log_level` change
ok 31 immediately after .start() logger level should be the given "warn" level
ok 32 mock apm-server got central config request
ok 33 shortly after fetching central config, agent.logger level should be updated
# central config change does not erroneously update cloudProvider
ok 34 immediately after .start(), cloudProvider=aws
ok 35 mock apm-server got central config request
ok 36 after fetching central config, cloudProvider is not reset to default

1..36
# tests 36
# pass  36

# ok

running (cwd: ./): node --unhandled-rejections=strict test/config.test.js
TAP version 13
# should be configurable by environment variable ELASTIC_APM_ABORTED_ERROR_THRESHOLD
ok 1 should be strictly equal
# should overwrite option property abortedErrorThreshold by ELASTIC_APM_ABORTED_ERROR_THRESHOLD
ok 2 should be strictly equal
# should default abortedErrorThreshold to 25
ok 3 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_ACTIVE
ok 4 should be strictly equal
# should overwrite option property active by ELASTIC_APM_ACTIVE
ok 5 should be strictly equal
# should default active to true
ok 6 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_API_KEY
ok 7 should be strictly equal
# should overwrite option property apiKey by ELASTIC_APM_API_KEY
ok 8 should be strictly equal
# should default apiKey to undefined
ok 9 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_API_REQUEST_SIZE
ok 10 should be strictly equal
# should overwrite option property apiRequestSize by ELASTIC_APM_API_REQUEST_SIZE
ok 11 should be strictly equal
# should default apiRequestSize to 786432
ok 12 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_API_REQUEST_TIME
ok 13 should be strictly equal
# should overwrite option property apiRequestTime by ELASTIC_APM_API_REQUEST_TIME
ok 14 should be strictly equal
# should default apiRequestTime to 10
ok 15 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_ASYNC_HOOKS
ok 16 should be strictly equal
# should overwrite option property asyncHooks by ELASTIC_APM_ASYNC_HOOKS
ok 17 should be strictly equal
# should default asyncHooks to true
ok 18 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_CAPTURE_BODY
ok 19 should be strictly equal
# should overwrite option property captureBody by ELASTIC_APM_CAPTURE_BODY
ok 20 should be strictly equal
# should default captureBody to off
ok 21 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_CAPTURE_ERROR_LOG_STACK_TRACES
ok 22 should be strictly equal
# should overwrite option property captureErrorLogStackTraces by ELASTIC_APM_CAPTURE_ERROR_LOG_STACK_TRACES
ok 23 should be strictly equal
# should default captureErrorLogStackTraces to messages
ok 24 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_CAPTURE_EXCEPTIONS
ok 25 should be strictly equal
# should overwrite option property captureExceptions by ELASTIC_APM_CAPTURE_EXCEPTIONS
ok 26 should be strictly equal
# should default captureExceptions to true
ok 27 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_CAPTURE_SPAN_STACK_TRACES
ok 28 should be strictly equal
# should overwrite option property captureSpanStackTraces by ELASTIC_APM_CAPTURE_SPAN_STACK_TRACES
ok 29 should be strictly equal
# should default captureSpanStackTraces to true
ok 30 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_CENTRAL_CONFIG
ok 31 should be strictly equal
# should overwrite option property centralConfig by ELASTIC_APM_CENTRAL_CONFIG
ok 32 should be strictly equal
# should default centralConfig to true
ok 33 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_CONTAINER_ID
ok 34 should be strictly equal
# should overwrite option property containerId by ELASTIC_APM_CONTAINER_ID
ok 35 should be strictly equal
# should default containerId to undefined
ok 36 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_CONTEXT_PROPAGATION_ONLY
ok 37 should be strictly equal
# should overwrite option property contextPropagationOnly by ELASTIC_APM_CONTEXT_PROPAGATION_ONLY
ok 38 should be strictly equal
# should default contextPropagationOnly to false
ok 39 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_DISABLE_SEND
ok 40 should be strictly equal
# should overwrite option property disableSend by ELASTIC_APM_DISABLE_SEND
ok 41 should be strictly equal
# should default disableSend to false
ok 42 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_DISABLE_INSTRUMENTATIONS
ok 43 should be deeply equivalent
# should overwrite option property disableInstrumentations by ELASTIC_APM_DISABLE_INSTRUMENTATIONS
ok 44 should be deeply equivalent
# should default disableInstrumentations to
ok 45 should be deeply equivalent
# should be configurable by environment variable ELASTIC_APM_ENVIRONMENT
ok 46 should be strictly equal
# should overwrite option property environment by ELASTIC_APM_ENVIRONMENT
ok 47 should be strictly equal
# should default environment to development
ok 48 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_ERROR_MESSAGE_MAX_LENGTH
ok 49 should be strictly equal
# should overwrite option property errorMessageMaxLength by ELASTIC_APM_ERROR_MESSAGE_MAX_LENGTH
ok 50 should be strictly equal
# should default errorMessageMaxLength to undefined
ok 51 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_ERROR_ON_ABORTED_REQUESTS
ok 52 should be strictly equal
# should overwrite option property errorOnAbortedRequests by ELASTIC_APM_ERROR_ON_ABORTED_REQUESTS
ok 53 should be strictly equal
# should default errorOnAbortedRequests to false
ok 54 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_FILTER_HTTP_HEADERS
ok 55 should be strictly equal
# should overwrite option property filterHttpHeaders by ELASTIC_APM_FILTER_HTTP_HEADERS
ok 56 should be strictly equal
# should default filterHttpHeaders to true
ok 57 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_FRAMEWORK_NAME
ok 58 should be strictly equal
# should overwrite option property frameworkName by ELASTIC_APM_FRAMEWORK_NAME
ok 59 should be strictly equal
# should default frameworkName to undefined
ok 60 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_FRAMEWORK_VERSION
ok 61 should be strictly equal
# should overwrite option property frameworkVersion by ELASTIC_APM_FRAMEWORK_VERSION
ok 62 should be strictly equal
# should default frameworkVersion to undefined
ok 63 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_HOSTNAME
ok 64 should be strictly equal
# should overwrite option property hostname by ELASTIC_APM_HOSTNAME
ok 65 should be strictly equal
# should default hostname to undefined
ok 66 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_INSTRUMENT
ok 67 should be strictly equal
# should overwrite option property instrument by ELASTIC_APM_INSTRUMENT
ok 68 should be strictly equal
# should default instrument to true
ok 69 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_INSTRUMENT_INCOMING_HTTP_REQUESTS
ok 70 should be strictly equal
# should overwrite option property instrumentIncomingHTTPRequests by ELASTIC_APM_INSTRUMENT_INCOMING_HTTP_REQUESTS
ok 71 should be strictly equal
# should default instrumentIncomingHTTPRequests to true
ok 72 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_KUBERNETES_NAMESPACE
ok 73 should be strictly equal
# should overwrite option property kubernetesNamespace by ELASTIC_APM_KUBERNETES_NAMESPACE
ok 74 should be strictly equal
# should default kubernetesNamespace to undefined
ok 75 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_KUBERNETES_NODE_NAME
ok 76 should be strictly equal
# should overwrite option property kubernetesNodeName by ELASTIC_APM_KUBERNETES_NODE_NAME
ok 77 should be strictly equal
# should default kubernetesNodeName to undefined
ok 78 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_KUBERNETES_POD_NAME
ok 79 should be strictly equal
# should overwrite option property kubernetesPodName by ELASTIC_APM_KUBERNETES_POD_NAME
ok 80 should be strictly equal
# should default kubernetesPodName to undefined
ok 81 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_KUBERNETES_POD_UID
ok 82 should be strictly equal
# should overwrite option property kubernetesPodUID by ELASTIC_APM_KUBERNETES_POD_UID
ok 83 should be strictly equal
# should default kubernetesPodUID to undefined
ok 84 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_LOG_LEVEL
{"log.level":"warn","@timestamp":"2021-11-25T13:00:04.220Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"unknown log levelName \"custom-value\": cannot setLogLevel"}
ok 85 should be strictly equal
# should overwrite option property logLevel by ELASTIC_APM_LOG_LEVEL
{"log.level":"warn","@timestamp":"2021-11-25T13:00:04.222Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"unknown log levelName \"custom-value\": cannot setLogLevel"}
ok 86 should be strictly equal
# should default logLevel to info
ok 87 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_LOG_UNCAUGHT_EXCEPTIONS
ok 88 should be strictly equal
# should overwrite option property logUncaughtExceptions by ELASTIC_APM_LOG_UNCAUGHT_EXCEPTIONS
ok 89 should be strictly equal
# should default logUncaughtExceptions to false
ok 90 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_LONG_FIELD_MAX_LENGTH
ok 91 should be strictly equal
# should overwrite option property longFieldMaxLength by ELASTIC_APM_LONG_FIELD_MAX_LENGTH
ok 92 should be strictly equal
# should default longFieldMaxLength to 10000
ok 93 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_MAX_QUEUE_SIZE
ok 94 should be strictly equal
# should overwrite option property maxQueueSize by ELASTIC_APM_MAX_QUEUE_SIZE
ok 95 should be strictly equal
# should default maxQueueSize to 1024
ok 96 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_METRICS_INTERVAL
ok 97 should be strictly equal
# should overwrite option property metricsInterval by ELASTIC_APM_METRICS_INTERVAL
ok 98 should be strictly equal
# should default metricsInterval to 30
ok 99 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_METRICS_LIMIT
ok 100 should be strictly equal
# should overwrite option property metricsLimit by ELASTIC_APM_METRICS_LIMIT
ok 101 should be strictly equal
# should default metricsLimit to 1000
ok 102 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_SECRET_TOKEN
ok 103 should be strictly equal
# should overwrite option property secretToken by ELASTIC_APM_SECRET_TOKEN
ok 104 should be strictly equal
# should default secretToken to undefined
ok 105 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_SERVER_CA_CERT_FILE
ok 106 should be strictly equal
# should overwrite option property serverCaCertFile by ELASTIC_APM_SERVER_CA_CERT_FILE
ok 107 should be strictly equal
# should default serverCaCertFile to undefined
ok 108 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_SERVER_TIMEOUT
ok 109 should be strictly equal
# should overwrite option property serverTimeout by ELASTIC_APM_SERVER_TIMEOUT
ok 110 should be strictly equal
# should default serverTimeout to 30
ok 111 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_SERVER_URL
ok 112 should be strictly equal
# should overwrite option property serverUrl by ELASTIC_APM_SERVER_URL
ok 113 should be strictly equal
# should default serverUrl to undefined
ok 114 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_SERVICE_NAME
ok 115 should be strictly equal
# should overwrite option property serviceName by ELASTIC_APM_SERVICE_NAME
ok 116 should be strictly equal
# should default serviceName to elastic-apm-node
ok 117 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_SERVICE_NODE_NAME
ok 118 should be strictly equal
# should overwrite option property serviceNodeName by ELASTIC_APM_SERVICE_NODE_NAME
ok 119 should be strictly equal
# should default serviceNodeName to undefined
ok 120 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_SERVICE_VERSION
ok 121 should be strictly equal
# should overwrite option property serviceVersion by ELASTIC_APM_SERVICE_VERSION
ok 122 should be strictly equal
# should default serviceVersion to 3.25.0
ok 123 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_SOURCE_LINES_ERROR_APP_FRAMES
ok 124 should be strictly equal
# should overwrite option property sourceLinesErrorAppFrames by ELASTIC_APM_SOURCE_LINES_ERROR_APP_FRAMES
ok 125 should be strictly equal
# should default sourceLinesErrorAppFrames to 5
ok 126 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_SOURCE_LINES_ERROR_LIBRARY_FRAMES
ok 127 should be strictly equal
# should overwrite option property sourceLinesErrorLibraryFrames by ELASTIC_APM_SOURCE_LINES_ERROR_LIBRARY_FRAMES
ok 128 should be strictly equal
# should default sourceLinesErrorLibraryFrames to 5
ok 129 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_SOURCE_LINES_SPAN_APP_FRAMES
ok 130 should be strictly equal
# should overwrite option property sourceLinesSpanAppFrames by ELASTIC_APM_SOURCE_LINES_SPAN_APP_FRAMES
ok 131 should be strictly equal
# should default sourceLinesSpanAppFrames to 0
ok 132 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_SOURCE_LINES_SPAN_LIBRARY_FRAMES
ok 133 should be strictly equal
# should overwrite option property sourceLinesSpanLibraryFrames by ELASTIC_APM_SOURCE_LINES_SPAN_LIBRARY_FRAMES
ok 134 should be strictly equal
# should default sourceLinesSpanLibraryFrames to 0
ok 135 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_STACK_TRACE_LIMIT
ok 136 should be strictly equal
# should overwrite option property stackTraceLimit by ELASTIC_APM_STACK_TRACE_LIMIT
ok 137 should be strictly equal
# should default stackTraceLimit to 50
ok 138 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_TRANSACTION_MAX_SPANS
ok 139 should be strictly equal
# should overwrite option property transactionMaxSpans by ELASTIC_APM_TRANSACTION_MAX_SPANS
ok 140 should be strictly equal
# should default transactionMaxSpans to 500
ok 141 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_TRANSACTION_SAMPLE_RATE
ok 142 should be strictly equal
# should overwrite option property transactionSampleRate by ELASTIC_APM_TRANSACTION_SAMPLE_RATE
ok 143 should be strictly equal
# should default transactionSampleRate to 1
ok 144 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_USE_PATH_AS_TRANSACTION_NAME
ok 145 should be strictly equal
# should overwrite option property usePathAsTransactionName by ELASTIC_APM_USE_PATH_AS_TRANSACTION_NAME
ok 146 should be strictly equal
# should default usePathAsTransactionName to false
ok 147 should be strictly equal
# should be configurable by environment variable ELASTIC_APM_VERIFY_SERVER_CERT
ok 148 should be strictly equal
# should overwrite option property verifyServerCert by ELASTIC_APM_VERIFY_SERVER_CERT
ok 149 should be strictly equal
# should default verifyServerCert to true
ok 150 should be strictly equal
# should be disabled by environment variable ELASTIC_APM_ACTIVE set to: false
ok 151 should be strictly equal
# should be disabled by environment variable ELASTIC_APM_ACTIVE set to: 'false'
ok 152 should be strictly equal
# should be enabled by environment variable ELASTIC_APM_ACTIVE set to: true
ok 153 should be strictly equal
# should be enabled by environment variable ELASTIC_APM_ACTIVE set to: 'true'
ok 154 should be strictly equal
# should log invalid booleans
ok 155 should be strictly equal
ok 156 should be strictly equal
ok 157 should be strictly equal
# transactionMaxSpans should be Infinity if set to -1
ok 158 should be strictly equal
# apiRequestSize should be converted to a number
ok 159 should be strictly equal
# errorMessageMaxLength should be converted to a number
ok 160 should be strictly equal
# abortedErrorThreshold should guard against a negative time
ok 161 fell back to default value
ok 162 got a log.warn
ok 163 warning message includes the invalid value
ok 164 warning message includes the invalid key
# abortedErrorThreshold should guard against a bogus non-time
ok 165 fell back to default value
ok 166 got a log.warn
ok 167 warning message includes the invalid value
ok 168 warning message includes the invalid key
# apiRequestTime should guard against a negative time
ok 169 fell back to default value
ok 170 got a log.warn
ok 171 warning message includes the invalid value
ok 172 warning message includes the invalid key
# apiRequestTime should guard against a bogus non-time
ok 173 fell back to default value
ok 174 got a log.warn
ok 175 warning message includes the invalid value
ok 176 warning message includes the invalid key
# metricsInterval should guard against a negative time
ok 177 fell back to default value
ok 178 got a log.warn
ok 179 warning message includes the invalid value
ok 180 warning message includes the invalid key
# metricsInterval should guard against a bogus non-time
ok 181 fell back to default value
ok 182 got a log.warn
ok 183 warning message includes the invalid value
ok 184 warning message includes the invalid key
# serverTimeout should guard against a negative time
ok 185 fell back to default value
ok 186 got a log.warn
ok 187 warning message includes the invalid value
ok 188 warning message includes the invalid key
# serverTimeout should guard against a bogus non-time
ok 189 fell back to default value
ok 190 got a log.warn
ok 191 warning message includes the invalid value
ok 192 warning message includes the invalid key
# abortedErrorThreshold should convert minutes to seconds
ok 193 should be strictly equal
# abortedErrorThreshold should convert milliseconds to seconds
ok 194 should be strictly equal
# abortedErrorThreshold should parse seconds
ok 195 should be strictly equal
# abortedErrorThreshold should support bare numbers
ok 196 should be strictly equal
# apiRequestTime should convert minutes to seconds
ok 197 should be strictly equal
# apiRequestTime should convert milliseconds to seconds
ok 198 should be strictly equal
# apiRequestTime should parse seconds
ok 199 should be strictly equal
# apiRequestTime should support bare numbers
ok 200 should be strictly equal
# metricsInterval should convert minutes to seconds
ok 201 should be strictly equal
# metricsInterval should convert milliseconds to seconds
ok 202 should be strictly equal
# metricsInterval should parse seconds
ok 203 should be strictly equal
# metricsInterval should support bare numbers
ok 204 should be strictly equal
# serverTimeout should convert minutes to seconds
ok 205 should be strictly equal
# serverTimeout should convert milliseconds to seconds
ok 206 should be strictly equal
# serverTimeout should parse seconds
ok 207 should be strictly equal
# serverTimeout should support bare numbers
ok 208 should be strictly equal
# spanFramesMinDuration should convert minutes to seconds
ok 209 should be strictly equal
# spanFramesMinDuration should convert milliseconds to seconds
ok 210 should be strictly equal
# spanFramesMinDuration should parse seconds
ok 211 should be strictly equal
# spanFramesMinDuration should support bare numbers
ok 212 should be strictly equal
# addPatch should support string form
ok 213 should be deeply equivalent
# addPatch should support object form
ok 214 should be deeply equivalent
# addPatch should support pair form
ok 215 should be deeply equivalent
# globalLabels should support string form
ok 216 should be deeply equivalent
# globalLabels should support object form
ok 217 should be deeply equivalent
# globalLabels should support pair form
ok 218 should be deeply equivalent
# maps KUBERNETES_NODE_NAME to kubernetesNodeName
ok 219 should be strictly equal
# maps KUBERNETES_NAMESPACE to kubernetesNamespace
ok 220 should be strictly equal
# maps KUBERNETES_POD_NAME to kubernetesPodName
ok 221 should be strictly equal
# maps KUBERNETES_POD_UID to kubernetesPodUID
ok 222 should be strictly equal
# should overwrite option property active by ELASTIC_APM_ACTIVE
ok 223 should be strictly equal
# should default to empty request ignore arrays
ok 224 should be strictly equal
ok 225 should be strictly equal
ok 226 should be strictly equal
ok 227 should be strictly equal
ok 228 should be strictly equal
# should separate strings and regexes into their own ignore arrays
ok 229 should be deeply equivalent
ok 230 should be deeply equivalent
ok 231 should be strictly equal
ok 232 should be truthy
ok 233 should be strictly equal
ok 234 should be strictly equal
ok 235 should be truthy
ok 236 should be strictly equal
# should compile wildcards from string
ok 237 was everything added?
# invalid serviceName => inactive
ok 238 there was a log.error mentioning "serviceName"
ok 239 active is false
# valid serviceName => active
ok 240 should be strictly equal
# serviceName/serviceVersion zero-conf: valid
ok 241 no error running index.js: null
ok 242 no stderr
ok 243 serviceName was inferred from package.json
ok 244 serviceVersion was inferred from package.json
# serviceName/serviceVersion zero-conf: no package.json to find
ok 245 no error running index.js: null
ok 246 no stderr
ok 247 serviceName is the "nodejs_service" zero-conf fallback
ok 248 serviceVersion is undefined
# serviceName/serviceVersion zero-conf: no "name" in package.json
ok 249 no error running index.js: null
ok 250 no stderr
ok 251 serviceName is the "nodejs_service" zero-conf fallback
ok 252 serviceVersion was inferred from package.json
# serviceName/serviceVersion zero-conf: namespaced package name
ok 253 no error running index.js: null
ok 254 no stderr
ok 255 serviceName was inferred and normalized from package.json
ok 256 serviceVersion was inferred from package.json
# serviceName/serviceVersion zero-conf: a package name that requires sanitization
ok 257 no error running index.js: null
ok 258 no stderr
ok 259 serviceName was inferred and sanitized from package.json
ok 260 serviceVersion was inferred from package.json
# serviceName/serviceVersion zero-conf: weird "name" in package.json
ok 261 no error running index.js: null
ok 262 no stderr
ok 263 there is a log.warn about "serviceName"
ok 264 serviceName is the "nodejs_service" zero-conf fallback
ok 265 serviceVersion was inferred from package.json
# captureBody => off
ok 266 apmServer got 3 events
ok 267 event 1 is a transaction
ok 268 transaction.context.request.body is [REDACTED]
ok 269 event 2 is an error
ok 270 error.context.request.body is [REDACTED]
# captureBody => transactions
ok 271 apmServer got 3 events
ok 272 event 1 is a transaction
ok 273 transaction.context.request.body is test
ok 274 event 2 is an error
ok 275 error.context.request.body is [REDACTED]
# captureBody => errors
ok 276 apmServer got 3 events
ok 277 event 1 is a transaction
ok 278 transaction.context.request.body is [REDACTED]
ok 279 event 2 is an error
ok 280 error.context.request.body is test
# captureBody => all
ok 281 apmServer got 3 events
ok 282 event 1 is a transaction
ok 283 transaction.context.request.body is test
ok 284 event 2 is an error
ok 285 error.context.request.body is test
# usePathAsTransactionName => true
ok 286 sent a transaction
ok 287 transaction.name is GET /foo/bar
# usePathAsTransactionName => false
ok 288 sent a transaction
ok 289 transaction.name is GET unknown route
# disableInstrumentations
# individual modules -> @elastic/elasticsearch
ok 290 disabled all selected modules
# individual modules -> @elastic/elasticsearch-canary
ok 291 disabled all selected modules
# individual modules -> apollo-server-core
ok 292 disabled all selected modules
# individual modules -> aws-sdk
ok 293 disabled all selected modules
# individual modules -> bluebird
ok 294 disabled all selected modules
# individual modules -> cassandra-driver
ok 295 disabled all selected modules
# individual modules -> elasticsearch
ok 296 disabled all selected modules
# individual modules -> express
ok 297 disabled all selected modules
# individual modules -> express-graphql
ok 298 disabled all selected modules
# individual modules -> express-queue
ok 299 disabled all selected modules
# individual modules -> fastify
ok 300 disabled all selected modules
# individual modules -> finalhandler
ok 301 disabled all selected modules
# individual modules -> generic-pool
ok 302 disabled all selected modules
# individual modules -> graphql
ok 303 disabled all selected modules
# individual modules -> handlebars
ok 304 disabled all selected modules
# individual modules -> hapi
ok 305 disabled all selected modules
# individual modules -> @hapi/hapi
ok 306 disabled all selected modules
# individual modules -> http
ok 307 disabled all selected modules
# individual modules -> https
ok 308 disabled all selected modules
# individual modules -> http2
ok 309 disabled all selected modules
# individual modules -> ioredis
ok 310 disabled all selected modules
# individual modules -> jade
ok 311 disabled all selected modules
# individual modules -> knex
ok 312 disabled all selected modules
# individual modules -> koa
ok 313 disabled all selected modules
# individual modules -> koa-router
ok 314 disabled all selected modules
# individual modules -> @koa/router
ok 315 disabled all selected modules
# individual modules -> memcached
ok 316 disabled all selected modules
# individual modules -> mimic-response
ok 317 disabled all selected modules
# individual modules -> mongodb-core
ok 318 disabled all selected modules
# individual modules -> mongodb
ok 319 disabled all selected modules
# individual modules -> mysql
ok 320 disabled all selected modules
# individual modules -> mysql2
ok 321 disabled all selected modules
# individual modules -> pg
ok 322 disabled all selected modules
# individual modules -> pug
ok 323 disabled all selected modules
# individual modules -> redis
ok 324 disabled all selected modules
# individual modules -> restify
ok 325 disabled all selected modules
# individual modules -> tedious
ok 326 disabled all selected modules
# individual modules -> ws
ok 327 disabled all selected modules
# multiple modules by array -> @elastic/elasticsearch-canary,aws-sdk,cassandra-driver,express,express-queue,finalhandler,graphql,hapi,http,http2,jade,koa,@koa/router,mimic-response,mongodb,mysql2,pug,restify,ws
ok 328 disabled all selected modules
# multiple modules by csv string -> @elastic/elasticsearch,apollo-server-core,bluebird,elasticsearch,express-graphql,fastify,generic-pool,handlebars,@hapi/hapi,https,ioredis,knex,koa-router,memcached,mongodb-core,mysql,pg,redis,tedious
ok 329 disabled all selected modules
# custom transport
ok 330 received correct number of transactions
# transaction
ok 331 id matches
ok 332 trace id matches
ok 333 parent id matches
ok 334 name matches
ok 335 type matches
ok 336 duration matches
ok 337 timestamp matches
ok 338 result matches
ok 339 sampled matches
ok 340 received correct number of spans
# span
ok 341 id matches
ok 342 transaction id matches
ok 343 trace id matches
ok 344 parent id matches
ok 345 name matches
ok 346 type matches
ok 347 duration matches
ok 348 timestamp matches
ok 349 received correct number of errors
# error
ok 350 has a valid id
ok 351 trace id matches
ok 352 transaction id matches
ok 353 parent id matches
ok 354 has an exception object
ok 355 exception message matches
ok 356 exception type matches
ok 357 has a valid culprit
ok 358 has a valid timestamp
# addPatch
ok 359 should be deeply equivalent
# globalLabels should be received by transport
ok 360 apmServer got 2 events
ok 361 first event is metadata
ok 362 metadata.labels has globalLabels
# instrument: false allows manual instrumentation
ok 363 apmServer got 2 events
ok 364 second event is a transaction
# transaction
ok 365 id matches
ok 366 trace id matches
ok 367 parent id matches
ok 368 name matches
ok 369 type matches
ok 370 duration matches
ok 371 timestamp matches
ok 372 result matches
ok 373 sampled matches
# parsing of ARRAY and KEY_VALUE opts
ok 374 opts={"transactionIgnoreUrls":["foo","bar"]} env=undefined -> {"transactionIgnoreUrls":["foo","bar"]}
ok 375 opts={"transactionIgnoreUrls":"foo"} env=undefined -> {"transactionIgnoreUrls":["foo"]}
ok 376 opts={"transactionIgnoreUrls":"foo,bar"} env=undefined -> {"transactionIgnoreUrls":["foo","bar"]}
ok 377 opts=undefined env={"ELASTIC_APM_TRANSACTION_IGNORE_URLS":"foo, bar"} -> {"transactionIgnoreUrls":["foo","bar"]}
ok 378 opts={"transactionIgnoreUrls":" \tfoo , bar "} env=undefined -> {"transactionIgnoreUrls":["foo","bar"]}
ok 379 opts={"transactionIgnoreUrls":"foo, bar bling"} env=undefined -> {"transactionIgnoreUrls":["foo","bar bling"]}
ok 380 opts={"disableInstrumentations":"foo, bar"} env=undefined -> {"disableInstrumentations":["foo","bar"]}
ok 381 opts={"addPatch":"foo=./foo.js,bar=./bar.js"} env=undefined -> {"addPatch":[["foo","./foo.js"],["bar","./bar.js"]]}
ok 382 opts={"addPatch":" foo=./foo.js, bar=./bar.js "} env=undefined -> {"addPatch":[["foo","./foo.js"],["bar","./bar.js"]]}
ok 383 opts=undefined env={"ELASTIC_APM_ADD_PATCH":" foo=./foo.js, bar=./bar.js "} -> {"addPatch":[["foo","./foo.js"],["bar","./bar.js"]]}
ok 384 opts={"globalLabels":"foo=bar, spam=eggs"} env=undefined -> {"globalLabels":[["foo","bar"],["spam","eggs"]]}
# transactionSampleRate precision
ok 385 opts={"transactionSampleRate":0} env=undefined -> {"transactionSampleRate":0}
ok 386 opts=undefined env={"ELASTIC_APM_TRANSACTION_SAMPLE_RATE":"0"} -> {"transactionSampleRate":0}
ok 387 opts={"transactionSampleRate":0.0001} env=undefined -> {"transactionSampleRate":0.0001}
ok 388 opts={"transactionSampleRate":0.00002} env=undefined -> {"transactionSampleRate":0.0001}
ok 389 opts=undefined env={"ELASTIC_APM_TRANSACTION_SAMPLE_RATE":"0.00002"} -> {"transactionSampleRate":0.0001}
ok 390 opts={"transactionSampleRate":0.300000002} env=undefined -> {"transactionSampleRate":0.3}
ok 391 opts={"transactionSampleRate":0.444444} env=undefined -> {"transactionSampleRate":0.4444}
ok 392 opts={"transactionSampleRate":0.555555} env=undefined -> {"transactionSampleRate":0.5556}
ok 393 opts={"transactionSampleRate":1} env=undefined -> {"transactionSampleRate":1}
# should accept and normalize cloudProvider
ok 394 cloudProvider config defaults to auto
ok 395 cloudProvider can be set to gcp
ok 396 cloudProvider can be set to azure
ok 397 cloudProvider can be set to aws
ok 398 cloudProvider can be set to none
ok 399 unknown cloudProvider defaults to auto
ok 400 cloudProvider can be set via env
# should accept and normalize ignoreMessageQueues
# ignoreMessageQueues defaults
ok 401 ignore message queue defaults empty
ok 402 ignore message queue regex defaults empty
# ignoreMessageQueues via configuration
ok 403 ignore message picks up configured values
ok 404 ignore message queue regex picks up configured values
ok 405 wildcard converted to regular expression
# ignoreMessageQueues via env
ok 406 ignore message queue picks up env values
ok 407 ignore message queue regex picks up env values
ok 408 wildcard converted to regular expression
# userAgentFromConf
ok 409 should be strictly equal
ok 410 should be strictly equal
ok 411 should be strictly equal
ok 412 should be strictly equal
ok 413 should be strictly equal

1..413
# tests 413
# pass  413

# ok

running (cwd: ./): node --unhandled-rejections=strict test/connect.test.js
TAP version 13
# apm.middleware.connect()
# setup mock APM server
# mock APM serverUrl: http://localhost:39905
# connect middleware should capture errors
# test server url: http://localhost:41683
ok 1 event 0 is metadata
ok 2 the "responding with an Error" error was captured
ok 3 the "throwing an Error" error was captured
# teardown mock APM server

1..3
# tests 3
# pass  3

# ok

running (cwd: ./): node --unhandled-rejections=strict test/context-propagation-only.test.js
TAP version 13
# contextPropagationOnly
# setup
# mock APM serverUrl: http://localhost:42655
# apm started
# transport should be NoopTransport if contextPropagationOnly=true
ok 1 agent transport is NoopTransport
# ensure distributed tracing and log enrichment still works
ok 2 there is no current traceparent before our client request
# service B traceparent: 00-55a7f94b09773b3c48514d25959666e4-223a3cfbd5db717e-01
# service A traceparent: 00-55a7f94b09773b3c48514d25959666e4-1d115a0a149e7fa9-01
ok 3 got expected body from client request
ok 4 the trace_id from apm.currentTraceparent in service A and B requests match
ok 5 service A request got expected "tracestate" header
ok 6 log record 0 "send client request" has no trace.id because trace has not yet started
ok 7 log record 1 "handle request" is from serviceB
ok 8 log record 1 "handle request" has trace.id set 55a7f94b09773b3c48514d25959666e4
ok 9 log record 2 "handle request" is from serviceA
ok 10 log record 2 "handle request" has trace.id set 55a7f94b09773b3c48514d25959666e4
ok 11 no events sent to APM server intake
# transactions and spans are not sent to APM server
ok 12 transaction has an id: 3b43c721de552a44
ok 13 span has an id: 6bdeb597969bd503
ok 14 no events sent to APM server intake
# errors are not sent to APM server
ok 15 apm.captureError still calls back with an error id: 89e74b1309ce6d5d2c5ce43cc086fa22
ok 16 captureError is fast (<3ms): 0.686749ms
ok 17 no events sent to APM server intake
# metrics are not sent to APM server
ok 18 after metricsInterval, no events sent to APM server intake
# teardown

1..18
# tests 18
# pass  18

# ok

running (cwd: ./): node --unhandled-rejections=strict test/disable-send.test.js
TAP version 13
# disableSend
# setup
# mock APM serverUrl: http://localhost:33997
# apm started
# transport should be NoopTransport if disableSend=true
ok 1 agent transport is NoopTransport
# transactions and spans are not sent to APM server
ok 2 transaction has an id: bfcb396110dfcc54
ok 3 span has an id: ed516700c8c1d572
ok 4 no events sent to APM server intake
# errors are not sent to APM server
ok 5 apm.captureError still calls back with an error id: ca476a165f1385880fc8ac6bde4a4e3b
ok 6 no events sent to APM server intake
# metrics are not sent to APM server
ok 7 after metricsInterval, no events sent to APM server intake
# teardown

1..7
# tests 7
# pass  7

# ok

running (cwd: ./): node --unhandled-rejections=strict test/do-not-trace-self.test.js
TAP version 13
# APM server intake request should not be traced
ok 1 fixtures/do-not-trace-self.js did not error out
ok 2 APM server got an event metadata object
ok 3 APM server got a span event
ok 4 APM server got no other events
ok 5 APM server got a single request
ok 6 APM server req was a POST...
ok 7 ... to the intake API
ok 8 APM server req had no traceparent header
ok 9 APM server req had no tracestate header
ok 10 APM server req had no elastic-apm-traceparent header

1..10
# tests 10
# pass  10

# ok

running (cwd: ./): node --unhandled-rejections=strict test/errors.test.js
TAP version 13
# #createAPMError({ exception: ... })
ok 1 should be strictly equal
# plain Error object
ok 2 apmError.id matches /^[0-9a-f]{32}$/: 1813051755371155e499cc0c5b9b1fd5
ok 3 apmError.timestamp equals 42
ok 4 apmError.culprit equals "Test.<anonymous> (test/errors.test.js)"
ok 5 apmError.exception.handled equals true
ok 6 apmError.exception.message equals ""
ok 7 apmError.exception.type equals "Error"
ok 8 apmError.exception.stacktrace.0.abs_path equals "/app/test/errors.test.js"
ok 9 apmError.exception.log equals undefined
ok 10 apmError.exception.code equals undefined
ok 11 apmError.exception.attributes equals undefined
# Error with message
ok 12 apmError.exception.message equals "oops"
# TypeError
ok 13 apmError.exception.type equals "TypeError"
# gracefully handle .stack already being accessed
ok 14 apmError.exception.message equals "foo"
ok 15 apmError.exception.type equals "Error"
ok 16 apmError.exception.stacktrace.0.abs_path equals "/app/test/errors.test.js"
# gracefully handle errors whose .stack is overwritten
ok 17 apmError.exception.message equals "foo"
ok 18 apmError.exception.type equals "Error"
ok 19 apmError.exception.stacktrace equals [{"filename":"","function":"stack I smite thee","library_frame":true,"abs_path":""}]
# gracefully handle errors with .originalError property
ok 20 apmError.culprit equals "someOtherFunc (test/errors.test.js)"
ok 21 apmError.exception.message equals "error with originalError"
ok 22 apmError.exception.stacktrace.0.abs_path equals "/app/test/errors.test.js"
ok 23 apmError.exception.stacktrace.0.function equals "someOtherFunc"
# captureAttributes=true
ok 24 apmError.exception.attributes.aProp equals "this is my property"
# captureAttributes=false
ok 25 apmError.exception.attributes equals undefined
# sourceLinesError*Frames=0 means no context fields in frames
ok 26 apmError.exception.stacktrace.0.abs_path equals "/app/test/errors.test.js"
ok 27 apmError.exception.stacktrace.0.pre_context equals undefined
ok 28 apmError.exception.stacktrace.0.context_line equals undefined
ok 29 apmError.exception.stacktrace.0.post_context equals undefined
# #createAPMError({ logMessage: ... })
# logMessage: "Howdy"
ok 30 apmError.log is as expected
# logMessage: {"message":"foo%s","params":["bar"]}
ok 31 apmError.log is as expected
# logMessage: {"foo":{}}
ok 32 apmError.log is as expected
# logMessage: null
ok 33 apmError.log is as expected
# #_moduleNameFromFrames()
# unnamespaced package
ok 34 got tape
# namespaced package
ok 35 got @elastic/elasticsearch
# empty frames
ok 36 got undefined
# not library_frame
ok 37 got undefined
# frame in node lib
ok 38 got undefined

1..38
# tests 38
# pass  38

# ok

running (cwd: ./): node --unhandled-rejections=strict test/filters.test.js
TAP version 13
# set-cookie
ok 1 should be deeply equivalent
ok 2 should be deeply equivalent

1..2
# tests 2
# pass  2

# ok

running (cwd: ./): node --unhandled-rejections=strict test/http-request.test.js
TAP version 13
# httpRequest - no timeouts
ok 1 got 200 response
# httpRequest - get timeout
ok 2 got timeout event, as expected
ok 3 should be truthy
ok 4 should be strictly equal
# httpRequest - get connectTimeout
ok 5 got connectTimeout event, as expected
ok 6 should be truthy
ok 7 should be strictly equal

1..7
# tests 7
# pass  7

# ok

running (cwd: ./): node --unhandled-rejections=strict test/logging.test.js
TAP version 13
# default logLevel is "info"
ok 1 should be strictly equal
# simple custom logger works
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
# pino custom logger gets structured fields
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 custom pino logger got structured "metadatum" log field
ok 9 should be strictly equal
ok 10 custom pino logger got structured err.type
ok 11 custom pino logger got structured err.message
ok 12 custom pino logger got structured err.stack

1..12
# tests 12
# pass  12

# ok

running (cwd: ./): node --unhandled-rejections=strict test/outcome.test.js
TAP version 13
# span outcome tests
# span starts unknown, ends with success
ok 1 spans start with unknown outcome
ok 2 spans without errors
# span starts unknown, and ends unknowns if it's not ended
ok 3 spans start with unknown outcome
ok 4 span that does not end has unknown outcome
# span starts unknown, and ends with failure if error captured
ok 5 spans start with unknown outcome
ok 6 if an error is captured, current span's outcome is failure
# test that external span's value is a success if not explicatly set
ok 7 spans start with unknown outcome
ok 8 external spans don't change on end
# API span.setOutcome tests
# API set value will be honored over non-API value
ok 9 spans start with unknown outcome
ok 10 respects API set value
# API set value will be honored over non-API with error
ok 11 spans start with unknown outcome
ok 12 respects API set value, ignore error
# API set value of unknown will override normal success
ok 13 spans start with unknown outcome
ok 14 respects API set value
# API span.setOutcome tests
# API set value will be honored over non-API value
ok 15 spans start with unknown outcome
ok 16 respects API set value
# API set value will be honored over non-API with error
ok 17 spans start with unknown outcome
ok 18 respects API set value, ignore error
# set value of unknown will override normal success
ok 19 spans start with unknown outcome
ok 20 respects API set value
# API calls ignored after a span has ended
ok 21 spans start with unknown outcome
ok 22 does not set outcome after span has ended
# API transaction.setOutcome tests
# transaction defaults to unknown
ok 23 make it
# transaction status code >= 500 is a failure
ok 24 500 is an error
# transaction status code < 400 is a success
ok 25 499 is a success
# transaction public API setOutcome "wins" over internal APIs
ok 26 agent uses setOutcome status
ok 27 agent uses setOutcome status
ok 28 agent uses setOutcome status
# outcome not set after transaction ends
ok 29 success
ok 30 still success
# agent level setTransactionOutcome tests
# outcome set
ok 31 outcome set to success
# agent level setSpanOutcome tests
# outcome set
ok 32 outcome of s2 set to failure
ok 33 outcome of s1 set to success, not affected by agent.setSpanOutcome call
{"log.level":"info","@timestamp":"2021-11-25T13:00:37.055Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"405cb3d061cf794f57e769c65f7dc838\"}"}
{"log.level":"info","@timestamp":"2021-11-25T13:00:37.056Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"0219a61966113624cf30887b09c8b46c\"}"}
{"log.level":"info","@timestamp":"2021-11-25T13:00:37.056Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"876a5a8165767a4be0e389b241906735\"}"}

1..33
# tests 33
# pass  33

# ok

running (cwd: ./): node --unhandled-rejections=strict test/parsers.test.js
TAP version 13
# #getContextFromResponse()
# for error (before headers)
ok 1 should be deeply equivalent
# for error (after headers)
ok 2 should be deeply equivalent
# for error (request finished)
ok 3 should be deeply equivalent
# for transaction
ok 4 should be deeply equivalent
# #getContextFromRequest()
# should parse a request object
ok 5 should be deeply equivalent
# full URI
ok 6 should be deeply equivalent
# port in host header
ok 7 should be deeply equivalent
# empty query string
ok 8 should be deeply equivalent
# should not log body if opts.body is false
ok 9 should be strictly equal
# body is object
ok 10 should be deeply equivalent
# body is object, but not safe to stringify
ok 11 should be deeply equivalent
# body is an array
ok 12 should be deeply equivalent
# body is a Buffer
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal

1..15
# tests 15
# pass  15

# ok

running (cwd: ./): node --unhandled-rejections=strict test/span-frames-min-duration.test.js
TAP version 13
# (anonymous)
# under 10ms (default) has no stack trace
ok 1 null
ok 2 stacktrace not set
# over 10ms (default) has stack trace
ok 3 null
ok 4 stacktrace is set
# under configured value has no stack trace
ok 5 null
ok 6 stacktrace not set
# over configured value has stack trace
ok 7 null
ok 8 stacktrace set
# spanFrameMinDuration=0 sets no stack traces
ok 9 null
ok 10 stacktrace is not set
# spanFrameMinDuration=<negative> always sets
ok 11 null
ok 12 stacktrace is set
# spanFrameMinDuration < -1 always sets
ok 13 null
ok 14 stacktrace is set

1..14
# tests 14
# pass  14

# ok

running (cwd: ./): node --unhandled-rejections=strict test/wildcard-matcher.test.js
TAP version 13
# tests cross agent transaction_ignore_urls globs
ok 1 Fixture testMatchesStartsWith, testing foo* vs. foo
ok 2 Fixture testMatchesStartsWith, testing foo* vs. foobar
ok 3 Fixture testMatchesStartsWith, testing foo* vs. bar
ok 4 Fixture testMatchesStartsWith, testing foo* vs. barfoo
ok 5 Fixture testMatchesStartsWith, testing foo* vs. rfoo
ok 6 Fixture testWildcardInTheMiddle, testing /foo/*/baz vs. /foo/bar/baz
ok 7 Fixture testWildcardInTheMiddle, testing /foo/*/baz vs. /foo/bar
ok 8 Fixture testCompoundWildcardMatcher, testing *foo*foo* vs. foofoo
ok 9 Fixture testCompoundWildcardMatcher, testing *foo*foo* vs. foo/bar/foo
ok 10 Fixture testCompoundWildcardMatcher, testing *foo*foo* vs. /foo/bar/foo/bar
ok 11 Fixture testCompoundWildcardMatcher, testing *foo*foo* vs. foo
ok 12 Fixture testCompoundWildcardMatcher3, testing *foo*oo* vs. foooo
ok 13 Fixture testCompoundWildcardMatcher3, testing *foo*oo* vs. foofoo
ok 14 Fixture testCompoundWildcardMatcher3, testing *foo*oo* vs. foo/bar/foo
ok 15 Fixture testCompoundWildcardMatcher3, testing *foo*oo* vs. /foo/bar/foo/bar
ok 16 Fixture testCompoundWildcardMatcher3, testing *foo*oo* vs. foo
ok 17 Fixture testCompoundWildcardMatcher3, testing *foo*oo* vs. fooo
ok 18 Fixture testCompoundWildcardMatcher2, testing *foo*bar* vs. foobar
ok 19 Fixture testCompoundWildcardMatcher2, testing *foo*bar* vs. foo/bar/foo/baz
ok 20 Fixture testCompoundWildcardMatcher2, testing *foo*bar* vs. /foo/bar/baz
ok 21 Fixture testCompoundWildcardMatcher2, testing *foo*bar* vs. bar/foo
ok 22 Fixture testCompoundWildcardMatcher2, testing *foo*bar* vs. barfoo
ok 23 Fixture testCompoundWildcardMatcher4, testing *foo*far* vs. foofar
ok 24 Fixture testCompoundWildcardMatcher4, testing *foo*far* vs. foo/far/foo/baz
ok 25 Fixture testCompoundWildcardMatcher4, testing *foo*far* vs. /foo/far/baz
ok 26 Fixture testCompoundWildcardMatcher4, testing *foo*far* vs. /far/foo
ok 27 Fixture testCompoundWildcardMatcher4, testing *foo*far* vs. farfoo
ok 28 Fixture testMatchBetween, testing *foo*foo* vs. foofoo
ok 29 Fixture testMatchBetween, testing *foo*foo* vs. foo/foo/foo/baz
ok 30 Fixture testMatchBetween, testing *foo*foo* vs. /foo/foo/baz
ok 31 Fixture testMatchBetween, testing *foo*foo* vs. /foo/foo
ok 32 Fixture testMatchBetween, testing *foo*foo* vs. foobar
ok 33 Fixture testComplexExpressions, testing /foo/*/baz* vs. /foo/a/bar/b/baz
ok 34 Fixture testComplexExpressions, testing /foo/*/bar/*/baz vs. /foo/a/bar/b/baz
ok 35 Fixture testInfixEmptyMatcher, testing ** vs.
ok 36 Fixture testInfixEmptyMatcher, testing ** vs. foo
ok 37 Fixture testMatchesEndsWith, testing *foo vs. foo
ok 38 Fixture testMatchesEndsWith, testing *foo vs. foobar
ok 39 Fixture testMatchesEndsWith, testing *foo vs. bar
ok 40 Fixture testMatchesEndsWith, testing *foo vs. barfoo
ok 41 Fixture testMatchesEndsWith, testing *foo vs. foor
ok 42 Fixture testMatchesEquals, testing foo vs. foo
ok 43 Fixture testMatchesEquals, testing foo vs. foobar
ok 44 Fixture testMatchesEquals, testing foo vs. bar
ok 45 Fixture testMatchesEquals, testing foo vs. barfoo
ok 46 Fixture testMatchesInfix, testing *foo* vs. foo
ok 47 Fixture testMatchesInfix, testing *foo* vs. foobar
ok 48 Fixture testMatchesInfix, testing *foo* vs. bar
ok 49 Fixture testMatchesInfix, testing *foo* vs. barfoo
ok 50 Fixture testMatchesInfix, testing *foo* vs. barfoobaz
ok 51 Fixture testMatchesNoWildcard, testing foo vs. foo
ok 52 Fixture testMatchesNoWildcard, testing foo vs. foobar
ok 53 Fixture testMatchesStartsWith_ignoreCase, testing foo* vs. foo
ok 54 Fixture testMatchesStartsWith_ignoreCase, testing foo* vs. foobar
ok 55 Fixture testMatchesStartsWith_ignoreCase, testing foo* vs. bar
ok 56 Fixture testMatchesStartsWith_ignoreCase, testing foo* vs. barfoo
ok 57 Fixture testInfixEmptyMatcher_ignoreCase, testing ** vs.
ok 58 Fixture testInfixEmptyMatcher_ignoreCase, testing ** vs. foo
ok 59 Fixture testMatchesEndsWith_ignoreCase, testing *foo vs. fOo
ok 60 Fixture testMatchesEndsWith_ignoreCase, testing *foo vs. foobar
ok 61 Fixture testMatchesEndsWith_ignoreCase, testing *foo vs. bar
ok 62 Fixture testMatchesEndsWith_ignoreCase, testing *foo vs. baRFoo
ok 63 Fixture testMatchesEquals_ignoreCase, testing foo vs. fOo
ok 64 Fixture testMatchesEquals_ignoreCase, testing foo vs. foOBar
ok 65 Fixture testMatchesEquals_ignoreCase, testing foo vs. BAR
ok 66 Fixture testMatchesEquals_ignoreCase, testing foo vs. barfoo
ok 67 Fixture testMatchesInfix_ignoreCase, testing *foo* vs. FOO
ok 68 Fixture testMatchesInfix_ignoreCase, testing *foo* vs. foOBar
ok 69 Fixture testMatchesInfix_ignoreCase, testing *foo* vs. BAR
ok 70 Fixture testMatchesInfix_ignoreCase, testing *foo* vs. baRFOo
ok 71 Fixture testMatchesInfix_ignoreCase, testing *foo* vs. BARFOOBAZ
ok 72 Fixture testMatchesInfix_caseSensitive, testing (?-i)*foo* vs. foo
ok 73 Fixture testMatchesInfix_caseSensitive, testing (?-i)*foo* vs. FOO
ok 74 Fixture testMatchesNoWildcard_ignoreCase, testing foo vs. FOO
ok 75 Fixture testMatchesNoWildcard_ignoreCase, testing foo vs. foobar
ok 76 Fixture testNeedleLongerThanHaystack, testing *foo vs. baz
ok 77 Fixture testNeedleLongerThanHaystack, testing *foob vs. baz
ok 78 Fixture testNeedleLongerThanHaystack, testing *fooba vs. baz
ok 79 Fixture testNeedleLongerThanHaystack, testing *foobar vs. baz
ok 80 Fixture testNeedleLongerThanHaystack, testing foo* vs. baz
ok 81 Fixture testNeedleLongerThanHaystack, testing foob* vs. baz
ok 82 Fixture testNeedleLongerThanHaystack, testing fooba* vs. baz
ok 83 Fixture testNeedleLongerThanHaystack, testing foobar* vs. baz
ok 84 Fixture testNeedleLongerThanHaystack, testing *foobar* vs. baz
ok 85 Fixture testSingleCharacterWildcardNotSupported, testing of? vs. foo
ok 86 Fixture testSingleCharacterWildcardNotSupported, testing of? vs. of?

1..86
# tests 86
# pass  86

# ok

running (cwd: ./): node --unhandled-rejections=strict test/cloud-metadata/callback-coordination.test.js
TAP version 13
# fetch coordination: all successful
ok 1 first callback's value is the result
# fetch coordination: all errors
ok 2 should be truthy
ok 3 all three errors captured
# fetch coordination: fails to invoke callback (timeout)
ok 4 should be truthy
ok 5 two of three errors captured
ok 6 should be strictly equal

1..6
# tests 6
# pass  6

# ok

running (cwd: ./): node --unhandled-rejections=strict test/cloud-metadata/index.test.js
TAP version 13
# cloud metadata: main function returns data with aws server
ok 1 no errors expected
ok 2 returned data
ok 3 account id set and is a string
ok 4 instance id set and is a string
ok 5 availability_zone set and is a string
ok 6 machine type set and is a string
ok 7 provider set and is a string
ok 8 region set and is a string
# cloud metadata: main function returns aws data
ok 9 no errors expected
ok 10 returned data
# cloud metadata: do not hang when none is configured
ok 11 error expected
ok 12 no metadata returned
# cloud metadata: agent configuration wiring
ok 13 auto configuration should fetch aws
ok 14 auto configuration should fetch gcp
ok 15 auto configuration should fetch azure
ok 16 none configuration should NOT fetch aws
ok 17 none configuration should NOT fetch gcp
ok 18 none configuration should NOT fetch azure
ok 19 aws configuration should fetch aws
ok 20 aws configuration should NOT fetch gcp
ok 21 aws configuration should NOT fetch azure
ok 22 gcp configuration should NOT fetch aws
ok 23 gcp configuration should fetch gcp
ok 24 gcp configuration should NOT fetch azure
ok 25 azure configuration should NOT fetch aws
ok 26 azure configuration should NOT fetch gcp
ok 27 azure configuration should fetch azure
ok 28 invalid configuration should NOT fetch aws
ok 29 invalid configuration should NOT fetch gcp
ok 30 invalid configuration should NOT fetch azure
# cloud metadata: main function returns aws IMDSv2 data
ok 31 no errors expected
ok 32 returned data
# cloud metadata: aws empty data
ok 33 no errors expected
ok 34 returned data
# cloud metadata: gcp empty data
ok 35 no errors expected
ok 36 returned data
# cloud metadata: azure empty data
ok 37 no errors expected
ok 38 returned data
# cloud metadata: azure empty data
ok 39 no errors expected
ok 40 returned data
# cloud metadata: main function returns data with gcp server
ok 41 no errors expected
ok 42 returned data
ok 43 instance id is set and is a string
ok 44 provider is set and is a string
ok 45 project id is set and is a string
ok 46 project name is set and is a string
ok 47 region is set
ok 48 availability_zone is set
ok 49 machine type is set
# cloud metadata: main function returns data with azure server
ok 50 no errors expected
ok 51 returned data
ok 52 account id set and is a string
ok 53 instance id set and is a string
ok 54 instance name set and is a string
ok 55 project name set and is a string
ok 56 availability_zone set and is a string
ok 57 machine type set and is a string
ok 58 provider set and is a string
ok 59 region set and is a string
# cloud metadata: gcp string manipulation does not fail on non-strings
ok 60 no errors expected
ok 61 returned data
# gcp metadata: no gcp server
ok 62 error expected
# gcp metadata: slow metadata server
ok 63 error expected
ok 64 should be strictly equal
# azure metadata: slow metadata server
ok 65 error expected
ok 66 should be strictly equal
# cloud metadata: main function with slow aws server
ok 67 error expected
ok 68 should be strictly equal
# aws metadata unified IMDS: returns valid data from v2 server
ok 69 null
ok 70 should be truthy
ok 71 found expected metadata for account.id
ok 72 found expected metadata for
ok 73 found expected metadata for
ok 74 found expected metadata for
ok 75 found expected metadata for aws metadata unified IMDS: returns valid data from v2 server
ok 76 found expected metadata for
# aws metadata unified IMDS: returns valid data from v1 server
ok 77 null
ok 78 should be truthy
ok 79 found expected metadata for account.id
ok 80 found expected metadata for
ok 81 found expected metadata for
ok 82 found expected metadata for
ok 83 found expected metadata for aws metadata unified IMDS: returns valid data from v1 server
ok 84 found expected metadata for
# aws metadata unified IMDS: errors for non-aws server
ok 85 expected error
ok 86 no metadata expected
# aws metadata unified IMDS: slow v2 metadata server
ok 87 error expected
ok 88 should be strictly equal
# aws metadata unified IMDS: connection times out
ok 89 expected timeout error
# aws metadata unified IMDS: if server is not there
ok 90 expected unreachable server error

1..90
# tests 90
# pass  90

# ok

running (cwd: ./): node --unhandled-rejections=strict test/cloud-metadata/test-server.test.js
TAP version 13
# test the test server: valid
ok 1 created test aws metadata server
# test the test server: unknown provider
ok 2 should throw
ok 3 should throw
# basic metadata request: aws
ok 4 version set
# basic metadata request: gcp
ok 5 id set
# basic metadata request: azure
ok 6 vmId set
# IMDSv2 token fetching: aws
ok 7 returns correct fake token
ok 8 version set

1..8
# tests 8
# pass  8

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/async-await.test.js
TAP version 13
# await promise
{"log.level":"error","@timestamp":"2021-11-25T13:00:51.929Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"APM Server transport error (ECONNREFUSED): connect ECONNREFUSED 127.0.0.1:8200"}
{"log.level":"error","@timestamp":"2021-11-25T13:00:51.964Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"APM Server transport error (ECONNREFUSED): connect ECONNREFUSED 127.0.0.1:8200"}
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
# await non-promise
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should be strictly equal

1..11
# tests 11
# pass  11

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/async-hooks.test.js
TAP version 13
# setTimeout
{"log.level":"error","@timestamp":"2021-11-25T13:00:53.278Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"APM Server transport error (ECONNREFUSED): connect ECONNREFUSED 127.0.0.1:8200"}
{"log.level":"error","@timestamp":"2021-11-25T13:00:53.320Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"APM Server transport error (ECONNREFUSED): connect ECONNREFUSED 127.0.0.1:8200"}
ok 1 should be strictly equal
ok 2 should be strictly equal
# setInterval
{"log.level":"error","@timestamp":"2021-11-25T13:00:53.363Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"APM Server transport error (ECONNREFUSED): connect ECONNREFUSED 127.0.0.1:8200"}
ok 3 should be strictly equal
ok 4 should be strictly equal
# setImmediate
ok 5 should be strictly equal
ok 6 should be strictly equal
# process.nextTick
ok 7 should be strictly equal
ok 8 should be strictly equal
# pre-defined, pre-resolved shared promise
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should be strictly equal
ok 12 should be strictly equal
# pre-defined, pre-resolved non-shared promise
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
# pre-defined, post-resolved promise
ok 17 should be strictly equal
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
# post-defined, post-resolved promise
ok 21 should be strictly equal
ok 22 should be strictly equal
ok 23 should be strictly equal
ok 24 should be strictly equal

1..24
# tests 24
# pass  24

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/context.test.js
TAP version 13
# #getHTTPDestination
# username and pass
ok 1 should be deeply equivalent
# https with custom port
ok 2 should be deeply equivalent
# https default port
ok 3 should be deeply equivalent
# http default port
ok 4 should be deeply equivalent
# ipv6
ok 5 should be deeply equivalent
# ipv6 https custom port
ok 6 should be deeply equivalent
# #getDBDestination
# service fields
ok 7 should be deeply equivalent
# host when present
ok 8 should be deeply equivalent
# port when present
ok 9 should be deeply equivalent

1..9
# tests 9
# pass  9

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/fs.test.js
TAP version 13
# fs.realpath.native
ok 1 no error from fs.realpath.native
ok 2 apm.currentSpan is as expected

1..2
# tests 2
# pass  2

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/github-issue-1770.test.js
TAP version 13
# span url contains single url
ok 1 one span
ok 2 records single url only

1..2
# tests 2
# pass  2

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/github-issue-75.test.js
TAP version 13
# https://github.com/elastic/apm-agent-nodejs/issues/75 1
{"log.level":"error","@timestamp":"2021-11-25T13:00:57.784Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"APM Server transport error (ECONNREFUSED): connect ECONNREFUSED 127.0.0.1:8200"}
ok 1 should create transactions
ok 2 should create spans
ok 3 span should belong to transaction
ok 4 span should belong to transaction
# https://github.com/elastic/apm-agent-nodejs/issues/75 2
ok 5 should create transactions
ok 6 should create spans
ok 7 span should belong to transaction
ok 8 span should belong to transaction
# https://github.com/elastic/apm-agent-nodejs/issues/75 3
ok 9 should create transactions
ok 10 should create spans
ok 11 span should belong to transaction
ok 12 span should belong to transaction
# https://github.com/elastic/apm-agent-nodejs/issues/75 4
ok 13 should create transactions
ok 14 should create spans
ok 15 span should belong to transaction
ok 16 span should belong to transaction
# https://github.com/elastic/apm-agent-nodejs/issues/75 5
ok 17 should create transactions
ok 18 should create spans
ok 19 span should belong to transaction
ok 20 span should belong to transaction

1..20
# tests 20
# pass  20

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/index.test.js
TAP version 13
# basic
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be truthy
ok 4 should be truthy
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 duration should be >0ms
ok 8 duration should be <100ms
ok 9 should be falsy
ok 10 should be strictly equal
ok 11 should have span named t00
ok 12 should belong to correct transaction
ok 13 should be strictly equal
ok 14 assert span timestamp > transaction timestamp
ok 15 assert span timestamp < transaction timestamp + 100000
ok 16 span duration should be >0ms
ok 17 span duration should be <100ms
ok 18 should have stack trace
ok 19 should be strictly equal
ok 20 should be truthy
ok 21 should be strictly equal
ok 22 should be strictly equal
ok 23 should be strictly equal
ok 24 should be strictly equal
ok 25 should be truthy
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
ok 29 should be strictly equal
ok 30 should be truthy
ok 31 should be strictly equal
ok 32 should be strictly equal
ok 33 should be strictly equal
ok 34 should be strictly equal
ok 35 should be truthy
ok 36 should be strictly equal
ok 37 should be strictly equal
ok 38 should be strictly equal
ok 39 should be strictly equal
ok 40 should be truthy
ok 41 should be strictly equal
ok 42 should be strictly equal
ok 43 should be strictly equal
ok 44 should be strictly equal
ok 45 should be truthy
ok 46 should be strictly equal
ok 47 should be strictly equal
ok 48 should be strictly equal
ok 49 should be strictly equal
ok 50 should be truthy
ok 51 should be strictly equal
ok 52 should be strictly equal
ok 53 should be strictly equal
ok 54 should be strictly equal
ok 55 should be truthy
ok 56 should be strictly equal
ok 57 should be strictly equal
ok 58 should be strictly equal
ok 59 should be strictly equal
ok 60 should be truthy
ok 61 should be strictly equal
ok 62 should be strictly equal
ok 63 should be strictly equal
ok 64 should be strictly equal
ok 65 should be truthy
ok 66 should be strictly equal
ok 67 should be strictly equal
ok 68 should be strictly equal
ok 69 should be strictly equal
ok 70 should be truthy
ok 71 should be strictly equal
ok 72 should be strictly equal
ok 73 should be strictly equal
ok 74 should have span named t01
ok 75 should belong to correct transaction
ok 76 should be strictly equal
ok 77 assert span timestamp > transaction timestamp
ok 78 assert span timestamp < transaction timestamp + 100000
ok 79 span duration should be >0ms
ok 80 span duration should be <100ms
ok 81 should have stack trace
ok 82 should be strictly equal
ok 83 should be truthy
ok 84 should be strictly equal
ok 85 should be strictly equal
ok 86 should be strictly equal
ok 87 should be strictly equal
ok 88 should be truthy
ok 89 should be strictly equal
ok 90 should be strictly equal
ok 91 should be strictly equal
ok 92 should be strictly equal
ok 93 should be truthy
ok 94 should be strictly equal
ok 95 should be strictly equal
ok 96 should be strictly equal
ok 97 should be strictly equal
ok 98 should be truthy
ok 99 should be strictly equal
ok 100 should be strictly equal
ok 101 should be strictly equal
ok 102 should be strictly equal
ok 103 should be truthy
ok 104 should be strictly equal
ok 105 should be strictly equal
ok 106 should be strictly equal
ok 107 should be truthy
ok 108 should be truthy
ok 109 should be strictly equal
ok 110 should be strictly equal
ok 111 duration should be >0ms
ok 112 duration should be <100ms
ok 113 should be falsy
ok 114 should be strictly equal
ok 115 should have span named t10
ok 116 should belong to correct transaction
ok 117 should be strictly equal
ok 118 assert span timestamp > transaction timestamp
ok 119 assert span timestamp < transaction timestamp + 100000
ok 120 span duration should be >0ms
ok 121 span duration should be <100ms
ok 122 should have stack trace
ok 123 should be strictly equal
ok 124 should be truthy
ok 125 should be strictly equal
ok 126 should be strictly equal
ok 127 should be strictly equal
ok 128 should be strictly equal
ok 129 should be truthy
ok 130 should be strictly equal
ok 131 should be strictly equal
ok 132 should be strictly equal
ok 133 should be strictly equal
ok 134 should be truthy
ok 135 should be strictly equal
ok 136 should be strictly equal
ok 137 should be strictly equal
ok 138 should be strictly equal
ok 139 should be truthy
ok 140 should be strictly equal
ok 141 should be strictly equal
ok 142 should be strictly equal
ok 143 should be strictly equal
ok 144 should be truthy
ok 145 should be strictly equal
ok 146 should be strictly equal
ok 147 should be strictly equal
ok 148 should be strictly equal
ok 149 should be truthy
ok 150 should be strictly equal
ok 151 should be strictly equal
ok 152 should be strictly equal
ok 153 should be strictly equal
ok 154 should be truthy
ok 155 should be strictly equal
ok 156 should be strictly equal
ok 157 should be strictly equal
ok 158 should have span named t11
ok 159 should belong to correct transaction
ok 160 should be strictly equal
ok 161 assert span timestamp > transaction timestamp
ok 162 assert span timestamp < transaction timestamp + 100000
ok 163 span duration should be >0ms
ok 164 span duration should be <100ms
ok 165 should have stack trace
ok 166 should be strictly equal
ok 167 should be truthy
ok 168 should be strictly equal
ok 169 should be strictly equal
ok 170 should be strictly equal
ok 171 should be strictly equal
ok 172 should be truthy
ok 173 should be strictly equal
ok 174 should be strictly equal
ok 175 should be strictly equal
ok 176 should be strictly equal
ok 177 should be truthy
ok 178 should be strictly equal
ok 179 should be strictly equal
ok 180 should be strictly equal
ok 181 should be strictly equal
ok 182 should be truthy
ok 183 should be strictly equal
ok 184 should be strictly equal
ok 185 should be strictly equal
ok 186 should be strictly equal
ok 187 should be truthy
ok 188 should be strictly equal
ok 189 should be strictly equal
ok 190 should be strictly equal
# same tick
ok 191 should be strictly equal
ok 192 should be strictly equal
ok 193 should have span named t0
ok 194 should belong to correct transaction
ok 195 should have span named t1
ok 196 should belong to correct transaction
# serial - no parents
ok 197 should be strictly equal
ok 198 should be strictly equal
ok 199 should have span named t0
ok 200 should belong to correct transaction
ok 201 should have span named t1
ok 202 should belong to correct transaction
# serial - with parents
ok 203 should be strictly equal
ok 204 should be strictly equal
ok 205 should have span named t0
ok 206 should belong to correct transaction
ok 207 should have span named t1
ok 208 should belong to correct transaction
# stack branching - no parents
ok 209 should be strictly equal
ok 210 should be strictly equal
ok 211 should have span named t0
ok 212 should belong to correct transaction
ok 213 should have span named t1
ok 214 should belong to correct transaction
# errors should not have a transaction id if no transaction is present
{"log.level":"info","@timestamp":"2021-11-25T13:00:59.454Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"2c9d3e5b160f768a817ca2c6398b0246\"}"}
ok 215 should be strictly equal
ok 216 should be strictly equal
# errors should have a transaction id - non-ended transaction
{"log.level":"info","@timestamp":"2021-11-25T13:00:59.458Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"b05f04b5c5b2708fe299d1e67259ce78\"}"}
ok 217 should be strictly equal
ok 218 should be strictly equal
ok 219 should be strictly equal
# captureError should handle opts.captureAttributes
{"log.level":"info","@timestamp":"2021-11-25T13:00:59.460Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"b83fc8ab4d60c7ef62f1b3fa6bab0466\"}"}
{"log.level":"info","@timestamp":"2021-11-25T13:00:59.461Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"0d83bb088ebb3f7c4987b96437f56a4a\"}"}
{"log.level":"info","@timestamp":"2021-11-25T13:00:59.461Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"4cd7adf25a030a6d683b88051e5f413d\"}"}
ok 220 should be strictly equal
ok 221 ex0 did capture attributes.theProperty
ok 222 ex0 did capture attributes.theProperty
ok 223 ex2 did not capture attributes
# sampling
ok 224 should be truthy
ok 225 should be truthy
ok 226 should be truthy
ok 227 should be truthy
# unsampled transactions do not include spans
ok 228 should be strictly equal
ok 229 should be truthy
ok 230 should be truthy
ok 231 duration should be >0ms
ok 232 duration should be <100ms
ok 233 should be falsy
ok 234 should be strictly equal
# unsampled request transactions should have the correct result
ok 235 should be strictly equal
ok 236 should be strictly equal
ok 237 should be strictly equal
# bind
# does not create spans in unbound function context
ok 238 should not get a span, because there is no current transaction
ok 239 should be strictly equal
# creates spans in bound function
ok 240 should get a span, because run context with transaction was bound to fn
ok 241 should be strictly equal
ok 242 should be strictly equal
ok 243 should be strictly equal
# removes listeners properly
ok 244 have 1 listener for "foo"
ok 245 that 1 listener is not myHandler() (it is a wrapped version of it)
ok 246 have 1 listener for "bar"
ok 247 that 1 listener is not myHandler() (it is a wrapped version of it)
ok 248 now have 0 listeners for "foo"
ok 249 now have 0 listeners for "bar"
ok 250 should be strictly equal
# does not create spans in unbound emitter with on
ok 251 should *not* get span s1
ok 252 should be strictly equal
# does not create spans in unbound emitter with once
ok 253 should *not* get span s1
ok 254 should be strictly equal
# does not create spans in unbound emitter with addListener
ok 255 should *not* get span s1
ok 256 should be strictly equal
# does not create spans in unbound emitter with prependListener
ok 257 should *not* get span s1
ok 258 should be strictly equal
# does not create spans in unbound emitter with prependOnceListener
ok 259 should *not* get span s1
ok 260 should be strictly equal
# creates spans in bound emitter with method="on"
ok 261 should be strictly equal
ok 262 should be strictly equal
ok 263 should be strictly equal
# creates spans in bound emitter with method="once"
ok 264 should be strictly equal
ok 265 should be strictly equal
ok 266 should be strictly equal
# creates spans in bound emitter with method="addListener"
ok 267 should be strictly equal
ok 268 should be strictly equal
ok 269 should be strictly equal
# creates spans in bound emitter with method="prependListener"
ok 270 should be strictly equal
ok 271 should be strictly equal
ok 272 should be strictly equal
# creates spans in bound emitter with method="prependOnceListener"
ok 273 should be strictly equal
ok 274 should be strictly equal
ok 275 should be strictly equal
# nested spans
ok 276 should be strictly equal
ok 277 should be strictly equal
ok 278 should be strictly equal
ok 279 should be strictly equal
ok 280 should be strictly equal
ok 281 s0 should directly descend from the transaction
ok 282 s0 has same trace_id as transaction
ok 283 s0 transaction_id matches transaction id
ok 284 s1 should descend from s0
ok 285 s1 has same trace_id as transaction
ok 286 s1 transaction_id matches transaction id
ok 287 s01 should descend from s0
ok 288 s01 has same trace_id as transaction
ok 289 s01 transaction_id matches transaction id
ok 290 s11 should descend from s1
ok 291 s11 has same trace_id as transaction
ok 292 s11 transaction_id matches transaction id
ok 293 s12 should descend from s1
ok 294 s12 has same trace_id as transaction
ok 295 s12 transaction_id matches transaction id
# nested transactions
ok 296 should be strictly equal
ok 297 should be strictly equal
ok 298 should be strictly equal
ok 299 should be strictly equal
ok 300 s0 should directly descend from the transaction
ok 301 t0 has same trace_id as transaction
ok 302 t0 transaction_id matches transaction id
ok 303 should be strictly equal
ok 304 should be strictly equal
ok 305 t1 should directly descend from the t0
ok 306 t1 has same trace_id as transaction
ok 307 s1 should directly descend from the transaction
ok 308 t1 has same trace_id as transaction
ok 309 t1 transaction_id matches transaction id

1..309
# tests 309
# pass  309

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/native-promises.test.js
TAP version 13
# new Promise -> resolve -> then
{"log.level":"error","@timestamp":"2021-11-25T13:01:01.187Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"APM Server transport error (ECONNREFUSED): connect ECONNREFUSED 127.0.0.1:8200"}
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
# new Promise -> reject -> catch
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
# new Promise -> reject -> catch -> then
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
# new Promise -> reject -> then (2nd arg)
ok 17 should be strictly equal
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
# Promise.resolve
ok 21 should be strictly equal
ok 22 should be strictly equal
ok 23 should be strictly equal
ok 24 should be strictly equal
# Promise.reject
ok 25 should be strictly equal
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
# Promise.all
ok 29 should be deeply equivalent
ok 30 should be strictly equal
ok 31 should be deeply equivalent
ok 32 should be strictly equal
# Promise.race - 2nd resolve
{"log.level":"error","@timestamp":"2021-11-25T13:01:01.230Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"APM Server transport error (ECONNREFUSED): connect ECONNREFUSED 127.0.0.1:8200"}
ok 33 should be strictly equal
ok 34 should be strictly equal
ok 35 should be strictly equal
ok 36 should be strictly equal
# Promise.race - 1st resolve
ok 37 should be strictly equal
ok 38 should be strictly equal
ok 39 should be strictly equal
ok 40 should be strictly equal
# Promise.race - 2nd reject
ok 41 should be strictly equal
ok 42 should be strictly equal
ok 43 should be strictly equal
ok 44 should be strictly equal
# return new Promise
ok 45 should be strictly equal
ok 46 should be strictly equal
ok 47 should be strictly equal
ok 48 should be strictly equal
ok 49 should be strictly equal
ok 50 should be strictly equal
ok 51 should be strictly equal
ok 52 should be strictly equal
ok 53 should be strictly equal
ok 54 should be strictly equal
ok 55 should be strictly equal
ok 56 should be strictly equal

1..56
# tests 56
# pass  56

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/span.test.js
TAP version 13
# init
# properties
ok 1 should be truthy
ok 2 should be truthy
ok 3 should be truthy
ok 4 should be truthy
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
# options.childOf
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should not be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
# #end()
ok 14 should be strictly equal
ok 15 should be strictly equal
# #duration()
ok 16 51.098 should be larger than 49
# #duration() - return null if not ended
ok 17 should be strictly equal
# custom start time
ok 18 duration should be circa more than 1s (was: 1000.475)
ok 19 duration should be less than 1.1s (was: 1000.475)
# #end(time)
ok 20 should be strictly equal
# #setLabel
# valid
ok 21 should be strictly equal
ok 22 should be strictly equal
ok 23 should be strictly equal
ok 24 should be deeply equivalent
ok 25 should be deeply equivalent
ok 26 should be deeply equivalent
# invalid
ok 27 should be strictly equal
ok 28 should be strictly equal
ok 29 should be strictly equal
{"log.level":"warn","@timestamp":"2021-11-25T13:01:02.601Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Illegal characters used in tag key: invalid*"}
ok 30 should be deeply equivalent
{"log.level":"warn","@timestamp":"2021-11-25T13:01:02.602Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Illegal characters used in tag key: invalid."}
ok 31 should be deeply equivalent
{"log.level":"warn","@timestamp":"2021-11-25T13:01:02.603Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Illegal characters used in tag key: invalid\""}
ok 32 should be deeply equivalent
# #addLabels
ok 33 should be strictly equal
ok 34 should be strictly equal
ok 35 should be strictly equal
ok 36 should be deeply equivalent
ok 37 should be deeply equivalent
ok 38 should be deeply equivalent
ok 39 should be deeply equivalent
# span.sync
ok 40 should be strictly equal
ok 41 span2.sync=true immediately after creation
ok 42 span2.sync=true immediately after end
ok 43 span1.sync=false immediately after end
ok 44 span2.sync=true later after having ended sync
# #_encode() - un-ended
ok 45 should be strictly equal
# #_encode() - ended unnamed
ok 46 null
ok 47 should be deeply equivalent
ok 48 should be truthy
ok 49 should be truthy
ok 50 should be truthy
ok 51 should be truthy
ok 52 should be strictly equal
ok 53 should be strictly equal
ok 54 should be strictly equal
ok 55 should be strictly equal
ok 56 should be strictly equal
ok 57 should be strictly equal
ok 58 should be truthy
ok 59 should be strictly equal
ok 60 stacktrace should be an array
ok 61 stacktrace should have at least one frame
ok 62 top frame should have expected function
ok 63 top frame should have expected abs_path
ok 64 frame should have expected properties
ok 65 frame.filename should be a string
ok 66 frame.lineno should be greater than 0
ok 67 frame.function should be a string
ok 68 frame.library_frame should be a boolean
ok 69 frame.abs_path should be a string
ok 70 frame should have expected properties
ok 71 frame.filename should be a string
ok 72 frame.lineno should be greater than 0
ok 73 frame.function should be a string
ok 74 frame.library_frame should be a boolean
ok 75 frame.abs_path should be a string
ok 76 frame should have expected properties
ok 77 frame.filename should be a string
ok 78 frame.lineno should be greater than 0
ok 79 frame.function should be a string
ok 80 frame.library_frame should be a boolean
ok 81 frame.abs_path should be a string
ok 82 frame should have expected properties
ok 83 frame.filename should be a string
ok 84 frame.lineno should be greater than 0
ok 85 frame.function should be a string
ok 86 frame.library_frame should be a boolean
ok 87 frame.abs_path should be a string
ok 88 frame should have expected properties
ok 89 frame.filename should be a string
ok 90 frame.lineno should be greater than 0
ok 91 frame.function should be a string
ok 92 frame.library_frame should be a boolean
ok 93 frame.abs_path should be a string
ok 94 frame should have expected properties
ok 95 frame.filename should be a string
ok 96 frame.lineno should be greater than 0
ok 97 frame.function should be a string
ok 98 frame.library_frame should be a boolean
ok 99 frame.abs_path should be a string
ok 100 frame should have expected properties
ok 101 frame.filename should be a string
ok 102 frame.lineno should be greater than 0
ok 103 frame.function should be a string
ok 104 frame.library_frame should be a boolean
ok 105 frame.abs_path should be a string
# #_encode() - ended named
ok 106 null
ok 107 should be deeply equivalent
ok 108 should be truthy
ok 109 should be truthy
ok 110 should be truthy
ok 111 should be truthy
ok 112 should be strictly equal
ok 113 should be strictly equal
ok 114 should be strictly equal
ok 115 should be strictly equal
ok 116 should be strictly equal
ok 117 should be strictly equal
ok 118 should be truthy
ok 119 should be strictly equal
ok 120 stacktrace should be an array
ok 121 stacktrace should have at least one frame
ok 122 top frame should have expected function
ok 123 top frame should have expected abs_path
ok 124 frame should have expected properties
ok 125 frame.filename should be a string
ok 126 frame.lineno should be greater than 0
ok 127 frame.function should be a string
ok 128 frame.library_frame should be a boolean
ok 129 frame.abs_path should be a string
ok 130 frame should have expected properties
ok 131 frame.filename should be a string
ok 132 frame.lineno should be greater than 0
ok 133 frame.function should be a string
ok 134 frame.library_frame should be a boolean
ok 135 frame.abs_path should be a string
ok 136 frame should have expected properties
ok 137 frame.filename should be a string
ok 138 frame.lineno should be greater than 0
ok 139 frame.function should be a string
ok 140 frame.library_frame should be a boolean
ok 141 frame.abs_path should be a string
ok 142 frame should have expected properties
ok 143 frame.filename should be a string
ok 144 frame.lineno should be greater than 0
ok 145 frame.function should be a string
ok 146 frame.library_frame should be a boolean
ok 147 frame.abs_path should be a string
ok 148 frame should have expected properties
ok 149 frame.filename should be a string
ok 150 frame.lineno should be greater than 0
ok 151 frame.function should be a string
ok 152 frame.library_frame should be a boolean
ok 153 frame.abs_path should be a string
ok 154 frame should have expected properties
ok 155 frame.filename should be a string
ok 156 frame.lineno should be greater than 0
ok 157 frame.function should be a string
ok 158 frame.library_frame should be a boolean
ok 159 frame.abs_path should be a string
ok 160 frame should have expected properties
ok 161 frame.filename should be a string
ok 162 frame.lineno should be greater than 0
ok 163 frame.function should be a string
ok 164 frame.library_frame should be a boolean
ok 165 frame.abs_path should be a string
# #_encode() - with meta data
ok 166 null
ok 167 should be deeply equivalent
ok 168 should be truthy
ok 169 should be truthy
ok 170 should be truthy
ok 171 should be truthy
ok 172 should be strictly equal
ok 173 should be strictly equal
ok 174 should be strictly equal
ok 175 should be strictly equal
ok 176 should be strictly equal
ok 177 should be strictly equal
ok 178 should be truthy
ok 179 should be deeply equivalent
ok 180 stacktrace should be an array
ok 181 stacktrace should have at least one frame
ok 182 top frame should have expected function
ok 183 top frame should have expected abs_path
ok 184 frame should have expected properties
ok 185 frame.filename should be a string
ok 186 frame.lineno should be greater than 0
ok 187 frame.function should be a string
ok 188 frame.library_frame should be a boolean
ok 189 frame.abs_path should be a string
ok 190 frame should have expected properties
ok 191 frame.filename should be a string
ok 192 frame.lineno should be greater than 0
ok 193 frame.function should be a string
ok 194 frame.library_frame should be a boolean
ok 195 frame.abs_path should be a string
ok 196 frame should have expected properties
ok 197 frame.filename should be a string
ok 198 frame.lineno should be greater than 0
ok 199 frame.function should be a string
ok 200 frame.library_frame should be a boolean
ok 201 frame.abs_path should be a string
ok 202 frame should have expected properties
ok 203 frame.filename should be a string
ok 204 frame.lineno should be greater than 0
ok 205 frame.function should be a string
ok 206 frame.library_frame should be a boolean
ok 207 frame.abs_path should be a string
ok 208 frame should have expected properties
ok 209 frame.filename should be a string
ok 210 frame.lineno should be greater than 0
ok 211 frame.function should be a string
ok 212 frame.library_frame should be a boolean
ok 213 frame.abs_path should be a string
ok 214 frame should have expected properties
ok 215 frame.filename should be a string
ok 216 frame.lineno should be greater than 0
ok 217 frame.function should be a string
ok 218 frame.library_frame should be a boolean
ok 219 frame.abs_path should be a string
ok 220 frame should have expected properties
ok 221 frame.filename should be a string
ok 222 frame.lineno should be greater than 0
ok 223 frame.function should be a string
ok 224 frame.library_frame should be a boolean
ok 225 frame.abs_path should be a string
# #_encode() - disabled stack traces
ok 226 null
ok 227 should be deeply equivalent
ok 228 should be truthy
ok 229 should be truthy
ok 230 should be truthy
ok 231 should be truthy
ok 232 should be strictly equal
ok 233 should be strictly equal
ok 234 should be strictly equal
ok 235 should be strictly equal
ok 236 should be strictly equal
ok 237 should be strictly equal
ok 238 should be truthy
ok 239 should be strictly equal
ok 240 should be strictly equal
# #ids
ok 241 should be loosely deeply equivalent
# #toString()
ok 242 should be strictly equal

1..242
# tests 242
# pass  242

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/timer.test.js
TAP version 13
# started
ok 1 should be truthy
ok 2 should be strictly equal
# ended
ok 3 should be truthy
ok 4 should be truthy
# ended twice
ok 5 should be strictly equal
# elapsed
ok 6 should be truthy
ok 7 should be truthy
ok 8 should be truthy
# custom start time
ok 9 should be strictly equal
ok 10 duration should be circa more than 1s (was: 1000.166)
ok 11 duration should be less than 1.1s (was: 1000.166)
# custom end time
ok 12 should be strictly equal

1..12
# tests 12
# pass  12

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/transaction.test.js
TAP version 13
# init
# name and type
ok 1 should be truthy
ok 2 should be truthy
ok 3 should be truthy
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
# options.childOf
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should not be strictly equal
ok 11 should be strictly equal
ok 12 should be strictly equal
# #setUserContext
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be deeply equivalent
ok 16 should be deeply equivalent
ok 17 should be deeply equivalent
ok 18 should be deeply equivalent
# #setCustomContext
ok 19 should be strictly equal
ok 20 should be strictly equal
ok 21 should be deeply equivalent
ok 22 should be deeply equivalent
ok 23 should be deeply equivalent
ok 24 should be deeply equivalent
# #setLabel
# valid
ok 25 should be strictly equal
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be deeply equivalent
ok 29 should be deeply equivalent
ok 30 should be deeply equivalent
# invalid
ok 31 should be strictly equal
ok 32 should be strictly equal
ok 33 should be strictly equal
{"log.level":"warn","@timestamp":"2021-11-25T13:01:04.296Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Illegal characters used in tag key: invalid*"}
ok 34 should be deeply equivalent
{"log.level":"warn","@timestamp":"2021-11-25T13:01:04.297Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Illegal characters used in tag key: invalid."}
ok 35 should be deeply equivalent
{"log.level":"warn","@timestamp":"2021-11-25T13:01:04.298Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Illegal characters used in tag key: invalid\""}
ok 36 should be deeply equivalent
# #addLabels
ok 37 should be strictly equal
ok 38 should be strictly equal
ok 39 should be strictly equal
ok 40 should be deeply equivalent
ok 41 should be deeply equivalent
ok 42 should be deeply equivalent
ok 43 should be deeply equivalent
# #startSpan()
# basic
ok 44 should return a span
ok 45 should be strictly equal
ok 46 should be strictly equal
# options.startTime
ok 47 duration should be circa more than 1s (was: 1000.712)
ok 48 duration should be less than 1.1s (was: 1000.712)
# options.childOf
ok 49 should be strictly equal
ok 50 should be strictly equal
ok 51 should not be strictly equal
ok 52 should be strictly equal
ok 53 should be strictly equal
# #end() - with result
ok 54 should be strictly equal
ok 55 should be strictly equal
ok 56 should be strictly equal
ok 57 should be strictly equal
# #duration()
ok 58 should be truthy
ok 59 should be truthy
# #duration() - un-ended transaction
ok 60 should be strictly equal
# custom start time
ok 61 duration should be circa more than 1s (was: 1000.311)
ok 62 duration should be less than 1.1s (was: 1000.311)
# #end(time)
ok 63 should be strictly equal
# #setDefaultName() - with initial value
ok 64 should be strictly equal
ok 65 should be strictly equal
# #setDefaultName() - no initial value
ok 66 should be strictly equal
ok 67 should be strictly equal
# name - custom first, then default
ok 68 should be strictly equal
# name - default first, then custom
ok 69 should be strictly equal
# parallel transactions
ok 70 should be strictly equal
ok 71 should be strictly equal
# #_encode() - un-ended
{"log.level":"error","@timestamp":"2021-11-25T13:01:04.475Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"cannot encode un-ended transaction: {\"trans\":\"82c4ddb02b135695\",\"trace\":\"27dc6ec16302aa4ea61cffa66f87854d\"}"}
ok 72 cannot encode un-ended transaction
# #_encode() - ended
ok 73 should be deeply equivalent
ok 74 should be truthy
ok 75 should be truthy
ok 76 should be strictly equal
ok 77 should be strictly equal
ok 78 should be strictly equal
ok 79 should be strictly equal
ok 80 should be strictly equal
ok 81 should be truthy
ok 82 should be strictly equal
ok 83 should be strictly equal
ok 84 should be deeply equivalent
# #_encode() - with meta data
ok 85 should be deeply equivalent
ok 86 should be truthy
ok 87 should be truthy
ok 88 should be strictly equal
ok 89 should be strictly equal
ok 90 should be strictly equal
ok 91 should be strictly equal
ok 92 should be strictly equal
ok 93 should be truthy
ok 94 should be strictly equal
ok 95 should be strictly equal
ok 96 should be deeply equivalent
# #_encode() - http request meta data
ok 97 should be deeply equivalent
ok 98 should be truthy
ok 99 should be truthy
ok 100 should be strictly equal
ok 101 should be strictly equal
ok 102 should be strictly equal
ok 103 should be strictly equal
ok 104 should be strictly equal
ok 105 should be truthy
ok 106 should be strictly equal
ok 107 should be strictly equal
ok 108 should be deeply equivalent
# #_encode() - with spans
ok 109 should be strictly equal
ok 110 should be strictly equal
ok 111 should be strictly equal
ok 112 should be strictly equal
ok 113 should have a duration >0ms
ok 114 should have a duration <100ms
ok 115 should be deeply equivalent
ok 116 should be deeply equivalent
# #_encode() - dropped spans
ok 117 should be strictly equal
ok 118 should be strictly equal
ok 119 should be strictly equal
ok 120 should be strictly equal
ok 121 should have a duration >0ms
ok 122 should have a duration <100ms
ok 123 should be deeply equivalent
ok 124 should be deeply equivalent
# #_encode() - not sampled
ok 125 should be falsy
ok 126 should be strictly equal
ok 127 should be strictly equal
ok 128 should be strictly equal
ok 129 should be strictly equal
ok 130 should have a duration >0ms
ok 131 should have a duration <100ms
ok 132 should be falsy
# #ids
ok 133 should be loosely deeply equivalent
# #toString()
ok 134 should be strictly equal

1..134
# tests 134
# pass  134

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/apollo-server-express.test.js
TAP version 13
# POST /graphql
ok 1 have active transaction
ok 2 client got the expected response body
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should be truthy
# GET /graphql
ok 12 have active transaction
ok 13 client got the expected response body
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
ok 17 should be strictly equal
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
ok 21 should be strictly equal
ok 22 should be truthy
# POST /graphql - named query
ok 23 have active transaction
ok 24 should be strictly equal
ok 25 should be strictly equal
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
ok 29 should be strictly equal
ok 30 should be strictly equal
ok 31 should be strictly equal
ok 32 should be strictly equal
ok 33 should be truthy
# POST /graphql - sort multiple queries
ok 34 have active transaction
ok 35 have active transaction
ok 36 should be strictly equal
ok 37 should be strictly equal
ok 38 should be strictly equal
ok 39 should be strictly equal
ok 40 should be strictly equal
ok 41 should be strictly equal
ok 42 should be strictly equal
ok 43 should be strictly equal
ok 44 should be strictly equal
ok 45 should be truthy
# POST /graphql - sub-query
ok 46 have active transaction
ok 47 should be strictly equal
ok 48 should be strictly equal
ok 49 should be strictly equal
ok 50 should be strictly equal
ok 51 should be strictly equal
ok 52 should be strictly equal
ok 53 should be strictly equal
ok 54 should be strictly equal
ok 55 should be strictly equal
ok 56 should be truthy

1..56
# tests 56
# pass  56

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/elasticsearch.test.js
TAP version 13
# client.ping with callback
ok 1 no error from client.ping
ok 2 should have 1 transaction
ok 3 should have 2 spans
ok 4 transaction name should be "foo"
ok 5 transaction type should be "custom"
ok 6 should have span with type external
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should have span with subtype elasticsearch
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 include user-land code frame
ok 17 span2 should not have "context.db"
ok 18 should be deeply equivalent
ok 19 http span should start after elasticsearch span
ok 20 http span should end before elasticsearch span
# client.ping with promise
ok 21 should have 1 transaction
ok 22 should have 2 spans
ok 23 transaction name should be "foo"
ok 24 transaction type should be "custom"
ok 25 should have span with type external
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
ok 29 should have span with subtype elasticsearch
ok 30 should be strictly equal
ok 31 should be strictly equal
ok 32 should be strictly equal
ok 33 should be strictly equal
ok 34 should be strictly equal
ok 35 include user-land code frame
ok 36 span2 should not have "context.db"
ok 37 should be deeply equivalent
ok 38 http span should start after elasticsearch span
ok 39 http span should end before elasticsearch span
# client.search with callback
ok 40 undefined
ok 41 should have 1 transaction
ok 42 should have 2 spans
ok 43 transaction name should be "foo"
ok 44 transaction type should be "custom"
ok 45 should have span with type external
ok 46 should be strictly equal
ok 47 should be strictly equal
ok 48 should be strictly equal
ok 49 should have span with subtype elasticsearch
ok 50 should be strictly equal
ok 51 should be strictly equal
ok 52 should be strictly equal
ok 53 should be strictly equal
ok 54 should be strictly equal
ok 55 include user-land code frame
ok 56 should be deeply equivalent
ok 57 should be deeply equivalent
ok 58 http span should start after elasticsearch span
ok 59 http span should end before elasticsearch span
# client.search with abort
ok 60 should have 1 transaction
ok 61 should have 2 spans
ok 62 transaction name should be "foo"
ok 63 transaction type should be "custom"
ok 64 should have span with type external
ok 65 should be strictly equal
ok 66 should be strictly equal
ok 67 should be strictly equal
ok 68 should have span with subtype elasticsearch
ok 69 should be strictly equal
ok 70 should be strictly equal
ok 71 should be strictly equal
ok 72 should be strictly equal
ok 73 should be strictly equal
ok 74 include user-land code frame
ok 75 should be deeply equivalent
ok 76 should be deeply equivalent
ok 77 http span should start after elasticsearch span
ok 78 http span should end after elasticsearch span when req is aborted
# client.searchTemplate with callback
ok 79 undefined
ok 80 should have 1 transaction
ok 81 should have 2 spans
ok 82 transaction name should be "foo"
ok 83 transaction type should be "custom"
ok 84 should have span with type external
ok 85 should be strictly equal
ok 86 should be strictly equal
ok 87 should be strictly equal
ok 88 should have span with subtype elasticsearch
ok 89 should be strictly equal
ok 90 should be strictly equal
ok 91 should be strictly equal
ok 92 should be strictly equal
ok 93 should be strictly equal
ok 94 include user-land code frame
ok 95 should be deeply equivalent
ok 96 should be deeply equivalent
ok 97 http span should start after elasticsearch span
ok 98 http span should end before elasticsearch span
# client.msearch with callback
ok 99 undefined
ok 100 should have 1 transaction
ok 101 should have 2 spans
ok 102 transaction name should be "foo"
ok 103 transaction type should be "custom"
ok 104 should have span with type external
ok 105 should be strictly equal
ok 106 should be strictly equal
ok 107 should be strictly equal
ok 108 should have span with subtype elasticsearch
ok 109 should be strictly equal
ok 110 should be strictly equal
ok 111 should be strictly equal
ok 112 should be strictly equal
ok 113 should be strictly equal
ok 114 include user-land code frame
ok 115 should be deeply equivalent
ok 116 should be deeply equivalent
ok 117 http span should start after elasticsearch span
ok 118 http span should end before elasticsearch span
# client.msearchTempate with callback
ok 119 undefined
ok 120 should have 1 transaction
ok 121 should have 2 spans
ok 122 transaction name should be "foo"
ok 123 transaction type should be "custom"
ok 124 should have span with type external
ok 125 should be strictly equal
ok 126 should be strictly equal
ok 127 should be strictly equal
ok 128 should have span with subtype elasticsearch
ok 129 should be strictly equal
ok 130 should be strictly equal
ok 131 should be strictly equal
ok 132 should be strictly equal
ok 133 should be strictly equal
ok 134 include user-land code frame
ok 135 should be deeply equivalent
ok 136 should be deeply equivalent
ok 137 http span should start after elasticsearch span
ok 138 http span should end before elasticsearch span
# client.count with callback
ok 139 undefined
ok 140 should have 1 transaction
ok 141 should have 2 spans
ok 142 transaction name should be "foo"
ok 143 transaction type should be "custom"
ok 144 should have span with type external
ok 145 should be strictly equal
ok 146 should be strictly equal
ok 147 should be strictly equal
ok 148 should have span with subtype elasticsearch
ok 149 should be strictly equal
ok 150 should be strictly equal
ok 151 should be strictly equal
ok 152 should be strictly equal
ok 153 should be strictly equal
ok 154 include user-land code frame
ok 155 should be deeply equivalent
ok 156 should be deeply equivalent
ok 157 http span should start after elasticsearch span
ok 158 http span should end before elasticsearch span
# client with host=<array of host:port>
ok 159 undefined
ok 160 should have 1 transaction
ok 161 should have 2 spans
ok 162 transaction name should be "foo"
ok 163 transaction type should be "custom"
ok 164 should have span with type external
ok 165 should be strictly equal
ok 166 should be strictly equal
ok 167 should be strictly equal
ok 168 should have span with subtype elasticsearch
ok 169 should be strictly equal
ok 170 should be strictly equal
ok 171 should be strictly equal
ok 172 should be strictly equal
ok 173 should be strictly equal
ok 174 include user-land code frame
ok 175 span2 should not have "context.db"
ok 176 should be deeply equivalent
ok 177 http span should start after elasticsearch span
ok 178 http span should end before elasticsearch span
# client with hosts=<array of host:port>
ok 179 undefined
ok 180 should have 1 transaction
ok 181 should have 2 spans
ok 182 transaction name should be "foo"
ok 183 transaction type should be "custom"
ok 184 should have span with type external
ok 185 should be strictly equal
ok 186 should be strictly equal
ok 187 should be strictly equal
ok 188 should have span with subtype elasticsearch
ok 189 should be strictly equal
ok 190 should be strictly equal
ok 191 should be strictly equal
ok 192 should be strictly equal
ok 193 should be strictly equal
ok 194 include user-land code frame
ok 195 span2 should not have "context.db"
ok 196 should be deeply equivalent
ok 197 http span should start after elasticsearch span
ok 198 http span should end before elasticsearch span
# client with hosts="http://host:port"
ok 199 undefined
ok 200 should have 1 transaction
ok 201 should have 2 spans
ok 202 transaction name should be "foo"
ok 203 transaction type should be "custom"
ok 204 should have span with type external
ok 205 should be strictly equal
ok 206 should be strictly equal
ok 207 should be strictly equal
ok 208 should have span with subtype elasticsearch
ok 209 should be strictly equal
ok 210 should be strictly equal
ok 211 should be strictly equal
ok 212 should be strictly equal
ok 213 should be strictly equal
ok 214 include user-land code frame
ok 215 span2 should not have "context.db"
ok 216 should be deeply equivalent
ok 217 http span should start after elasticsearch span
ok 218 http span should end before elasticsearch span

1..218
# tests 218
# pass  218

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/express-graphql.test.js
TAP version 13
# POST /graphql
ok 1 have active transaction
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should be truthy
# GET /graphql
ok 12 have active transaction
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
ok 17 should be strictly equal
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
ok 21 should be strictly equal
ok 22 should be truthy
# POST /graphql - named query
ok 23 have active transaction
ok 24 should be strictly equal
ok 25 should be strictly equal
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
ok 29 should be strictly equal
ok 30 should be strictly equal
ok 31 should be strictly equal
ok 32 should be strictly equal
ok 33 should be truthy
# POST /graphql - sort multiple queries
ok 34 have active transaction
ok 35 have active transaction
ok 36 should be strictly equal
ok 37 should be strictly equal
ok 38 should be strictly equal
ok 39 should be strictly equal
ok 40 should be strictly equal
ok 41 should be strictly equal
ok 42 should be strictly equal
ok 43 should be strictly equal
ok 44 should be strictly equal
ok 45 should be truthy
# POST /
ok 46 have active transaction
ok 47 should be strictly equal
ok 48 should be strictly equal
ok 49 should be strictly equal
ok 50 should be strictly equal
ok 51 should be strictly equal
ok 52 should be strictly equal
ok 53 should be strictly equal
ok 54 should be strictly equal
ok 55 should be strictly equal
ok 56 should be truthy
# GET /
ok 57 have active transaction
ok 58 should be strictly equal
ok 59 should be strictly equal
ok 60 should be strictly equal
ok 61 should be strictly equal
ok 62 should be strictly equal
ok 63 should be strictly equal
ok 64 should be strictly equal
ok 65 should be strictly equal
ok 66 should be strictly equal
ok 67 should be truthy
# POST / - named query
ok 68 have active transaction
ok 69 should be strictly equal
ok 70 should be strictly equal
ok 71 should be strictly equal
ok 72 should be strictly equal
ok 73 should be strictly equal
ok 74 should be strictly equal
ok 75 should be strictly equal
ok 76 should be strictly equal
ok 77 should be strictly equal
ok 78 should be truthy
# POST / - sort multiple queries
ok 79 have active transaction
ok 80 have active transaction
ok 81 should be strictly equal
ok 82 should be strictly equal
ok 83 should be strictly equal
ok 84 should be strictly equal
ok 85 should be strictly equal
ok 86 should be strictly equal
ok 87 should be strictly equal
ok 88 should be strictly equal
ok 89 should be strictly equal
ok 90 should be truthy

1..90
# tests 90
# pass  90

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/express-queue.test.js
TAP version 13
# express-queue
ok 1 should be strictly equal
# request 1
ok 2 name should be GET /
ok 3 type should be request
ok 4 transaction should have 1 span
ok 5 span name should be foo
ok 6 span name should be bar
ok 7 span should have valid timings
# request 2
ok 8 name should be GET /
ok 9 type should be request
ok 10 transaction should have 1 span
ok 11 span name should be foo
ok 12 span name should be bar
ok 13 span should have valid timings
# request 3
ok 14 name should be GET /
ok 15 type should be request
ok 16 transaction should have 1 span
ok 17 span name should be foo
ok 18 span name should be bar
ok 19 span should have valid timings
# request 4
ok 20 name should be GET /
ok 21 type should be request
ok 22 transaction should have 1 span
ok 23 span name should be foo
ok 24 span name should be bar
ok 25 span should have valid timings
# request 5
ok 26 name should be GET /
ok 27 type should be request
ok 28 transaction should have 1 span
ok 29 span name should be foo
ok 30 span name should be bar
ok 31 span should have valid timings

1..31
# tests 31
# pass  31

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/finalhandler.test.js
TAP version 13
# basic http
ok 1 has the expected error
ok 2 captured data with error
ok 3 captured data has the request object
ok 4 should be strictly equal
ok 5 has a transaction
ok 6 transaction name is GET /
ok 7 transaction type is request
# express done
ok 8 has the expected error
ok 9 captured data with error
ok 10 captured data has the request object
ok 11 should be strictly equal
ok 12 has a transaction
ok 13 transaction name is GET /
ok 14 transaction type is request
# express throw
ok 15 has the expected error
ok 16 captured data with error
ok 17 captured data has the request object
ok 18 should be strictly equal
ok 19 has a transaction
ok 20 transaction name is GET /
ok 21 transaction type is request
# express with error handler
ok 22 has the expected error
ok 23 captured data with error
ok 24 captured data has the request object
ok 25 should be strictly equal
ok 26 has a transaction
ok 27 transaction name is GET /
ok 28 transaction type is request

1..28
# tests 28
# pass  28

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/generic-pool.test.js
TAP version 13
# v3.x
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal

1..6
# tests 6
# pass  6

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/graphql.test.js
TAP version 13
# graphql.graphql
ok 1 should be loosely deeply equivalent
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should be truthy
# graphql.graphql - invalid query
ok 11 should be deeply equivalent
ok 12 should have one error
ok 13 should return a sytax error
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
ok 17 should be strictly equal
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
ok 21 should be strictly equal
ok 22 should be truthy
# graphql.graphql - transaction ended
ok 23 should be strictly equal
ok 24 should be strictly equal
ok 25 should be strictly equal
ok 26 should be strictly equal
ok 27 should be loosely deeply equivalent
# graphql.execute
ok 28 should be loosely deeply equivalent
ok 29 should be strictly equal
ok 30 should be strictly equal
ok 31 should be strictly equal
ok 32 should be strictly equal
ok 33 should be strictly equal
ok 34 should be strictly equal
ok 35 should be strictly equal
ok 36 should be strictly equal
ok 37 should be truthy
# graphql.execute - transaction ended
ok 38 should be strictly equal
ok 39 should be strictly equal
ok 40 should be strictly equal
ok 41 should be strictly equal
ok 42 should be loosely deeply equivalent
# graphql.execute args object
ok 43 should be loosely deeply equivalent
ok 44 should be strictly equal
ok 45 should be strictly equal
ok 46 should be strictly equal
ok 47 should be strictly equal
ok 48 should be strictly equal
ok 49 should be strictly equal
ok 50 should be strictly equal
ok 51 should be strictly equal
ok 52 should be truthy
# graphql.execute sync
ok 53 should be loosely deeply equivalent
ok 54 should be strictly equal
ok 55 should be strictly equal
ok 56 should be strictly equal
ok 57 should be strictly equal
ok 58 should be strictly equal
ok 59 should be strictly equal
ok 60 should be strictly equal
ok 61 should be strictly equal
ok 62 should be truthy

1..62
# tests 62
# pass  62

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/handlebars.test.js
TAP version 13
# handlebars compile and render
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be truthy
ok 4 should be strictly equal
ok 5 should have span of action compile
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 include user-land code frame
ok 10 should have span of action render
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 include user-land code frame

1..14
# tests 14
# pass  14

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/http2.test.js
TAP version 13
# http2.createServer compatibility mode
# NODE_OPTIONS= --openssl-config=/app/test/openssl-config-for-testing.cnf --require /app/node_modules/node-preload/preload-path/node-preload.js
ok 1 have current transaction
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be truthy
ok 6 should be truthy
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 trans.result is "HTTP 2xx"
ok 10 trans.outcome is success
ok 11 should be truthy
ok 12 should be truthy
ok 13 transaction.context.request.socket.remote_address is as expected: ::ffff:127.0.0.1
ok 14 trans.context.request is as expected
ok 15 trans.context.response is as expected
ok 16 should have expected body
# http2.createServer stream respond
ok 17 have current transaction
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
ok 21 should be truthy
ok 22 should be truthy
ok 23 should be strictly equal
ok 24 should be strictly equal
ok 25 trans.result is "HTTP 2xx"
ok 26 trans.outcome is success
ok 27 should be truthy
ok 28 should be truthy
ok 29 transaction.context.request.socket.remote_address is as expected: ::ffff:127.0.0.1
ok 30 trans.context.request is as expected
ok 31 trans.context.response is as expected
ok 32 should have expected body
# http2.createServer stream respondWithFD
ok 33 have current transaction
ok 34 should be strictly equal
ok 35 null
ok 36 should be strictly equal
ok 37 should be strictly equal
ok 38 should be truthy
ok 39 should be truthy
ok 40 should be strictly equal
ok 41 should be strictly equal
ok 42 trans.result is "HTTP 2xx"
ok 43 trans.outcome is success
ok 44 should be truthy
ok 45 should be truthy
ok 46 transaction.context.request.socket.remote_address is as expected: ::ffff:127.0.0.1
ok 47 trans.context.request is as expected
ok 48 trans.context.response is as expected
ok 49 should have expected body
# http2.createServer stream respondWithFile
ok 50 have current transaction
ok 51 should be strictly equal
ok 52 should be strictly equal
ok 53 should be strictly equal
ok 54 should be truthy
ok 55 should be truthy
ok 56 should be strictly equal
ok 57 should be strictly equal
ok 58 trans.result is "HTTP 2xx"
ok 59 trans.outcome is success
ok 60 should be truthy
ok 61 should be truthy
ok 62 transaction.context.request.socket.remote_address is as expected: ::ffff:127.0.0.1
ok 63 trans.context.request is as expected
ok 64 trans.context.response is as expected
ok 65 should have expected body
# http2.createServer ignore push streams
ok 66 have current transaction
ok 67 should be strictly equal
ok 68 null
ok 69 should be strictly equal
ok 70 should be strictly equal
ok 71 should be truthy
ok 72 should be truthy
ok 73 should be strictly equal
ok 74 should be strictly equal
ok 75 trans.result is "HTTP 2xx"
ok 76 trans.outcome is success
ok 77 should be truthy
ok 78 should be truthy
ok 79 transaction.context.request.socket.remote_address is as expected: ::ffff:127.0.0.1
ok 80 trans.context.request is as expected
ok 81 trans.context.response is as expected
ok 82 should be strictly equal
ok 83 should have expected body
ok 84 should have expected body
ok 85 should have called function
ok 86 should have called function
# http2.request
ok 87 have current transaction
ok 88 should be strictly equal
ok 89 have current transaction
ok 90 should be strictly equal
ok 91 should be strictly equal
ok 92 should be strictly equal
ok 93 should be truthy
ok 94 should be truthy
ok 95 should be strictly equal
ok 96 should be strictly equal
ok 97 trans.result is "HTTP 2xx"
ok 98 trans.outcome is success
ok 99 should be truthy
ok 100 should be truthy
ok 101 transaction.context.request.socket.remote_address is as expected: ::ffff:127.0.0.1
ok 102 trans.context.request is as expected
ok 103 trans.context.response is as expected
ok 104 should be truthy
ok 105 should be truthy
ok 106 should be strictly equal
ok 107 should be strictly equal
ok 108 trans.result is "HTTP 2xx"
ok 109 trans.outcome is success
ok 110 should be truthy
ok 111 should be truthy
ok 112 transaction.context.request.socket.remote_address is as expected: ::ffff:127.0.0.1
ok 113 trans.context.request is as expected
ok 114 trans.context.response is as expected
ok 115 root transaction should have span
ok 116 should be strictly equal
ok 117 should be strictly equal
ok 118 should be strictly equal
ok 119 should be strictly equal
ok 120 should be deeply equivalent
ok 121 should be deeply equivalent
ok 122 should have expected body
# http2.createSecureServer compatibility mode
# NODE_OPTIONS= --openssl-config=/app/test/openssl-config-for-testing.cnf --require /app/node_modules/node-preload/preload-path/node-preload.js
ok 123 have current transaction
ok 124 should be strictly equal
ok 125 should be strictly equal
ok 126 should be strictly equal
ok 127 should be truthy
ok 128 should be truthy
ok 129 should be strictly equal
ok 130 should be strictly equal
ok 131 trans.result is "HTTP 2xx"
ok 132 trans.outcome is success
ok 133 should be truthy
ok 134 should be truthy
ok 135 transaction.context.request.socket.remote_address is as expected: ::ffff:127.0.0.1
ok 136 trans.context.request is as expected
ok 137 trans.context.response is as expected
ok 138 should have expected body
# http2.createSecureServer stream respond
ok 139 have current transaction
ok 140 should be strictly equal
ok 141 should be strictly equal
ok 142 should be strictly equal
ok 143 should be truthy
ok 144 should be truthy
ok 145 should be strictly equal
ok 146 should be strictly equal
ok 147 trans.result is "HTTP 2xx"
ok 148 trans.outcome is success
ok 149 should be truthy
ok 150 should be truthy
ok 151 transaction.context.request.socket.remote_address is as expected: ::ffff:127.0.0.1
ok 152 trans.context.request is as expected
ok 153 trans.context.response is as expected
ok 154 should have expected body
# http2.createSecureServer stream respondWithFD
ok 155 have current transaction
ok 156 should be strictly equal
ok 157 null
ok 158 should be strictly equal
ok 159 should be strictly equal
ok 160 should be truthy
ok 161 should be truthy
ok 162 should be strictly equal
ok 163 should be strictly equal
ok 164 trans.result is "HTTP 2xx"
ok 165 trans.outcome is success
ok 166 should be truthy
ok 167 should be truthy
ok 168 transaction.context.request.socket.remote_address is as expected: ::ffff:127.0.0.1
ok 169 trans.context.request is as expected
ok 170 trans.context.response is as expected
ok 171 should have expected body
# http2.createSecureServer stream respondWithFile
ok 172 have current transaction
ok 173 should be strictly equal
ok 174 should be strictly equal
ok 175 should be strictly equal
ok 176 should be truthy
ok 177 should be truthy
ok 178 should be strictly equal
ok 179 should be strictly equal
ok 180 trans.result is "HTTP 2xx"
ok 181 trans.outcome is success
ok 182 should be truthy
ok 183 should be truthy
ok 184 transaction.context.request.socket.remote_address is as expected: ::ffff:127.0.0.1
ok 185 trans.context.request is as expected
ok 186 trans.context.response is as expected
ok 187 should have expected body
# http2.createSecureServer ignore push streams
ok 188 have current transaction
ok 189 should be strictly equal
ok 190 null
ok 191 should be strictly equal
ok 192 should be strictly equal
ok 193 should be truthy
ok 194 should be truthy
ok 195 should be strictly equal
ok 196 should be strictly equal
ok 197 trans.result is "HTTP 2xx"
ok 198 trans.outcome is success
ok 199 should be truthy
ok 200 should be truthy
ok 201 transaction.context.request.socket.remote_address is as expected: ::ffff:127.0.0.1
ok 202 trans.context.request is as expected
ok 203 trans.context.response is as expected
ok 204 should be strictly equal
ok 205 should have expected body
ok 206 should have expected body
ok 207 should have called function
ok 208 should have called function
# http2.request secure
ok 209 have current transaction
ok 210 should be strictly equal
ok 211 have current transaction
ok 212 should be strictly equal
ok 213 should be strictly equal
ok 214 should be strictly equal
ok 215 should be truthy
ok 216 should be truthy
ok 217 should be strictly equal
ok 218 should be strictly equal
ok 219 trans.result is "HTTP 2xx"
ok 220 trans.outcome is success
ok 221 should be truthy
ok 222 should be truthy
ok 223 transaction.context.request.socket.remote_address is as expected: ::ffff:127.0.0.1
ok 224 trans.context.request is as expected
ok 225 trans.context.response is as expected
ok 226 should be truthy
ok 227 should be truthy
ok 228 should be strictly equal
ok 229 should be strictly equal
ok 230 trans.result is "HTTP 2xx"
ok 231 trans.outcome is success
ok 232 should be truthy
ok 233 should be truthy
ok 234 transaction.context.request.socket.remote_address is as expected: ::ffff:127.0.0.1
ok 235 trans.context.request is as expected
ok 236 trans.context.response is as expected
ok 237 root transaction should have span
ok 238 should be strictly equal
ok 239 should be strictly equal
ok 240 should be strictly equal
ok 241 should be strictly equal
ok 242 should be deeply equivalent
ok 243 should be deeply equivalent
ok 244 should have expected body
# handling HTTP/1.1 request to http2.createSecureServer with allowHTTP1:true
# NODE_OPTIONS= --openssl-config=/app/test/openssl-config-for-testing.cnf --require /app/node_modules/node-preload/preload-path/node-preload.js
ok 245 have current transaction
ok 246 should be strictly equal
ok 247 got just the one data event
ok 248 should have expected body
ok 249 got the transaction
ok 250 should be truthy
ok 251 should be truthy
ok 252 should be strictly equal
ok 253 should be strictly equal
ok 254 trans.result
ok 255 trans.outcome
ok 256 should be truthy
ok 257 should be truthy
ok 258 transaction.context.request.socket.remote_address is as expected: ::ffff:127.0.0.1
ok 259 trans.context.request is as expected
ok 260 trans.context.response is as expected

1..260
# tests 260
# pass  260

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/ioredis.test.js
TAP version 13
# not nested
ok 1 null
ok 2 should be strictly equal
ok 3 null
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 null
ok 7 should be deeply equivalent
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 span.name
ok 15 span.type
ok 16 span.subtype
ok 17 span.context.destination
ok 18 span is a child of the transaction
ok 19 span.name
ok 20 span.type
ok 21 span.subtype
ok 22 span.context.destination
ok 23 span is a child of the transaction
ok 24 span.name
ok 25 span.type
ok 26 span.subtype
ok 27 span.context.destination
ok 28 span is a child of the transaction
ok 29 span.name
ok 30 span.type
ok 31 span.subtype
ok 32 span.context.destination
ok 33 span is a child of the transaction
ok 34 span.name
ok 35 span.type
ok 36 span.subtype
ok 37 span.context.destination
ok 38 span is a child of the transaction
ok 39 span.name
ok 40 span.type
ok 41 span.subtype
ok 42 span.context.destination
ok 43 span is a child of the transaction
ok 44 span.name
ok 45 span.type
ok 46 span.subtype
ok 47 span.context.destination
ok 48 span is a child of the transaction
ok 49 span.name
ok 50 span.type
ok 51 span.subtype
ok 52 span.context.destination
ok 53 span is a child of the transaction
# nested
ok 54 null
ok 55 should be strictly equal
ok 56 null
ok 57 should be strictly equal
ok 58 should be strictly equal
ok 59 null
ok 60 should be deeply equivalent
ok 61 should be strictly equal
ok 62 should be strictly equal
ok 63 should be strictly equal
ok 64 should be strictly equal
ok 65 should be strictly equal
ok 66 should be strictly equal
ok 67 span.name
ok 68 span.type
ok 69 span.subtype
ok 70 span.context.destination
ok 71 span is a child of the transaction
ok 72 span.name
ok 73 span.type
ok 74 span.subtype
ok 75 span.context.destination
ok 76 span is a child of the transaction
ok 77 span.name
ok 78 span.type
ok 79 span.subtype
ok 80 span.context.destination
ok 81 span is a child of the transaction
ok 82 span.name
ok 83 span.type
ok 84 span.subtype
ok 85 span.context.destination
ok 86 span is a child of the transaction
ok 87 span.name
ok 88 span.type
ok 89 span.subtype
ok 90 span.context.destination
ok 91 span is a child of the transaction
ok 92 span.name
ok 93 span.type
ok 94 span.subtype
ok 95 span.context.destination
ok 96 span is a child of the transaction
ok 97 span.name
ok 98 span.type
ok 99 span.subtype
ok 100 span.context.destination
ok 101 span is a child of the transaction
ok 102 span.name
ok 103 span.type
ok 104 span.subtype
ok 105 span.context.destination
ok 106 span is a child of the transaction
# error capture, no unhandledRejection on command error is introduced
ok 107 should be truthy
{"log.level":"info","@timestamp":"2021-11-25T13:01:32.045Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"255b195bc52dcfff855fa892aa993920\"}"}
ok 108 captured 1 error
ok 109 exception.type
ok 110 error.transaction_id
ok 111 error.parent_id, the error is a child of the erroring span
ok 112 should be falsy

1..112
# tests 112
# pass  112

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/jade.test.js
TAP version 13
# jade compile and render
ok 1 compiled string should be Hello,world!
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be truthy
ok 5 should be strictly equal
ok 6 should have span of action compile
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 include user-land code frame
ok 11 should have span of action render
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 include user-land code frame

1..15
# tests 15
# pass  15

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/memcached.test.js
TAP version 13
# memcached
ok 1 undefined
ok 2 undefined
ok 3 should be strictly equal
ok 4 undefined
ok 5 undefined
ok 6 should be strictly equal
ok 7 undefined
ok 8 undefined
ok 9 undefined
ok 10 should be strictly equal
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
ok 17 should be strictly equal
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
ok 21 should be strictly equal
ok 22 should be strictly equal
ok 23 should be strictly equal
ok 24 should be strictly equal
ok 25 should be strictly equal
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
ok 29 should be strictly equal
ok 30 should be strictly equal
ok 31 should be strictly equal
ok 32 should be strictly equal
ok 33 should be strictly equal
ok 34 should be strictly equal
ok 35 should be strictly equal
ok 36 should be strictly equal
ok 37 should be strictly equal
ok 38 should be strictly equal
ok 39 should be strictly equal
ok 40 should be strictly equal
ok 41 should be strictly equal
ok 42 should be strictly equal
ok 43 should be strictly equal
ok 44 should be strictly equal
ok 45 should be strictly equal
ok 46 should be strictly equal
ok 47 should be strictly equal
ok 48 should be deeply equivalent
ok 49 should be deeply equivalent
ok 50 should be deeply equivalent
ok 51 should be deeply equivalent
ok 52 should be deeply equivalent
ok 53 should be deeply equivalent
ok 54 should be deeply equivalent
ok 55 span is a child of the transaction
ok 56 span is a child of the transaction
ok 57 span is a child of the transaction
ok 58 span is a child of the transaction
ok 59 span is a child of the transaction
ok 60 span is a child of the transaction
ok 61 span is a child of the transaction

1..61
# tests 61
# pass  61

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/mimic-response.test.js
TAP version 13
# none bound
ok 1 target -> onData should be bound to target stream
ok 2 should be strictly equal
# source bound
ok 3 target -> onData should be bound to target stream
ok 4 should be strictly equal
# target bound
ok 5 target -> onData should be bound to target stream
ok 6 should be strictly equal
# both bound
ok 7 target -> onData should be bound to target stream
ok 8 should be strictly equal

1..8
# tests 8
# pass  8

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/mongodb-core.test.js
TAP version 13
# instrument simple command
ok 1 null
ok 2 should be strictly equal
ok 3 null
ok 4 should be strictly equal
ok 5 null
ok 6 should be strictly equal
ok 7 null
ok 8 should be strictly equal
ok 9 null
ok 10 should be strictly equal
ok 11 null
ok 12 should be strictly equal
ok 13 null
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
ok 17 should be strictly equal
ok 18 captured span has expected name: system.$cmd.ismaster
ok 19 span has expected type
ok 20 span has expected subtype
ok 21 span has expected action
ok 22 span ends (1637845300788.229ms) before the transaction (1637845300835.9282ms)
ok 23 captured span has expected name: elasticapm.test.insert
ok 24 span has expected type
ok 25 span has expected subtype
ok 26 span has expected action
ok 27 span ends (1637845300812.174ms) before the transaction (1637845300835.9282ms)
ok 28 captured span has expected name: elasticapm.test.update
ok 29 span has expected type
ok 30 span has expected subtype
ok 31 span has expected action
ok 32 span ends (1637845300824.107ms) before the transaction (1637845300835.9282ms)
ok 33 captured span has expected name: elasticapm.test.remove
ok 34 span has expected type
ok 35 span has expected subtype
ok 36 span has expected action
ok 37 span ends (1637845300827.2278ms) before the transaction (1637845300835.9282ms)
ok 38 captured span has expected name: elasticapm.test.find
ok 39 span has expected type
ok 40 span has expected subtype
ok 41 span has expected action
ok 42 span ends (1637845300832.374ms) before the transaction (1637845300835.9282ms)
ok 43 captured span has expected name: system.$cmd.ismaster
ok 44 span has expected type
ok 45 span has expected subtype
ok 46 span has expected action
ok 47 span ends (1637845300835.363ms) before the transaction (1637845300835.9282ms)

1..47
# tests 47
# pass  47

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/mongodb.test.js
TAP version 13
# instrument simple command
ok 1 no connect error
ok 2 got a valid server connection
ok 3 no insert error
ok 4 inserted three records
ok 5 found valid span
ok 6 span name is "elasticapm.test.insert"
ok 7 span type is "db"
ok 8 span subtype is "mongodb"
ok 9 span action is "query"
ok 10 context.destination.address is defined
ok 11 span.context.destination
ok 12 no update error
ok 13 updated one record
ok 14 found valid span
ok 15 span name is "elasticapm.test.update"
ok 16 span type is "db"
ok 17 span subtype is "mongodb"
ok 18 span action is "query"
ok 19 context.destination.address is defined
ok 20 span.context.destination
ok 21 no delete error
ok 22 deleted one record
ok 23 found valid span
ok 24 span name is "elasticapm.test.delete"
ok 25 span type is "db"
ok 26 span subtype is "mongodb"
ok 27 span action is "query"
ok 28 context.destination.address is defined
ok 29 span.context.destination
ok 30 no cursor next error
ok 31 found record #2
ok 32 no cursor next error
ok 33 found record #3
ok 34 transaction name is "foo"
ok 35 transaction type is "bar"
ok 36 transaction result is "success"
ok 37 found valid span
ok 38 span name is "elasticapm.test.find"
ok 39 span type is "db"
ok 40 span subtype is "mongodb"
ok 41 span action is "query"
ok 42 context.destination.address is defined
ok 43 span.context.destination

1..43
# tests 43
# pass  43

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/pug.test.js
TAP version 13
# pug compile and render
ok 1 compiled string should be Hello,world!
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be truthy
ok 5 should be strictly equal
ok 6 should have span of action compile
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 include user-land code frame
ok 11 should have span of action render
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 include user-land code frame

1..15
# tests 15
# pass  15

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/redis.test.js
TAP version 13
# redis
ok 1 no flushall error
ok 2 reply is OK
ok 3 null
ok 4 reply is OK
ok 5 no hset error
ok 6 hset reply is 1
ok 7 no hset error
ok 8 hset reply is 1
ok 9 no hkeys error
ok 10 got two replies
ok 11 reply 0 value
ok 12 reply 1 value
ok 13 done 4 callbacks
ok 14 have 2 transactions
ok 15 have "transBeforeClient" transaction
ok 16 there are no non-INFO spans in the "transBeforeClient" transaction
ok 17 have "transAfterClient" transaction
ok 18 trans.result
ok 19 have the expected number of spans
ok 20 span.transaction_id
ok 21 span.name
ok 22 span.type
ok 23 span.subtype
ok 24 span.context.destination
ok 25 span is a child of the transaction
ok 26 span ended before transaction ended
ok 27 span.transaction_id
ok 28 span.name
ok 29 span.type
ok 30 span.subtype
ok 31 span.context.destination
ok 32 span is a child of the transaction
ok 33 span ended before transaction ended
ok 34 span.transaction_id
ok 35 span.name
ok 36 span.type
ok 37 span.subtype
ok 38 span.context.destination
ok 39 span is a child of the transaction
ok 40 span ended before transaction ended
ok 41 span.transaction_id
ok 42 span.name
ok 43 span.type
ok 44 span.subtype
ok 45 span.context.destination
ok 46 span is a child of the transaction
ok 47 span ended before transaction ended
ok 48 span.transaction_id
ok 49 span.name
ok 50 span.type
ok 51 span.subtype
ok 52 span.context.destination
ok 53 span is a child of the transaction
ok 54 span ended before transaction ended
ok 55 span.transaction_id
ok 56 span.name
ok 57 span.type
ok 58 span.subtype
ok 59 span.context.destination
ok 60 span is a child of the transaction
ok 61 span ended before transaction ended
# redis client error
ok 62 got error from client.set
ok 63 error.name
ok 64 no reply
{"log.level":"info","@timestamp":"2021-11-25T13:01:49.497Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"f598a54c5564480b5e6892b7da9c9039\"}"}
ok 65 got 1 transaction
ok 66 got 1 span
ok 67 got 1 error
ok 68 span.name
ok 69 span.parent_id
ok 70 span.outcome
ok 71 error.transaction_id
ok 72 error.parent_id, error is a child of the failing span
ok 73 error.exception.type
# client.cmd(...) call signatures
ok 74 myCb was called the expected number of times
ok 75 got 1 transaction
ok 76 got the expected span names

1..76
# tests 76
# pass  76

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/tedious.test.js
TAP version 13
# execSql
ok 1 column value
ok 2 no error
ok 3 row count
ok 4 transaction count
ok 5 span count
ok 6 transaction name
ok 7 span name
ok 8 span type
ok 9 span subtype
ok 10 span action
ok 11 span db context
ok 12 span destination context
# prepare / execute
ok 13 column value
ok 14 no error
ok 15 row count
ok 16 transaction count
ok 17 span count
ok 18 transaction name
ok 19 span name
ok 20 span type
ok 21 span subtype
ok 22 span action
ok 23 span db context
ok 24 span destination context
ok 25 span name
ok 26 span type
ok 27 span subtype
ok 28 span action
ok 29 span db context
ok 30 span destination context

1..30
# tests 30
# pass  30

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/ws.test.js
TAP version 13
# ws.send
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should be truthy

1..10
# tests 10
# pass  10

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/@elastic/elasticsearch-canary.test.js
TAP version 13
# client.ping with promise
ok 1 should have 1 transaction
ok 2 should have expected transaction name
ok 3 should have expected transaction type
ok 4 should have 2 spans (excluding product check spans in >=7.14.0)
ok 5 have an elasticsearch span
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 span.sync=false
ok 10 have an http span
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 span.sync=false
ok 15 http span should have expected name
ok 16 elasticsearch span should have expected name
ok 17 elasticsearch span should not have .context.db
ok 18 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 19 http span should start after elasticsearch span
ok 20 http span should end before elasticsearch span
# client.search with promise
ok 21 should have 1 transaction
ok 22 should have expected transaction name
ok 23 should have expected transaction type
ok 24 should have 2 spans (excluding product check spans in >=7.14.0)
ok 25 have an elasticsearch span
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
ok 29 span.sync=false
ok 30 have an http span
ok 31 should be strictly equal
ok 32 should be strictly equal
ok 33 should be strictly equal
ok 34 span.sync=false
ok 35 http span should have expected name
ok 36 elasticsearch span should have expected name
ok 37 elasticsearch span has correct .context.db
ok 38 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 39 http span should start after elasticsearch span
ok 40 http span should end before elasticsearch span
# client.child
ok 41 should have 1 transaction
ok 42 should have expected transaction name
ok 43 should have expected transaction type
ok 44 should have 2 spans (excluding product check spans in >=7.14.0)
ok 45 have an elasticsearch span
ok 46 should be strictly equal
ok 47 should be strictly equal
ok 48 should be strictly equal
ok 49 span.sync=false
ok 50 have an http span
ok 51 should be strictly equal
ok 52 should be strictly equal
ok 53 should be strictly equal
ok 54 span.sync=false
ok 55 http span should have expected name
ok 56 elasticsearch span should have expected name
ok 57 elasticsearch span has correct .context.db
ok 58 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 59 http span should start after elasticsearch span
ok 60 http span should end before elasticsearch span
# client.search with queryparam
ok 61 should have 1 transaction
ok 62 should have expected transaction name
ok 63 should have expected transaction type
ok 64 should have 2 spans (excluding product check spans in >=7.14.0)
ok 65 have an elasticsearch span
ok 66 should be strictly equal
ok 67 should be strictly equal
ok 68 should be strictly equal
ok 69 span.sync=false
ok 70 have an http span
ok 71 should be strictly equal
ok 72 should be strictly equal
ok 73 should be strictly equal
ok 74 span.sync=false
ok 75 http span should have expected name
ok 76 elasticsearch span should have expected name
ok 77 elasticsearch span has correct .context.db
ok 78 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 79 http span should start after elasticsearch span
ok 80 http span should end before elasticsearch span
# client.search with body
ok 81 should have 1 transaction
ok 82 should have expected transaction name
ok 83 should have expected transaction type
ok 84 should have 2 spans (excluding product check spans in >=7.14.0)
ok 85 have an elasticsearch span
ok 86 should be strictly equal
ok 87 should be strictly equal
ok 88 should be strictly equal
ok 89 span.sync=false
ok 90 have an http span
ok 91 should be strictly equal
ok 92 should be strictly equal
ok 93 should be strictly equal
ok 94 span.sync=false
ok 95 http span should have expected name
ok 96 elasticsearch span should have expected name
ok 97 elasticsearch span has correct .context.db
ok 98 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 99 http span should start after elasticsearch span
ok 100 http span should end before elasticsearch span
# client.search with query as top-level param (v8)
ok 101 should have 1 transaction
ok 102 should have expected transaction name
ok 103 should have expected transaction type
ok 104 should have 2 spans (excluding product check spans in >=7.14.0)
ok 105 have an elasticsearch span
ok 106 should be strictly equal
ok 107 should be strictly equal
ok 108 should be strictly equal
ok 109 span.sync=false
ok 110 have an http span
ok 111 should be strictly equal
ok 112 should be strictly equal
ok 113 should be strictly equal
ok 114 span.sync=false
ok 115 http span should have expected name
ok 116 elasticsearch span should have expected name
ok 117 elasticsearch span has correct .context.db
ok 118 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 119 http span should start after elasticsearch span
ok 120 http span should end before elasticsearch span
# client.search with body & queryparams
ok 121 should have 1 transaction
ok 122 should have expected transaction name
ok 123 should have expected transaction type
ok 124 should have 2 spans (excluding product check spans in >=7.14.0)
ok 125 have an elasticsearch span
ok 126 should be strictly equal
ok 127 should be strictly equal
ok 128 should be strictly equal
ok 129 span.sync=false
ok 130 have an http span
ok 131 should be strictly equal
ok 132 should be strictly equal
ok 133 should be strictly equal
ok 134 span.sync=false
ok 135 http span should have expected name
ok 136 elasticsearch span should have expected name
ok 137 elasticsearch span has correct .context.db
ok 138 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 139 http span should start after elasticsearch span
ok 140 http span should end before elasticsearch span
# client.searchTemplate
ok 141 should have 1 transaction
ok 142 should have expected transaction name
ok 143 should have expected transaction type
ok 144 should have 2 spans (excluding product check spans in >=7.14.0)
ok 145 have an elasticsearch span
ok 146 should be strictly equal
ok 147 should be strictly equal
ok 148 should be strictly equal
ok 149 span.sync=false
ok 150 have an http span
ok 151 should be strictly equal
ok 152 should be strictly equal
ok 153 should be strictly equal
ok 154 span.sync=false
ok 155 http span should have expected name
ok 156 elasticsearch span should have expected name
ok 157 elasticsearch span has correct .context.db
ok 158 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 159 http span should start after elasticsearch span
ok 160 http span should end before elasticsearch span
# client.msearch
ok 161 should have 1 transaction
ok 162 should have expected transaction name
ok 163 should have expected transaction type
ok 164 should have 2 spans (excluding product check spans in >=7.14.0)
ok 165 have an elasticsearch span
ok 166 should be strictly equal
ok 167 should be strictly equal
ok 168 should be strictly equal
ok 169 span.sync=false
ok 170 have an http span
ok 171 should be strictly equal
ok 172 should be strictly equal
ok 173 should be strictly equal
ok 174 span.sync=false
ok 175 http span should have expected name
ok 176 elasticsearch span should have expected name
ok 177 elasticsearch span has correct .context.db
ok 178 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 179 http span should start after elasticsearch span
ok 180 http span should end before elasticsearch span
# client.msearchTempate
ok 181 should have 1 transaction
ok 182 should have expected transaction name
ok 183 should have expected transaction type
ok 184 should have 2 spans (excluding product check spans in >=7.14.0)
ok 185 have an elasticsearch span
ok 186 should be strictly equal
ok 187 should be strictly equal
ok 188 should be strictly equal
ok 189 span.sync=false
ok 190 have an http span
ok 191 should be strictly equal
ok 192 should be strictly equal
ok 193 should be strictly equal
ok 194 span.sync=false
ok 195 http span should have expected name
ok 196 elasticsearch span should have expected name
ok 197 elasticsearch span has correct .context.db
ok 198 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 199 http span should start after elasticsearch span
ok 200 http span should end before elasticsearch span
# ResponseError
ok 201 got an error from search callback
ok 202 error name is "ResponseError"
{"log.level":"info","@timestamp":"2021-11-25T13:01:59.671Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"cc958055cb86c061b57c490a923b8084\"}"}
ok 203 sent an error to APM server
ok 204 err.id
ok 205 err.exception.message
ok 206 err.exception.type is ResponseError
ok 207 should be strictly equal
ok 208 should be deeply equivalent
# ProductNotSupportedError
ok 209 got an error from search callback
ok 210 error name is "ProductNotSupportedError"
{"log.level":"info","@timestamp":"2021-11-25T13:01:59.898Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"0a59b5a06048ee8f3b6b824bbcc4e3ff\"}"}
ok 211 sent an error to APM server
ok 212 err.id
ok 213 got err.exception.message: The client noticed that the server is not Elasticsearch and we do not support this unknown product.
ok 214 err.exception.type is ProductNotSupportedError
# AbortController signal works
ok 215 got an error from search callback
ok 216 error name is "RequestAbortedError"
{"log.level":"info","@timestamp":"2021-11-25T13:02:00.116Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"b8e59b217ec3221fcdf4fd229493de1c\"}"}
ok 217 have an elasticsearch span
ok 218 sent an error to APM server
ok 219 err.id
ok 220 err.exception.message
ok 221 err.exception.type is RequestAbortedError
# outcome=success on both spans
ok 222 spans outcomes are success
ok 223 spans outcomes are success
# outcome=failure on both spans
ok 224 got an error from search with bogus "notaparam"
{"log.level":"info","@timestamp":"2021-11-25T13:02:00.546Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"c1db41f12377941674429aa80cbbd41d\"}"}
ok 225 spans outcomes are failure
ok 226 spans outcomes are failure

1..226
# tests 226
# pass  226

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/@elastic/elasticsearch.test.js
TAP version 13
# client.ping with promise
ok 1 should have 1 transaction
ok 2 should have expected transaction name
ok 3 should have expected transaction type
ok 4 have >=7.14.0 product check ES span
ok 5 product check ES span name
ok 6 have >=7.14.0 product check HTTP span
ok 7 product check HTTP span name
ok 8 should have 2 spans (excluding product check spans in >=7.14.0)
ok 9 have an elasticsearch span
ok 10 should be strictly equal
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 span.sync=false
ok 14 have an http span
ok 15 should be strictly equal
ok 16 should be strictly equal
ok 17 should be strictly equal
ok 18 span.sync=false
ok 19 http span should have expected name
ok 20 elasticsearch span should have expected name
ok 21 elasticsearch span should not have .context.db
ok 22 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 23 http span should start after elasticsearch span
ok 24 http span should end before elasticsearch span
# client.ping with callback
ok 25 null
ok 26 should have 1 transaction
ok 27 should have expected transaction name
ok 28 should have expected transaction type
ok 29 have >=7.14.0 product check ES span
ok 30 product check ES span name
ok 31 have >=7.14.0 product check HTTP span
ok 32 product check HTTP span name
ok 33 should have 2 spans (excluding product check spans in >=7.14.0)
ok 34 have an elasticsearch span
ok 35 should be strictly equal
ok 36 should be strictly equal
ok 37 should be strictly equal
ok 38 span.sync=false
ok 39 have an http span
ok 40 should be strictly equal
ok 41 should be strictly equal
ok 42 should be strictly equal
ok 43 span.sync=false
ok 44 http span should have expected name
ok 45 elasticsearch span should have expected name
ok 46 elasticsearch span should not have .context.db
ok 47 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 48 http span should start after elasticsearch span
ok 49 http span should end before elasticsearch span
# client.search with promise
ok 50 should have 1 transaction
ok 51 should have expected transaction name
ok 52 should have expected transaction type
ok 53 have >=7.14.0 product check ES span
ok 54 product check ES span name
ok 55 have >=7.14.0 product check HTTP span
ok 56 product check HTTP span name
ok 57 should have 2 spans (excluding product check spans in >=7.14.0)
ok 58 have an elasticsearch span
ok 59 should be strictly equal
ok 60 should be strictly equal
ok 61 should be strictly equal
ok 62 span.sync=false
ok 63 have an http span
ok 64 should be strictly equal
ok 65 should be strictly equal
ok 66 should be strictly equal
ok 67 span.sync=false
ok 68 http span should have expected name
ok 69 elasticsearch span should have expected name
ok 70 elasticsearch span has correct .context.db
ok 71 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 72 http span should start after elasticsearch span
ok 73 http span should end before elasticsearch span
# client.child
ok 74 should have 1 transaction
ok 75 should have expected transaction name
ok 76 should have expected transaction type
ok 77 have >=7.14.0 product check ES span
ok 78 product check ES span name
ok 79 have >=7.14.0 product check HTTP span
ok 80 product check HTTP span name
ok 81 should have 2 spans (excluding product check spans in >=7.14.0)
ok 82 have an elasticsearch span
ok 83 should be strictly equal
ok 84 should be strictly equal
ok 85 should be strictly equal
ok 86 span.sync=false
ok 87 have an http span
ok 88 should be strictly equal
ok 89 should be strictly equal
ok 90 should be strictly equal
ok 91 span.sync=false
ok 92 http span should have expected name
ok 93 elasticsearch span should have expected name
ok 94 elasticsearch span has correct .context.db
ok 95 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 96 http span should start after elasticsearch span
ok 97 http span should end before elasticsearch span
# client.search with queryparam
ok 98 should have 1 transaction
ok 99 should have expected transaction name
ok 100 should have expected transaction type
ok 101 have >=7.14.0 product check ES span
ok 102 product check ES span name
ok 103 have >=7.14.0 product check HTTP span
ok 104 product check HTTP span name
ok 105 should have 2 spans (excluding product check spans in >=7.14.0)
ok 106 have an elasticsearch span
ok 107 should be strictly equal
ok 108 should be strictly equal
ok 109 should be strictly equal
ok 110 span.sync=false
ok 111 have an http span
ok 112 should be strictly equal
ok 113 should be strictly equal
ok 114 should be strictly equal
ok 115 span.sync=false
ok 116 http span should have expected name
ok 117 elasticsearch span should have expected name
ok 118 elasticsearch span has correct .context.db
ok 119 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 120 http span should start after elasticsearch span
ok 121 http span should end before elasticsearch span
# client.search with body
ok 122 should have 1 transaction
ok 123 should have expected transaction name
ok 124 should have expected transaction type
ok 125 have >=7.14.0 product check ES span
ok 126 product check ES span name
ok 127 have >=7.14.0 product check HTTP span
ok 128 product check HTTP span name
ok 129 should have 2 spans (excluding product check spans in >=7.14.0)
ok 130 have an elasticsearch span
ok 131 should be strictly equal
ok 132 should be strictly equal
ok 133 should be strictly equal
ok 134 span.sync=false
ok 135 have an http span
ok 136 should be strictly equal
ok 137 should be strictly equal
ok 138 should be strictly equal
ok 139 span.sync=false
ok 140 http span should have expected name
ok 141 elasticsearch span should have expected name
ok 142 elasticsearch span has correct .context.db
ok 143 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 144 http span should start after elasticsearch span
ok 145 http span should end before elasticsearch span
# client.search with body & queryparams
ok 146 should have 1 transaction
ok 147 should have expected transaction name
ok 148 should have expected transaction type
ok 149 have >=7.14.0 product check ES span
ok 150 product check ES span name
ok 151 have >=7.14.0 product check HTTP span
ok 152 product check HTTP span name
ok 153 should have 2 spans (excluding product check spans in >=7.14.0)
ok 154 have an elasticsearch span
ok 155 should be strictly equal
ok 156 should be strictly equal
ok 157 should be strictly equal
ok 158 span.sync=false
ok 159 have an http span
ok 160 should be strictly equal
ok 161 should be strictly equal
ok 162 should be strictly equal
ok 163 span.sync=false
ok 164 http span should have expected name
ok 165 elasticsearch span should have expected name
ok 166 elasticsearch span has correct .context.db
ok 167 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 168 http span should start after elasticsearch span
ok 169 http span should end before elasticsearch span
# client.searchTemplate
ok 170 should have 1 transaction
ok 171 should have expected transaction name
ok 172 should have expected transaction type
ok 173 have >=7.14.0 product check ES span
ok 174 product check ES span name
ok 175 have >=7.14.0 product check HTTP span
ok 176 product check HTTP span name
ok 177 should have 2 spans (excluding product check spans in >=7.14.0)
ok 178 have an elasticsearch span
ok 179 should be strictly equal
ok 180 should be strictly equal
ok 181 should be strictly equal
ok 182 span.sync=false
ok 183 have an http span
ok 184 should be strictly equal
ok 185 should be strictly equal
ok 186 should be strictly equal
ok 187 span.sync=false
ok 188 http span should have expected name
ok 189 elasticsearch span should have expected name
ok 190 elasticsearch span has correct .context.db
ok 191 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 192 http span should start after elasticsearch span
ok 193 http span should end before elasticsearch span
# client.msearch
ok 194 should have 1 transaction
ok 195 should have expected transaction name
ok 196 should have expected transaction type
ok 197 have >=7.14.0 product check ES span
ok 198 product check ES span name
ok 199 have >=7.14.0 product check HTTP span
ok 200 product check HTTP span name
ok 201 should have 2 spans (excluding product check spans in >=7.14.0)
ok 202 have an elasticsearch span
ok 203 should be strictly equal
ok 204 should be strictly equal
ok 205 should be strictly equal
ok 206 span.sync=false
ok 207 have an http span
ok 208 should be strictly equal
ok 209 should be strictly equal
ok 210 should be strictly equal
ok 211 span.sync=false
ok 212 http span should have expected name
ok 213 elasticsearch span should have expected name
ok 214 elasticsearch span has correct .context.db
ok 215 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 216 http span should start after elasticsearch span
ok 217 http span should end before elasticsearch span
# client.msearchTempate
ok 218 should have 1 transaction
ok 219 should have expected transaction name
ok 220 should have expected transaction type
ok 221 have >=7.14.0 product check ES span
ok 222 product check ES span name
ok 223 have >=7.14.0 product check HTTP span
ok 224 product check HTTP span name
ok 225 should have 2 spans (excluding product check spans in >=7.14.0)
ok 226 have an elasticsearch span
ok 227 should be strictly equal
ok 228 should be strictly equal
ok 229 should be strictly equal
ok 230 span.sync=false
ok 231 have an http span
ok 232 should be strictly equal
ok 233 should be strictly equal
ok 234 should be strictly equal
ok 235 span.sync=false
ok 236 http span should have expected name
ok 237 elasticsearch span should have expected name
ok 238 elasticsearch span has correct .context.db
ok 239 elasticsearch span.context.destination.service.name=="elasticsearch"
ok 240 http span should start after elasticsearch span
ok 241 http span should end before elasticsearch span
# ResponseError
ok 242 got an error from search callback
ok 243 error name is "ResponseError"
{"log.level":"info","@timestamp":"2021-11-25T13:02:04.755Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"a9bc34d223906e6b561291b139eb1f09\"}"}
ok 244 sent an error to APM server
ok 245 err.id
ok 246 err.exception.message
ok 247 err.exception.type is ResponseError
ok 248 should be strictly equal
ok 249 should be deeply equivalent
# DeserializationError
ok 250 got an error from search callback
ok 251 error name is "DeserializationError"
{"log.level":"info","@timestamp":"2021-11-25T13:02:04.975Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"d33d8870011e3915888e915e68cf76a0\"}"}
{"log.level":"info","@timestamp":"2021-11-25T13:02:04.975Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"9c2255219d2e0e3a0444b06a5f031ead\"}"}
ok 252 sent an error to APM server
ok 253 err.id
ok 254 err.exception.message
ok 255 err.exception.type is DeserializationError
ok 256 captured error should NOT include "data" attribute
# ProductNotSupportedError
ok 257 got an error from search callback
ok 258 error name is "ProductNotSupportedError"
{"log.level":"info","@timestamp":"2021-11-25T13:02:05.199Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"5f18f87971bb518e0ca5a63a18041a40\"}"}
ok 259 sent an error to APM server
ok 260 err.id
ok 261 got err.exception.message: The client noticed that the server is not Elasticsearch and we do not support this unknown product.
ok 262 err.exception.type is ProductNotSupportedError
# request.abort() works
ok 263 got error
ok 264 error is RequestAbortedError
{"log.level":"info","@timestamp":"2021-11-25T13:02:05.415Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"e6256422c76cf9434b8df24ce1ad4cde\"}"}
ok 265 have an elasticsearch span
ok 266 sent an error to APM server
ok 267 err.id
ok 268 err.exception.message
ok 269 err.exception.type is RequestAbortedError
# promise.abort() works
ok 270 got error
ok 271 error is RequestAbortedError
{"log.level":"info","@timestamp":"2021-11-25T13:02:05.630Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"cf562bfa689f425be5c51712a04ba60d\"}"}
ok 272 have an elasticsearch span
ok 273 sent an error to APM server
ok 274 err.id
ok 275 err.exception.message
ok 276 err.exception.type is RequestAbortedError
# outcome=success on both spans
ok 277 spans outcomes are success
ok 278 spans outcomes are success
# outcome=failure on both spans
ok 279 got an error from search with bogus "notaparam"
{"log.level":"info","@timestamp":"2021-11-25T13:02:06.081Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"a7ce1ea28390cac6221e7e5073695aa5\"}"}
ok 280 spans outcomes are failure
ok 281 spans outcomes are failure

1..281
# tests 281
# pass  281

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/bluebird/bluebird.test.js
TAP version 13
# new Promise -> resolve -> then
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
# new Promise -> reject -> catch
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
# new Promise -> reject -> catch -> then
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
# new Promise -> reject -> caught
ok 17 should be strictly equal
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
# new Promise -> reject -> caught -> then
ok 21 should be strictly equal
ok 22 should be strictly equal
ok 23 should be strictly equal
ok 24 should be strictly equal
ok 25 should be strictly equal
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
# new Promise -> reject -> then (2nd arg)
ok 29 should be strictly equal
ok 30 should be strictly equal
ok 31 should be strictly equal
ok 32 should be strictly equal
# Promise.resolve
ok 33 should be strictly equal
ok 34 should be strictly equal
ok 35 should be strictly equal
ok 36 should be strictly equal
# Promise.reject
ok 37 should be strictly equal
ok 38 should be strictly equal
ok 39 should be strictly equal
ok 40 should be strictly equal
# Promise.all
ok 41 should be deeply equivalent
ok 42 should be strictly equal
ok 43 should be deeply equivalent
ok 44 should be strictly equal
# Promise.race - 2nd resolve
ok 45 should be strictly equal
ok 46 should be strictly equal
ok 47 should be strictly equal
ok 48 should be strictly equal
# Promise.race - 1st resolve
ok 49 should be strictly equal
ok 50 should be strictly equal
ok 51 should be strictly equal
ok 52 should be strictly equal
# Promise.race - 2nd reject
ok 53 should be strictly equal
ok 54 should be strictly equal
ok 55 should be strictly equal
ok 56 should be strictly equal
# return new Promise
ok 57 should be strictly equal
ok 58 should be strictly equal
ok 59 should be strictly equal
ok 60 should be strictly equal
ok 61 should be strictly equal
ok 62 should be strictly equal
ok 63 should be strictly equal
ok 64 should be strictly equal
ok 65 should be strictly equal
ok 66 should be strictly equal
ok 67 should be strictly equal
ok 68 should be strictly equal
# Promise.coroutine
ok 69 ping should be delayed min 9ms (delayed 11ms)
ok 70 pong should be delayed min 9ms (delayed 9ms)
ok 71 ping should be delayed max 1000ms (delayed 11ms)
ok 72 pong should be delayed max 1000ms (delayed 9ms)
ok 73 should be strictly equal
ok 74 ping should be delayed min 9ms (delayed 10ms)
ok 75 pong should be delayed min 9ms (delayed 10ms)
ok 76 ping should be delayed max 1000ms (delayed 10ms)
ok 77 pong should be delayed max 1000ms (delayed 10ms)
ok 78 should be strictly equal
# Promise.coroutine.addYieldHandler
ok 79 ping should be delayed min 9ms (delayed 10ms)
ok 80 pong should be delayed min 9ms (delayed 10ms)
ok 81 ping should be delayed max 1000ms (delayed 10ms)
ok 82 pong should be delayed max 1000ms (delayed 10ms)
ok 83 should be strictly equal
ok 84 ping should be delayed min 9ms (delayed 11ms)
ok 85 pong should be delayed min 9ms (delayed 10ms)
ok 86 ping should be delayed max 1000ms (delayed 11ms)
ok 87 pong should be delayed max 1000ms (delayed 10ms)
ok 88 should be strictly equal
# Promise.spawn
ok 89 should be strictly equal
ok 90 should be strictly equal
ok 91 should be strictly equal
ok 92 should be strictly equal
# Promise.prototype.spread - all formal
ok 93 should be strictly equal
ok 94 should be strictly equal
ok 95 should be strictly equal
ok 96 should be strictly equal
ok 97 should be strictly equal
ok 98 should be strictly equal
# Promise.prototype.spread - all promises
ok 99 should be strictly equal
ok 100 should be strictly equal
ok 101 should be strictly equal
ok 102 should be strictly equal
ok 103 should be strictly equal
ok 104 should be strictly equal
# Promise.prototype.spread - then formal
ok 105 should be strictly equal
ok 106 should be strictly equal
ok 107 should be strictly equal
ok 108 should be strictly equal
ok 109 should be strictly equal
ok 110 should be strictly equal
# Promise.prototype.spread - then promises
ok 111 should be strictly equal
ok 112 should be strictly equal
ok 113 should be strictly equal
ok 114 should be strictly equal
ok 115 should be strictly equal
ok 116 should be strictly equal
# new Promise -> reject -> catch (filtered, first type)
ok 117 should be truthy
ok 118 should be strictly equal
ok 119 should be strictly equal
ok 120 should be truthy
ok 121 should be strictly equal
ok 122 should be strictly equal
# new Promise -> reject -> catch (filtered, second type)
ok 123 should be truthy
ok 124 should be strictly equal
ok 125 should be strictly equal
ok 126 should be truthy
ok 127 should be strictly equal
ok 128 should be strictly equal
# new Promise -> reject -> catch (filtered, catch-all)
ok 129 should be truthy
ok 130 should be strictly equal
ok 131 should be strictly equal
ok 132 should be truthy
ok 133 should be strictly equal
ok 134 should be strictly equal
# new Promise -> reject -> catch (filtered, multi, first type)
ok 135 should be truthy
ok 136 should be strictly equal
ok 137 should be strictly equal
ok 138 should be truthy
ok 139 should be strictly equal
ok 140 should be strictly equal
# new Promise -> reject -> catch (filtered, multi, second type)
ok 141 should be truthy
ok 142 should be strictly equal
ok 143 should be strictly equal
ok 144 should be truthy
ok 145 should be strictly equal
ok 146 should be strictly equal
# new Promise -> reject -> catch (filtered, multi, catch-all)
ok 147 should be truthy
ok 148 should be strictly equal
ok 149 should be strictly equal
ok 150 should be truthy
ok 151 should be strictly equal
ok 152 should be strictly equal
# new Promise -> reject -> catch (filtered, predicate)
ok 153 should be truthy
ok 154 should be strictly equal
ok 155 should be strictly equal
ok 156 should be truthy
ok 157 should be strictly equal
ok 158 should be strictly equal
ok 159 should be truthy
ok 160 should be strictly equal
ok 161 should be strictly equal
ok 162 should be truthy
ok 163 should be strictly equal
ok 164 should be strictly equal
ok 165 should be truthy
ok 166 should be strictly equal
ok 167 should be strictly equal
ok 168 should be truthy
ok 169 should be strictly equal
ok 170 should be strictly equal
# new Promise -> reject -> catch (filtered, predicate shorthand)
ok 171 should be truthy
ok 172 should be strictly equal
ok 173 should be strictly equal
ok 174 should be truthy
ok 175 should be strictly equal
ok 176 should be strictly equal
# new Promise -> reject -> caught (filtered, first type)
ok 177 should be truthy
ok 178 should be strictly equal
ok 179 should be strictly equal
ok 180 should be truthy
ok 181 should be strictly equal
ok 182 should be strictly equal
# new Promise -> reject -> caught (filtered, second type)
ok 183 should be truthy
ok 184 should be strictly equal
ok 185 should be strictly equal
ok 186 should be truthy
ok 187 should be strictly equal
ok 188 should be strictly equal
# new Promise -> reject -> caught (filtered, catch-all)
ok 189 should be truthy
ok 190 should be strictly equal
ok 191 should be strictly equal
ok 192 should be truthy
ok 193 should be strictly equal
ok 194 should be strictly equal
# new Promise -> reject -> caught (filtered, multi, first type)
ok 195 should be truthy
ok 196 should be strictly equal
ok 197 should be strictly equal
ok 198 should be truthy
ok 199 should be strictly equal
ok 200 should be strictly equal
# new Promise -> reject -> caught (filtered, multi, second type)
ok 201 should be truthy
ok 202 should be strictly equal
ok 203 should be strictly equal
ok 204 should be truthy
ok 205 should be strictly equal
ok 206 should be strictly equal
# new Promise -> reject -> caught (filtered, multi, catch-all)
ok 207 should be truthy
ok 208 should be strictly equal
ok 209 should be strictly equal
ok 210 should be truthy
ok 211 should be strictly equal
ok 212 should be strictly equal
# new Promise -> reject -> caught (filtered, predicate)
ok 213 should be truthy
ok 214 should be strictly equal
ok 215 should be strictly equal
ok 216 should be truthy
ok 217 should be strictly equal
ok 218 should be strictly equal
ok 219 should be truthy
ok 220 should be strictly equal
ok 221 should be strictly equal
ok 222 should be truthy
ok 223 should be strictly equal
ok 224 should be strictly equal
ok 225 should be truthy
ok 226 should be strictly equal
ok 227 should be strictly equal
ok 228 should be truthy
ok 229 should be strictly equal
ok 230 should be strictly equal
# new Promise -> reject -> caught (filtered, predicate shorthand)
ok 231 should be truthy
ok 232 should be strictly equal
ok 233 should be strictly equal
ok 234 should be truthy
ok 235 should be strictly equal
ok 236 should be strictly equal
# new Promise -> reject -> error
ok 237 should be truthy
ok 238 should be strictly equal
ok 239 should be strictly equal
ok 240 should be truthy
ok 241 should be strictly equal
ok 242 should be strictly equal
# new Promise -> reject -> finally
ok 243 should be truthy
ok 244 should be strictly equal
ok 245 should be truthy
ok 246 should be strictly equal
# new Promise -> reject -> catch -> finally
ok 247 should be strictly equal
ok 248 should be strictly equal
ok 249 should be strictly equal
ok 250 should be strictly equal
ok 251 should be truthy
ok 252 should be truthy
# new Promise -> reject -> then -> catch -> finally -> new Promise -> then
ok 253 should be strictly equal
ok 254 should be strictly equal
ok 255 should be strictly equal
ok 256 should be strictly equal
ok 257 should be truthy
ok 258 should be truthy
ok 259 should be strictly equal
ok 260 should be strictly equal
# new Promise -> resolve -> then -> finally -> new Promise -> then
ok 261 should be strictly equal
ok 262 should be strictly equal
ok 263 should be truthy
ok 264 should be truthy
ok 265 should be truthy
ok 266 should be strictly equal
ok 267 should be strictly equal
ok 268 should be truthy
ok 269 should be strictly equal
ok 270 should be strictly equal
# new Promise -> resolve -> finally -> new Promise -> then
ok 271 should be truthy
ok 272 should be truthy
ok 273 should be truthy
ok 274 should be strictly equal
ok 275 should be strictly equal
ok 276 should be truthy
ok 277 should be strictly equal
ok 278 should be strictly equal
# new Promise -> reject -> lastly
ok 279 should be truthy
ok 280 should be strictly equal
ok 281 should be truthy
ok 282 should be strictly equal
# new Promise -> reject -> catch -> lastly
ok 283 should be strictly equal
ok 284 should be strictly equal
ok 285 should be strictly equal
ok 286 should be strictly equal
ok 287 should be truthy
ok 288 should be truthy
# new Promise -> reject -> then -> catch -> lastly -> new Promise -> then
ok 289 should be strictly equal
ok 290 should be strictly equal
ok 291 should be strictly equal
ok 292 should be strictly equal
ok 293 should be truthy
ok 294 should be truthy
ok 295 should be strictly equal
ok 296 should be strictly equal
# new Promise -> resolve -> then -> lastly -> new Promise -> then
ok 297 should be strictly equal
ok 298 should be strictly equal
ok 299 should be truthy
ok 300 should be truthy
ok 301 should be truthy
ok 302 should be strictly equal
ok 303 should be strictly equal
ok 304 should be truthy
ok 305 should be strictly equal
ok 306 should be strictly equal
# new Promise -> resolve -> lastly -> new Promise -> then
ok 307 should be truthy
ok 308 should be truthy
ok 309 should be truthy
ok 310 should be strictly equal
ok 311 should be strictly equal
ok 312 should be truthy
ok 313 should be strictly equal
ok 314 should be strictly equal
# new Promise -> bind -> then
ok 315 should be strictly equal
ok 316 should be strictly equal
ok 317 should be strictly equal
ok 318 should be strictly equal
ok 319 should be strictly equal
ok 320 should be strictly equal
# Promise.bind - with value
ok 321 should be strictly equal
ok 322 should be strictly equal
ok 323 should be strictly equal
ok 324 should be strictly equal
ok 325 should be strictly equal
ok 326 should be strictly equal
# Promise.bind - promise, without value
ok 327 should be strictly equal
ok 328 should be strictly equal
ok 329 should be strictly equal
ok 330 should be strictly equal
# Promise.bind - non-promise, without value
ok 331 should be strictly equal
ok 332 should be strictly equal
ok 333 should be strictly equal
ok 334 should be strictly equal
ok 335 should be strictly equal
ok 336 should be strictly equal
# Promise.join
ok 337 should be strictly equal
ok 338 should be strictly equal
ok 339 should be strictly equal
ok 340 should be strictly equal
ok 341 should be strictly equal
ok 342 should be strictly equal
ok 343 should be strictly equal
ok 344 should be strictly equal
# Promise.try -> return value
ok 345 should be strictly equal
ok 346 should be strictly equal
ok 347 should be strictly equal
ok 348 should be strictly equal
# Promise.try -> throw
ok 349 should be strictly equal
ok 350 should be strictly equal
ok 351 should be strictly equal
ok 352 should be strictly equal
# Promise.try with args value
ok 353 should be strictly equal
ok 354 should be strictly equal
ok 355 should be strictly equal
ok 356 should be strictly equal
ok 357 should be strictly equal
ok 358 should be strictly equal
# Promise.try with args array
ok 359 should be deeply equivalent
ok 360 should be deeply equivalent
ok 361 should be strictly equal
ok 362 should be strictly equal
ok 363 should be strictly equal
ok 364 should be strictly equal
# Promise.try with context
ok 365 should be strictly equal
ok 366 should be strictly equal
ok 367 should be strictly equal
ok 368 should be strictly equal
ok 369 should be strictly equal
ok 370 should be strictly equal
ok 371 should be strictly equal
ok 372 should be strictly equal
# Promise.attempt -> return value
ok 373 should be strictly equal
ok 374 should be strictly equal
ok 375 should be strictly equal
ok 376 should be strictly equal
# Promise.attempt -> throw
ok 377 should be strictly equal
ok 378 should be strictly equal
ok 379 should be strictly equal
ok 380 should be strictly equal
# Promise.attempt with args value
ok 381 should be strictly equal
ok 382 should be strictly equal
ok 383 should be strictly equal
ok 384 should be strictly equal
ok 385 should be strictly equal
ok 386 should be strictly equal
# Promise.attempt with args array
ok 387 should be deeply equivalent
ok 388 should be deeply equivalent
ok 389 should be strictly equal
ok 390 should be strictly equal
ok 391 should be strictly equal
ok 392 should be strictly equal
# Promise.attempt with context
ok 393 should be strictly equal
ok 394 should be strictly equal
ok 395 should be strictly equal
ok 396 should be strictly equal
ok 397 should be strictly equal
ok 398 should be strictly equal
ok 399 should be strictly equal
ok 400 should be strictly equal
# Promise.method -> return value
ok 401 should be strictly equal
ok 402 should be strictly equal
ok 403 should be strictly equal
ok 404 should be strictly equal
# Promise.method -> throw
ok 405 should be strictly equal
ok 406 should be strictly equal
ok 407 should be strictly equal
ok 408 should be strictly equal
# Promise.all
ok 409 should be deeply equivalent
ok 410 should be strictly equal
ok 411 should be deeply equivalent
ok 412 should be strictly equal
# new Promise -> all
ok 413 should be deeply equivalent
ok 414 should be strictly equal
ok 415 should be deeply equivalent
ok 416 should be strictly equal
# Promise.props
ok 417 should be deeply equivalent
ok 418 should be strictly equal
ok 419 should be deeply equivalent
ok 420 should be strictly equal
# new Promise -> props
ok 421 should be deeply equivalent
ok 422 should be strictly equal
ok 423 should be deeply equivalent
ok 424 should be strictly equal
# Promise.any
ok 425 should be strictly equal
ok 426 should be strictly equal
ok 427 should be strictly equal
ok 428 should be strictly equal
# new Promise -> any
ok 429 should be strictly equal
ok 430 should be strictly equal
ok 431 should be strictly equal
ok 432 should be strictly equal
# Promise.some
ok 433 should be deeply equivalent
ok 434 should be strictly equal
ok 435 should be deeply equivalent
ok 436 should be strictly equal
# new Promise -> some
ok 437 should be deeply equivalent
ok 438 should be strictly equal
ok 439 should be deeply equivalent
ok 440 should be strictly equal
# Promise.map
ok 441 should be deeply equivalent
ok 442 should be strictly equal
ok 443 should be deeply equivalent
ok 444 should be strictly equal
# new Promise -> map
ok 445 should be deeply equivalent
ok 446 should be strictly equal
ok 447 should be deeply equivalent
ok 448 should be strictly equal
# Promise.reduce
ok 449 should be strictly equal
ok 450 should be strictly equal
ok 451 should be strictly equal
ok 452 should be strictly equal
# new Promise -> reduce
ok 453 should be strictly equal
ok 454 should be strictly equal
ok 455 should be strictly equal
ok 456 should be strictly equal
# Promise.filter
ok 457 should be deeply equivalent
ok 458 should be strictly equal
ok 459 should be deeply equivalent
ok 460 should be strictly equal
# new Promise -> filter
ok 461 should be deeply equivalent
ok 462 should be strictly equal
ok 463 should be deeply equivalent
ok 464 should be strictly equal
# Promise.each
ok 465 should be strictly equal
ok 466 index should be expected - 1
ok 467 length should be 3
ok 468 should be strictly equal
ok 469 should be strictly equal
ok 470 index should be expected - 1
ok 471 length should be 3
ok 472 should be strictly equal
ok 473 should be strictly equal
ok 474 index should be expected - 1
ok 475 length should be 3
ok 476 should be strictly equal
ok 477 should be strictly equal
ok 478 index should be expected - 1
ok 479 length should be 3
ok 480 should be strictly equal
ok 481 should be strictly equal
ok 482 index should be expected - 1
ok 483 length should be 3
ok 484 should be strictly equal
ok 485 should be strictly equal
ok 486 index should be expected - 1
ok 487 length should be 3
ok 488 should be strictly equal
# new Promise -> each
ok 489 should be strictly equal
ok 490 index should be expected - 1
ok 491 length should be 3
ok 492 should be strictly equal
ok 493 should be strictly equal
ok 494 index should be expected - 1
ok 495 length should be 3
ok 496 should be strictly equal
ok 497 should be strictly equal
ok 498 index should be expected - 1
ok 499 length should be 3
ok 500 should be strictly equal
ok 501 should be strictly equal
ok 502 index should be expected - 1
ok 503 length should be 3
ok 504 should be strictly equal
ok 505 should be strictly equal
ok 506 index should be expected - 1
ok 507 length should be 3
ok 508 should be strictly equal
ok 509 should be strictly equal
ok 510 index should be expected - 1
ok 511 length should be 3
ok 512 should be strictly equal
# Promise.mapSeries
ok 513 should be strictly equal
ok 514 should be strictly equal
ok 515 length should be 3
ok 516 should be strictly equal
ok 517 should be strictly equal
ok 518 should be strictly equal
ok 519 length should be 3
ok 520 should be strictly equal
ok 521 should be strictly equal
ok 522 should be strictly equal
ok 523 length should be 3
ok 524 should be strictly equal
ok 525 should be strictly equal
ok 526 should be strictly equal
ok 527 length should be 3
ok 528 should be strictly equal
ok 529 should be strictly equal
ok 530 should be strictly equal
ok 531 length should be 3
ok 532 should be strictly equal
ok 533 should be strictly equal
ok 534 should be strictly equal
ok 535 length should be 3
ok 536 should be strictly equal
# new Promise -> mapSeries
ok 537 should be strictly equal
ok 538 should be strictly equal
ok 539 length should be 3
ok 540 should be strictly equal
ok 541 should be strictly equal
ok 542 should be strictly equal
ok 543 length should be 3
ok 544 should be strictly equal
ok 545 should be strictly equal
ok 546 should be strictly equal
ok 547 length should be 3
ok 548 should be strictly equal
ok 549 should be strictly equal
ok 550 should be strictly equal
ok 551 length should be 3
ok 552 should be strictly equal
ok 553 should be strictly equal
ok 554 should be strictly equal
ok 555 length should be 3
ok 556 should be strictly equal
ok 557 should be strictly equal
ok 558 should be strictly equal
ok 559 length should be 3
ok 560 should be strictly equal
# Promise.using
ok 561 should be strictly equal
ok 562 should be strictly equal
ok 563 should be strictly equal
ok 564 should be strictly equal
ok 565 should be strictly equal
ok 566 should be strictly equal
# Promise.promisify
ok 567 should be truthy
ok 568 should be strictly equal
ok 569 should be truthy
ok 570 should be strictly equal
# Promise.promisifyAll
ok 571 should be strictly equal
ok 572 should be strictly equal
ok 573 should be strictly equal
ok 574 should be strictly equal
ok 575 should be strictly equal
ok 576 should be strictly equal
ok 577 should be strictly equal
ok 578 should be strictly equal
# Promise.fromNode - resolve
ok 579 should be strictly equal
ok 580 should be strictly equal
ok 581 should be strictly equal
ok 582 should be strictly equal
# Promise.fromNode - reject
ok 583 should be strictly equal
ok 584 should be strictly equal
ok 585 should be strictly equal
ok 586 should be strictly equal
# Promise.fromCallback - resolve
ok 587 should be strictly equal
ok 588 should be strictly equal
ok 589 should be strictly equal
ok 590 should be strictly equal
# Promise.fromCallback - reject
ok 591 should be strictly equal
ok 592 should be strictly equal
ok 593 should be strictly equal
ok 594 should be strictly equal
# new Promise -> nodeify (resolve)
ok 595 should be strictly equal
ok 596 should be strictly equal
ok 597 should be strictly equal
ok 598 should be strictly equal
ok 599 should be strictly equal
ok 600 should be strictly equal
ok 601 should be strictly equal
ok 602 should be strictly equal
ok 603 should be strictly equal
ok 604 should be strictly equal
# new Promise -> nodeify (reject)
ok 605 should be strictly equal
ok 606 should be strictly equal
ok 607 should be strictly equal
ok 608 should be strictly equal
ok 609 should be strictly equal
ok 610 should be strictly equal
ok 611 should be strictly equal
ok 612 should be strictly equal
ok 613 should be strictly equal
ok 614 should be strictly equal
# new Promise -> asCallback (resolve)
ok 615 should be strictly equal
ok 616 should be strictly equal
ok 617 should be strictly equal
ok 618 should be strictly equal
ok 619 should be strictly equal
ok 620 should be strictly equal
ok 621 should be strictly equal
ok 622 should be strictly equal
ok 623 should be strictly equal
ok 624 should be strictly equal
# new Promise -> asCallback (reject)
ok 625 should be strictly equal
ok 626 should be strictly equal
ok 627 should be strictly equal
ok 628 should be strictly equal
ok 629 should be strictly equal
ok 630 should be strictly equal
ok 631 should be strictly equal
ok 632 should be strictly equal
ok 633 should be strictly equal
ok 634 should be strictly equal
# Promise.delay
ok 635 start + 49 should be <= 1637845328749 - was 1637845328747
ok 636 should be strictly equal
ok 637 start + 49 should be <= 1637845328749 - was 1637845328748
ok 638 should be strictly equal
# new Promise -> delay
ok 639 start + 49 should be <= 1637845328802 - was 1637845328799
ok 640 should be strictly equal
ok 641 start + 49 should be <= 1637845328802 - was 1637845328800
ok 642 should be strictly equal
# new Promise -> timeout (resolve in time)
ok 643 should be strictly equal
ok 644 should be strictly equal
ok 645 should be strictly equal
ok 646 should be strictly equal
# new Promise -> timeout (reject in time)
ok 647 should be strictly equal
ok 648 should be strictly equal
ok 649 should be strictly equal
ok 650 should be strictly equal
# new Promise -> timeout (timed out)
ok 651 start + 49 should be <= 1637845328858 - was 1637845328856
ok 652 should be truthy
ok 653 should be strictly equal
ok 654 start + 49 should be <= 1637845328858 - was 1637845328857
ok 655 should be truthy
ok 656 should be strictly equal
# new Promise -> reject -> tap -> catch
ok 657 should be strictly equal
ok 658 should be strictly equal
ok 659 should be strictly equal
ok 660 should be strictly equal
# new Promise -> resolve -> tap -> then (no return)
ok 661 should be strictly equal
ok 662 should be strictly equal
ok 663 should be strictly equal
ok 664 should be strictly equal
ok 665 should be strictly equal
ok 666 should be strictly equal
# new Promise -> resolve -> tap -> then (return)
ok 667 should be strictly equal
ok 668 should be strictly equal
ok 669 should be strictly equal
ok 670 should be strictly equal
ok 671 should be strictly equal
ok 672 should be strictly equal
# new Promise -> call
ok 673 should be strictly equal
ok 674 should be strictly equal
ok 675 should be strictly equal
ok 676 should be strictly equal
ok 677 should be deeply equivalent
ok 678 should be strictly equal
ok 679 should be deeply equivalent
ok 680 should be strictly equal
# new Promise -> get
ok 681 should be deeply equivalent
ok 682 should be strictly equal
ok 683 should be deeply equivalent
ok 684 should be strictly equal
# new Promise -> return
ok 685 should be deeply equivalent
ok 686 should be strictly equal
ok 687 should be deeply equivalent
ok 688 should be strictly equal
ok 689 should be deeply equivalent
ok 690 should be strictly equal
ok 691 should be deeply equivalent
ok 692 should be strictly equal
# new Promise -> thenReturn
ok 693 should be deeply equivalent
ok 694 should be strictly equal
ok 695 should be deeply equivalent
ok 696 should be strictly equal
ok 697 should be deeply equivalent
ok 698 should be strictly equal
ok 699 should be deeply equivalent
ok 700 should be strictly equal
# new Promise -> throw
ok 701 should be deeply equivalent
ok 702 should be strictly equal
ok 703 should be deeply equivalent
ok 704 should be strictly equal
# new Promise -> thenThrow
ok 705 should be deeply equivalent
ok 706 should be strictly equal
ok 707 should be deeply equivalent
ok 708 should be strictly equal
# new Promise -> resolve -> catchReturn
ok 709 should be deeply equivalent
ok 710 should be strictly equal
ok 711 should be deeply equivalent
ok 712 should be strictly equal
ok 713 should be deeply equivalent
ok 714 should be strictly equal
ok 715 should be deeply equivalent
ok 716 should be strictly equal
# new Promise -> reject -> catchReturn
ok 717 should be deeply equivalent
ok 718 should be strictly equal
ok 719 should be deeply equivalent
ok 720 should be strictly equal
# new Promise -> resolve -> catchThrow
ok 721 should be deeply equivalent
ok 722 should be strictly equal
ok 723 should be deeply equivalent
ok 724 should be strictly equal
ok 725 should be deeply equivalent
ok 726 should be strictly equal
ok 727 should be deeply equivalent
ok 728 should be strictly equal
# new Promise -> reject -> catchThrow
ok 729 should be deeply equivalent
ok 730 should be strictly equal
ok 731 should be deeply equivalent
ok 732 should be strictly equal
# new Promise -> reflect
ok 733 should be truthy
ok 734 should be strictly equal
ok 735 should be truthy
ok 736 should be strictly equal
# new Promise -> settle
ok 737 should be strictly equal
ok 738 should be truthy
ok 739 should be strictly equal
ok 740 should be strictly equal
ok 741 should be truthy
ok 742 should be strictly equal

1..742
# tests 742
# pass  742

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/bluebird/cancel.test.js
TAP version 13
# Promise.prototype.cancel
ok 1 before calling onCancel
ok 2 before calling onCancel
ok 3 before p.cancel
ok 4 should be cancelled
ok 5 onCancel callback
ok 6 before p.cancel
ok 7 should be cancelled
ok 8 onCancel callback
# Promise.prototype.break
ok 9 before calling onCancel
ok 10 before calling onCancel
ok 11 before p.cancel
ok 12 before p.cancel
ok 13 should be cancelled
ok 14 onCancel callback
ok 15 should be cancelled
ok 16 onCancel callback

1..16
# tests 16
# pass  16

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/cassandra-driver/index.test.js
TAP version 13
# connect
ok 1 no error
ok 2 transaction count
ok 3 span count
ok 4 transaction name
ok 5 span name
ok 6 span type
ok 7 span subtype
ok 8 span action
# execute - promise
ok 9 no error
ok 10 number of rows
ok 11 result key
ok 12 transaction count
ok 13 span count
ok 14 transaction name
ok 15 span name
ok 16 span type
ok 17 span subtype
ok 18 span action
ok 19 span name
ok 20 span type
ok 21 span subtype
ok 22 span action
ok 23 database context
# execute - callback
ok 24 no error
ok 25 number of rows
ok 26 result key
ok 27 transaction count
ok 28 span count
ok 29 transaction name
ok 30 span name
ok 31 span type
ok 32 span subtype
ok 33 span action
ok 34 span name
ok 35 span type
ok 36 span subtype
ok 37 span action
ok 38 database context
# batch - promise
ok 39 no error
ok 40 transaction count
ok 41 span count
ok 42 transaction name
ok 43 span name
ok 44 span type
ok 45 span subtype
ok 46 span action
ok 47 span name
ok 48 span type
ok 49 span subtype
ok 50 span action
ok 51 database context
# batch - callback
ok 52 no error
ok 53 no error
ok 54 transaction count
ok 55 span count
ok 56 transaction name
ok 57 span name
ok 58 span type
ok 59 span subtype
ok 60 span action
ok 61 span name
ok 62 span type
ok 63 span subtype
ok 64 span action
ok 65 database context
# eachRow
ok 66 row key
ok 67 no error
ok 68 transaction count
ok 69 span count
ok 70 transaction name
ok 71 span name
ok 72 span type
ok 73 span subtype
ok 74 span action
ok 75 span name
ok 76 span type
ok 77 span subtype
ok 78 span action
ok 79 database context
# stream
ok 80 row key
ok 81 number of rows
ok 82 transaction count
ok 83 span count
ok 84 transaction name
ok 85 span name
ok 86 span type
ok 87 span subtype
ok 88 span action
ok 89 span name
ok 90 span type
ok 91 span subtype
ok 92 span action
ok 93 database context

1..93
# tests 93
# pass  93

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/express/basic.test.js
TAP version 13
# app.use('/') - GET /
ok 1 has a transaction
ok 2 transaction name is GET unknown route
ok 3 transaction type is request
ok 4 null
ok 5 should have expected response body
# app.use('/') - POST /
ok 6 has a transaction
ok 7 transaction name is POST unknown route
ok 8 transaction type is request
ok 9 null
ok 10 should have expected response body
# app.get('/') - GET /
ok 11 has a transaction
ok 12 transaction name is GET /
ok 13 transaction type is request
ok 14 null
ok 15 should have expected response body
# app.post('/') - POST /
ok 16 has a transaction
ok 17 transaction name is POST /
ok 18 transaction type is request
ok 19 null
ok 20 should have expected response body
# app.head('/') - HEAD /
ok 21 has a transaction
ok 22 transaction name is HEAD /
ok 23 transaction type is request
ok 24 null
ok 25 should have expected response body
# app.use('/foo/:id') - GET /foo/42
ok 26 has a transaction
ok 27 transaction name is GET /foo/:id
ok 28 transaction type is request
ok 29 null
ok 30 should have expected response body
# app.use('/foo/:id') - POST /foo/42
ok 31 has a transaction
ok 32 transaction name is POST /foo/:id
ok 33 transaction type is request
ok 34 null
ok 35 should have expected response body
# app.get('/foo/:id') - GET /foo/42
ok 36 has a transaction
ok 37 transaction name is GET /foo/:id
ok 38 transaction type is request
ok 39 null
ok 40 should have expected response body
# app.post('/foo/:id') - POST /foo/42
ok 41 has a transaction
ok 42 transaction name is POST /foo/:id
ok 43 transaction type is request
ok 44 null
ok 45 should have expected response body
# app.head('/foo/:id') - HEAD /foo/42
ok 46 has a transaction
ok 47 transaction name is HEAD /foo/:id
ok 48 transaction type is request
ok 49 null
ok 50 should have expected response body
# app.use('/') => app.use('/') - GET /
ok 51 has a transaction
ok 52 transaction name is GET unknown route
ok 53 transaction type is request
ok 54 null
ok 55 should have expected response body
# app.use('/') => app.use('/') - POST /
ok 56 has a transaction
ok 57 transaction name is POST unknown route
ok 58 transaction type is request
ok 59 null
ok 60 should have expected response body
# app.use('/') => app.get('/') - GET /
ok 61 has a transaction
ok 62 transaction name is GET /
ok 63 transaction type is request
ok 64 null
ok 65 should have expected response body
# app.use('/') => app.post('/') - POST /
ok 66 has a transaction
ok 67 transaction name is POST /
ok 68 transaction type is request
ok 69 null
ok 70 should have expected response body
# app.use('/') => app.head('/') - HEAD /
ok 71 has a transaction
ok 72 transaction name is HEAD /
ok 73 transaction type is request
ok 74 null
ok 75 should have expected response body
# app.use('/') => app.use('/foo/:id') - GET /foo/42
ok 76 has a transaction
ok 77 transaction name is GET /foo/:id
ok 78 transaction type is request
ok 79 null
ok 80 should have expected response body
# app.use('/') => app.use('/foo/:id') - POST /foo/42
ok 81 has a transaction
ok 82 transaction name is POST /foo/:id
ok 83 transaction type is request
ok 84 null
ok 85 should have expected response body
# app.use('/') => app.get('/foo/:id') - GET /foo/42
ok 86 has a transaction
ok 87 transaction name is GET /foo/:id
ok 88 transaction type is request
ok 89 null
ok 90 should have expected response body
# app.use('/') => app.post('/foo/:id') - POST /foo/42
ok 91 has a transaction
ok 92 transaction name is POST /foo/:id
ok 93 transaction type is request
ok 94 null
ok 95 should have expected response body
# app.use('/') => app.head('/foo/:id') - HEAD /foo/42
ok 96 has a transaction
ok 97 transaction name is HEAD /foo/:id
ok 98 transaction type is request
ok 99 null
ok 100 should have expected response body
# app.use('/sub') => app.use('/') - GET /sub
ok 101 has a transaction
ok 102 transaction name is GET /sub
ok 103 transaction type is request
ok 104 null
ok 105 should have expected response body
# app.use('/sub') => app.use('/') - POST /sub
ok 106 has a transaction
ok 107 transaction name is POST /sub
ok 108 transaction type is request
ok 109 null
ok 110 should have expected response body
# app.use('/sub') => app.get('/') - GET /sub
ok 111 has a transaction
ok 112 transaction name is GET /sub
ok 113 transaction type is request
ok 114 null
ok 115 should have expected response body
# app.use('/sub') => app.post('/') - POST /sub
ok 116 has a transaction
ok 117 transaction name is POST /sub
ok 118 transaction type is request
ok 119 null
ok 120 should have expected response body
# app.use('/sub') => app.head('/') - HEAD /sub
ok 121 has a transaction
ok 122 transaction name is HEAD /sub
ok 123 transaction type is request
ok 124 null
ok 125 should have expected response body
# app.use('/sub') => app.use('/foo/:id') - GET /sub/foo/42
ok 126 has a transaction
ok 127 transaction name is GET /sub/foo/:id
ok 128 transaction type is request
ok 129 null
ok 130 should have expected response body
# app.use('/sub') => app.use('/foo/:id') - POST /sub/foo/42
ok 131 has a transaction
ok 132 transaction name is POST /sub/foo/:id
ok 133 transaction type is request
ok 134 null
ok 135 should have expected response body
# app.use('/sub') => app.get('/foo/:id') - GET /sub/foo/42
ok 136 has a transaction
ok 137 transaction name is GET /sub/foo/:id
ok 138 transaction type is request
ok 139 null
ok 140 should have expected response body
# app.use('/sub') => app.post('/foo/:id') - POST /sub/foo/42
ok 141 has a transaction
ok 142 transaction name is POST /sub/foo/:id
ok 143 transaction type is request
ok 144 null
ok 145 should have expected response body
# app.use('/sub') => app.head('/foo/:id') - HEAD /sub/foo/42
ok 146 has a transaction
ok 147 transaction name is HEAD /sub/foo/:id
ok 148 transaction type is request
ok 149 null
ok 150 should have expected response body
# app.use('/sub/:id') => app.use('/') - GET /sub/42
ok 151 has a transaction
ok 152 transaction name is GET /sub/:id
ok 153 transaction type is request
ok 154 null
ok 155 should have expected response body
# app.use('/sub/:id') => app.use('/') - POST /sub/42
ok 156 has a transaction
ok 157 transaction name is POST /sub/:id
ok 158 transaction type is request
ok 159 null
ok 160 should have expected response body
# app.use('/sub/:id') => app.get('/') - GET /sub/42
ok 161 has a transaction
ok 162 transaction name is GET /sub/:id
ok 163 transaction type is request
ok 164 null
ok 165 should have expected response body
# app.use('/sub/:id') => app.post('/') - POST /sub/42
ok 166 has a transaction
ok 167 transaction name is POST /sub/:id
ok 168 transaction type is request
ok 169 null
ok 170 should have expected response body
# app.use('/sub/:id') => app.head('/') - HEAD /sub/42
ok 171 has a transaction
ok 172 transaction name is HEAD /sub/:id
ok 173 transaction type is request
ok 174 null
ok 175 should have expected response body
# app.use('/sub/:id') => app.use('/foo/:id') - GET /sub/42/foo/42
ok 176 has a transaction
ok 177 transaction name is GET /sub/:id/foo/:id
ok 178 transaction type is request
ok 179 null
ok 180 should have expected response body
# app.use('/sub/:id') => app.use('/foo/:id') - POST /sub/42/foo/42
ok 181 has a transaction
ok 182 transaction name is POST /sub/:id/foo/:id
ok 183 transaction type is request
ok 184 null
ok 185 should have expected response body
# app.use('/sub/:id') => app.get('/foo/:id') - GET /sub/42/foo/42
ok 186 has a transaction
ok 187 transaction name is GET /sub/:id/foo/:id
ok 188 transaction type is request
ok 189 null
ok 190 should have expected response body
# app.use('/sub/:id') => app.post('/foo/:id') - POST /sub/42/foo/42
ok 191 has a transaction
ok 192 transaction name is POST /sub/:id/foo/:id
ok 193 transaction type is request
ok 194 null
ok 195 should have expected response body
# app.use('/sub/:id') => app.head('/foo/:id') - HEAD /sub/42/foo/42
ok 196 has a transaction
ok 197 transaction name is HEAD /sub/:id/foo/:id
ok 198 transaction type is request
ok 199 null
ok 200 should have expected response body
# error intercept
ok 201 has the expected error
ok 202 captured data with error
ok 203 captured data has the request object
ok 204 has a transaction
ok 205 transaction name is GET /
ok 206 transaction type is request
ok 207 null
ok 208 got correct body from error handler middleware
# ignore 404 errors
ok 209 has a transaction
ok 210 transaction name is GET unknown route
ok 211 transaction type is request
ok 212 null
ok 213 got correct body from error handler middleware
# ignore invalid errors
ok 214 has a transaction
ok 215 transaction name is GET /
ok 216 transaction type is request
ok 217 null
ok 218 got correct body from error handler middleware
# do not inherit past route names
ok 219 has a transaction
ok 220 transaction name is GET /
ok 221 transaction type is request
ok 222 null
ok 223 got correct body from error handler middleware
# sub-routers include base path
ok 224 has a transaction
ok 225 transaction name is GET /hello/:name
ok 226 transaction type is request
ok 227 null
ok 228 got correct body
# sub-routers throw exception
ok 229 has a transaction
ok 230 transaction name is GET /api/:name
ok 231 transaction type is request
ok 232 null
# expose app.use handle properties
ok 233 expose stack array on handle
ok 234 stack should contain one layer
ok 235 expose foo property on sub-handle
ok 236 expose bar property on sub-handle
ok 237 has a transaction
ok 238 null
ok 239 should be strictly equal

1..239
# tests 239
# pass  239

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/express/capture-exceptions-off.test.js
TAP version 13
# use given error handler middleware if captureExceptions: false
ok 1 should be strictly equal
ok 2 has a transaction
ok 3 null
ok 4 should be strictly equal
ok 5 should be strictly equal

1..5
# tests 5
# pass  5

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/express/capture-exceptions-on.test.js
TAP version 13
# use given error handler middleware if captureExceptions: true
ok 1 should be strictly equal
ok 2 null
ok 3 should be strictly equal
ok 4 should be strictly equal
{"log.level":"info","@timestamp":"2021-11-25T13:02:19.045Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"ba1b687c8dbdad8130725d0f00579ccd\"}"}
ok 5 has a transaction
ok 6 has an error
ok 7 should be strictly equal

1..7
# tests 7
# pass  7

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/express/set-framework.test.js
TAP version 13
# express set-framework test
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal

1..4
# tests 4
# pass  4

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/fastify/async-await.test.js
TAP version 13
# transaction name
ok 1 null
ok 2 has a transaction
ok 3 transaction name is GET /hello/:name
ok 4 transaction type is request
ok 5 got correct body
# error reporting
ok 6 null
ok 7 has the expected error
ok 8 captured data with error
ok 9 captured data has the request object
ok 10 reported an error
ok 11 has a transaction
ok 12 transaction name is GET /hello/:name
ok 13 transaction type is request
ok 14 got correct body

1..14
# tests 14
# pass  14

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/fastify/fastify.test.js
TAP version 13
# transaction name
ok 1 null
ok 2 has a transaction
ok 3 transaction name is GET /hello/:name
ok 4 transaction type is request
ok 5 got correct body

1..5
# tests 5
# pass  5

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/fastify/set-framework.test.js
TAP version 13
# fastify set-framework test
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal

1..4
# tests 4
# pass  4

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/hapi/basic-legacy-path.test.js
TAP version 13
# extract URL from request
ok 1 no error from startServer
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
# route naming
ok 10 null
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
ok 17 should be strictly equal
# connectionless
ok 18 start error
# connectionless server error logging with Error
ok 19 start error
ok 20 should be strictly equal
ok 21 should be truthy
ok 22 should be deeply equivalent
ok 23 should be falsy
ok 24 should be truthy
# connectionless server error logging with String
ok 25 start error
ok 26 should be strictly equal
ok 27 should be truthy
ok 28 should be deeply equivalent
ok 29 should be falsy
ok 30 should be truthy
# connectionless server error logging with Object
ok 31 start error
ok 32 should be strictly equal
ok 33 should be truthy
ok 34 should be deeply equivalent
ok 35 should be falsy
ok 36 should be deeply equivalent
# server error logging with Error
ok 37 start error
ok 38 should be strictly equal
ok 39 should be truthy
ok 40 should be deeply equivalent
ok 41 should be falsy
ok 42 should be truthy
# server error logging with Error does not affect event tags
ok 43 start error
ok 44 should be strictly equal
ok 45 should be truthy
ok 46 should be deeply equivalent
ok 47 should be falsy
ok 48 should be truthy
ok 49 should be deeply equivalent
ok 50 should be deeply equivalent
# server error logging with String
ok 51 start error
ok 52 should be strictly equal
ok 53 should be truthy
ok 54 should be deeply equivalent
ok 55 should be falsy
ok 56 should be truthy
# server error logging with Object
ok 57 start error
ok 58 should be strictly equal
ok 59 should be truthy
ok 60 should be deeply equivalent
ok 61 should be falsy
ok 62 should be deeply equivalent
# request error logging with Error
ok 63 start error
ok 64 should be strictly equal
ok 65 should be truthy
ok 66 should be truthy
ok 67 should be deeply equivalent
ok 68 should be falsy
ok 69 should be truthy
ok 70 should be strictly equal
ok 71 should be strictly equal
ok 72 should be strictly equal
ok 73 should be strictly equal
ok 74 should be strictly equal
ok 75 should be strictly equal
# request error logging with Error does not affect event tags
ok 76 start error
ok 77 should be strictly equal
ok 78 should be truthy
ok 79 should be truthy
ok 80 should be deeply equivalent
ok 81 should be falsy
ok 82 should be truthy
ok 83 should be deeply equivalent
ok 84 should be deeply equivalent
ok 85 should be strictly equal
ok 86 should be strictly equal
ok 87 should be strictly equal
ok 88 should be strictly equal
ok 89 should be strictly equal
ok 90 should be strictly equal
# request error logging with String
ok 91 start error
ok 92 should be strictly equal
ok 93 should be truthy
ok 94 should be truthy
ok 95 should be deeply equivalent
ok 96 should be falsy
ok 97 should be truthy
ok 98 should be strictly equal
ok 99 should be strictly equal
ok 100 should be strictly equal
ok 101 should be strictly equal
ok 102 should be strictly equal
ok 103 should be strictly equal
# request error logging with Object
ok 104 start error
ok 105 should be strictly equal
ok 106 should be truthy
ok 107 should be truthy
ok 108 should be deeply equivalent
ok 109 should be falsy
ok 110 should be deeply equivalent
ok 111 should be strictly equal
ok 112 should be strictly equal
ok 113 should be strictly equal
ok 114 should be strictly equal
ok 115 should be strictly equal
ok 116 should be strictly equal
# error handling
ok 117 null
ok 118 should be strictly equal
ok 119 should be strictly equal
ok 120 should be strictly equal
ok 121 should be strictly equal
ok 122 should be strictly equal
ok 123 should be strictly equal
ok 124 should be truthy
ok 125 should be strictly equal
ok 126 should be deeply equivalent

1..126
# tests 126
# pass  126

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/hapi/basic.test.js
TAP version 13
# extract URL from request
ok 1 no error from startServer
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
# route naming
ok 10 null
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
ok 17 should be strictly equal
# connectionless
ok 18 start error
# connectionless server error logging with Error
ok 19 start error
ok 20 should be strictly equal
ok 21 should be truthy
ok 22 should be deeply equivalent
ok 23 should be falsy
ok 24 should be truthy
# connectionless server error logging with String
ok 25 start error
ok 26 should be strictly equal
ok 27 should be truthy
ok 28 should be deeply equivalent
ok 29 should be falsy
ok 30 should be truthy
# connectionless server error logging with Object
ok 31 start error
ok 32 should be strictly equal
ok 33 should be truthy
ok 34 should be deeply equivalent
ok 35 should be falsy
ok 36 should be deeply equivalent
# server error logging with Error
ok 37 start error
ok 38 should be strictly equal
ok 39 should be truthy
ok 40 should be deeply equivalent
ok 41 should be falsy
ok 42 should be truthy
# server error logging with Error does not affect event tags
ok 43 start error
ok 44 should be strictly equal
ok 45 should be truthy
ok 46 should be deeply equivalent
ok 47 should be falsy
ok 48 should be truthy
ok 49 should be deeply equivalent
ok 50 should be deeply equivalent
# server error logging with String
ok 51 start error
ok 52 should be strictly equal
ok 53 should be truthy
ok 54 should be deeply equivalent
ok 55 should be falsy
ok 56 should be truthy
# server error logging with Object
ok 57 start error
ok 58 should be strictly equal
ok 59 should be truthy
ok 60 should be deeply equivalent
ok 61 should be falsy
ok 62 should be deeply equivalent
# request error logging with Error
ok 63 start error
ok 64 should be strictly equal
ok 65 should be truthy
ok 66 should be truthy
ok 67 should be deeply equivalent
ok 68 should be falsy
ok 69 should be truthy
ok 70 should be strictly equal
ok 71 should be strictly equal
ok 72 should be strictly equal
ok 73 should be strictly equal
ok 74 should be strictly equal
ok 75 should be strictly equal
# request error logging with Error does not affect event tags
ok 76 start error
ok 77 should be strictly equal
ok 78 should be truthy
ok 79 should be truthy
ok 80 should be deeply equivalent
ok 81 should be falsy
ok 82 should be truthy
ok 83 should be deeply equivalent
ok 84 should be deeply equivalent
ok 85 should be strictly equal
ok 86 should be strictly equal
ok 87 should be strictly equal
ok 88 should be strictly equal
ok 89 should be strictly equal
ok 90 should be strictly equal
# request error logging with String
ok 91 start error
ok 92 should be strictly equal
ok 93 should be truthy
ok 94 should be truthy
ok 95 should be deeply equivalent
ok 96 should be falsy
ok 97 should be truthy
ok 98 should be strictly equal
ok 99 should be strictly equal
ok 100 should be strictly equal
ok 101 should be strictly equal
ok 102 should be strictly equal
ok 103 should be strictly equal
# request error logging with Object
ok 104 start error
ok 105 should be strictly equal
ok 106 should be truthy
ok 107 should be truthy
ok 108 should be deeply equivalent
ok 109 should be falsy
ok 110 should be deeply equivalent
ok 111 should be strictly equal
ok 112 should be strictly equal
ok 113 should be strictly equal
ok 114 should be strictly equal
ok 115 should be strictly equal
ok 116 should be strictly equal
# error handling
ok 117 null
ok 118 should be strictly equal
ok 119 should be strictly equal
ok 120 should be strictly equal
ok 121 should be strictly equal
ok 122 should be strictly equal
ok 123 should be strictly equal
ok 124 should be truthy
ok 125 should be strictly equal
ok 126 should be deeply equivalent

1..126
# tests 126
# pass  126

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/hapi/set-framework-hapi.test.js
TAP version 13
# hapi set-framework test
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal

1..4
# tests 4
# pass  4

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/hapi/set-framework-hapihapi.test.js
TAP version 13
# @hapi/hapi set-framework test
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
{"log.level":"error","@timestamp":"2021-11-25T13:02:33.974Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"APM Server transport error (ECONNREFUSED): connect ECONNREFUSED 127.0.0.1:8200"}

1..4
# tests 4
# pass  4

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/http/aborted-requests-disabled.test.js
TAP version 13
# client-side abort - call end
ok 1 should not have any samples to begin with
ok 2 should send transaction
# client-side abort - don't call end
ok 3 should not have any samples to begin with
ok 4 should not send transaction
# server-side abort - call end
ok 5 should not have any samples to begin with
ok 6 should have closed socket
ok 7 res should emit close event
ok 8 should not send transactions
# server-side abort - don't call end
ok 9 should not have any samples to begin with
ok 10 should have closed socket
ok 11 res should emit close event
ok 12 should not send transactions

1..12
# tests 12
# pass  12

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/http/aborted-requests-enabled.test.js
TAP version 13
# client-side abort below error threshold - call end
ok 1 should not have any samples to begin with
ok 2 client request should emit ECONNRESET error
ok 3 should have one transaction
ok 4 should have zero spans
ok 5 should have expected transaction name
ok 6 should have expected transaction type
ok 7 should have expected transaction result
ok 8 should have expected transaction context.request.method
ok 9 should send transaction
# client-side abort above error threshold - call end
ok 10 should not have any samples to begin with
ok 11 should be strictly equal
ok 12 should be truthy
ok 13 should have one transaction
ok 14 should have zero spans
ok 15 should have expected transaction name
ok 16 should have expected transaction type
ok 17 should have expected transaction result
ok 18 should have expected transaction context.request.method
ok 19 should send transactions
# client-side abort below error threshold - don't call end
ok 20 should not have any samples to begin with
# client-side abort above error threshold - don't call end
ok 21 should not have any samples to begin with
ok 22 should be strictly equal
ok 23 should be truthy
# server-side abort below error threshold and socket closed - call end
ok 24 should not have any samples to begin with
ok 25 should have closed socket
ok 26 should not have ended transaction
ok 27 should have one transaction
ok 28 should have zero spans
ok 29 should have expected transaction name
ok 30 should have expected transaction type
ok 31 should have expected transaction result
ok 32 should have expected transaction context.request.method
ok 33 should send transactions
ok 34 should have ended transaction
# server-side abort above error threshold and socket closed - call end
ok 35 should not have any samples to begin with
ok 36 should be strictly equal
ok 37 should be truthy
ok 38 should have closed socket
ok 39 should not have ended transaction
ok 40 should have one transaction
ok 41 should have zero spans
ok 42 should have expected transaction name
ok 43 should have expected transaction type
ok 44 should have expected transaction result
ok 45 should have expected transaction context.request.method
ok 46 should send transactions
ok 47 should have ended transaction
# server-side abort below error threshold and socket closed - don't call end
ok 48 should not have any samples to begin with
ok 49 should have closed socket
ok 50 should not have ended transaction
# server-side abort above error threshold and socket closed - don't call end
ok 51 should not have any samples to begin with
ok 52 should be strictly equal
ok 53 should be truthy
ok 54 should have closed socket
ok 55 should have ended transaction
# server-side abort below error threshold but socket not closed - call end
ok 56 should not have any samples to begin with
ok 57 should have one transaction
ok 58 should have zero spans
ok 59 should have expected transaction name
ok 60 should have expected transaction type
ok 61 should have expected transaction result
ok 62 should have expected transaction context.request.method
ok 63 should send transactions
# server-side abort above error threshold but socket not closed - call end
ok 64 should not have any samples to begin with
ok 65 should have one transaction
ok 66 should have zero spans
ok 67 should have expected transaction name
ok 68 should have expected transaction type
ok 69 should have expected transaction result
ok 70 should have expected transaction context.request.method
ok 71 should send transactions

1..71
# tests 71
# pass  71

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/http/basic.test.js
TAP version 13
# http.createServer
# direct callback
ok 1 traceContext trace id matches parent trace id
ok 2 traceContext id does not match parent id
ok 3 traceContext flags matches parent flags
ok 4 should have one transaction
ok 5 should have zero spans
ok 6 should have expected transaction name
ok 7 should have expected transaction type
ok 8 should have expected transaction result
ok 9 should have expected transaction context.request.method
# server.addListener()
ok 10 traceContext trace id matches parent trace id
ok 11 traceContext id does not match parent id
ok 12 traceContext flags matches parent flags
ok 13 should have one transaction
ok 14 should have zero spans
ok 15 should have expected transaction name
ok 16 should have expected transaction type
ok 17 should have expected transaction result
ok 18 should have expected transaction context.request.method
# server.on()
ok 19 traceContext trace id matches parent trace id
ok 20 traceContext id does not match parent id
ok 21 traceContext flags matches parent flags
ok 22 should have one transaction
ok 23 should have zero spans
ok 24 should have expected transaction name
ok 25 should have expected transaction type
ok 26 should have expected transaction result
ok 27 should have expected transaction context.request.method
# new http.Server
# direct callback
ok 28 traceContext trace id matches parent trace id
ok 29 traceContext id does not match parent id
ok 30 traceContext flags matches parent flags
ok 31 should have one transaction
ok 32 should have zero spans
ok 33 should have expected transaction name
ok 34 should have expected transaction type
ok 35 should have expected transaction result
ok 36 should have expected transaction context.request.method
# server.addListener()
ok 37 traceContext trace id matches parent trace id
ok 38 traceContext id does not match parent id
ok 39 traceContext flags matches parent flags
ok 40 should have one transaction
ok 41 should have zero spans
ok 42 should have expected transaction name
ok 43 should have expected transaction type
ok 44 should have expected transaction result
ok 45 should have expected transaction context.request.method
# server.on()
ok 46 traceContext trace id matches parent trace id
ok 47 traceContext id does not match parent id
ok 48 traceContext flags matches parent flags
ok 49 should have one transaction
ok 50 should have zero spans
ok 51 should have expected transaction name
ok 52 should have expected transaction type
ok 53 should have expected transaction result
ok 54 should have expected transaction context.request.method
# support elastic-apm-traceparent header
ok 55 traceContext trace id matches parent trace id
ok 56 traceContext id does not match parent id
ok 57 traceContext flags matches parent flags
ok 58 should have one transaction
ok 59 should have zero spans
ok 60 should have expected transaction name
ok 61 should have expected transaction type
ok 62 should have expected transaction result
ok 63 should have expected transaction context.request.method

1..63
# tests 63
# pass  63

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/http/bind-write-head-to-transaction.test.js
TAP version 13
# response writeHead is bound to transaction
ok 1 has a transaction
ok 2 has correct result

1..2
# tests 2
# pass  2

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/http/disabling.test.js
TAP version 13
# http split disabling
# incoming enabled + outgoing enabled
ok 1 transaction count
ok 2 span count
ok 3 found request transaction
ok 4 transaction name
ok 5 transaction result
ok 6 transaction method
ok 7 found top transaction
ok 8 transaction name
ok 9 span name
ok 10 span type
ok 11 span subtype
ok 12 span action
# incoming enabled + outgoing disabled
ok 13 transaction count
ok 14 span count
ok 15 found request transaction
ok 16 transaction name
ok 17 transaction result
ok 18 transaction method
ok 19 found top transaction
ok 20 transaction name
# incoming disabled + outgoing enabled
ok 21 transaction count
ok 22 span count
ok 23 found top transaction
ok 24 transaction name
ok 25 span name
ok 26 span type
ok 27 span subtype
ok 28 span action
# incoming disabled + outgoing disabled
ok 29 transaction count
ok 30 span count
ok 31 found top transaction
ok 32 transaction name

1..32
# tests 32
# pass  32

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/http/github-179.test.js
TAP version 13
# https://github.com/opbeat/opbeat-node/issues/179
{"log.level":"error","@timestamp":"2021-11-25T13:02:50.514Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"APM Server transport error (ECONNREFUSED): connect ECONNREFUSED 127.0.0.1:8200"}

1..0
# tests 0
# pass  0

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/http/github-423.test.js
TAP version 13
# https://github.com/elastic/apm-agent-nodejs/issues/423
ok 1 body should be expected size
ok 2 body should be uncompressed
{"log.level":"error","@timestamp":"2021-11-25T13:03:51.844Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"APM Server transport error (ECONNREFUSED): connect ECONNREFUSED 127.0.0.1:8200"}

1..2
# tests 2
# pass  2

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/http/ignore-url-does-not-leak-trans.test.js
TAP version 13
# an ignored incoming http URL does not leak previous transaction
ok 1 current transaction in ignored URL handler is null
ok 2 no spans are created in ignored URL handler
ok 3 should be strictly equal
ok 4 only have the span for the http *request*

1..4
# tests 4
# pass  4

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/http/ignoring.test.js
TAP version 13
# ignore url string - no match
ok 1 should be strictly equal
ok 2 should be strictly equal
# ignore url string - match
# ignore url regex - no match
ok 3 should be strictly equal
ok 4 should be strictly equal
# ignore url regex - match
# ignore url wildcard - no match
ok 5 should be strictly equal
ok 6 should be strictly equal
# ignore url wildcard - match
# ignore User-Agent string - no match
ok 7 should be strictly equal
ok 8 should be strictly equal
# ignore User-Agent string - match
# ignore User-Agent regex - no match
ok 9 should be strictly equal
ok 10 should be strictly equal
# ignore User-Agent regex - match

1..10
# tests 10
# pass  10

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/http/outgoing.test.js
TAP version 13
# http.request(options)
ok 1 should have traceparent header
ok 2 should have elastic-apm-traceparent header
ok 3 traceparent header has matching version
ok 4 traceparent header has matching traceId
ok 5 traceparent header has valid id
ok 6 traceparent header has matching flags
ok 7 has one transaction
ok 8 has one span
ok 9 has expected span name
ok 10 should be strictly equal
ok 11 should be deeply equivalent
ok 12 should be deeply equivalent
# http.request(options, callback)
ok 13 should have traceparent header
ok 14 should have elastic-apm-traceparent header
ok 15 traceparent header has matching version
ok 16 traceparent header has matching traceId
ok 17 traceparent header has valid id
ok 18 traceparent header has matching flags
ok 19 has one transaction
ok 20 has one span
ok 21 has expected span name
ok 22 should be strictly equal
ok 23 should be deeply equivalent
ok 24 should be deeply equivalent
# http: consider useElasticTraceparentHeader config option
ok 25 should have traceparent header
ok 26 should be strictly equal
ok 27 traceparent header has matching version
ok 28 traceparent header has matching traceId
ok 29 traceparent header has valid id
ok 30 traceparent header has matching flags
ok 31 has one transaction
ok 32 has one span
ok 33 has expected span name
ok 34 should be strictly equal
ok 35 should be deeply equivalent
ok 36 should be deeply equivalent
# http.request(options, callback) - aborted before socket
ok 37 has one transaction
ok 38 has one span
ok 39 has expected span name
ok 40 should be strictly equal
ok 41 should be deeply equivalent
ok 42 should be deeply equivalent
# http.request(options, callback) - aborted on socket
ok 43 has one transaction
ok 44 has one span
ok 45 has expected span name
ok 46 should be strictly equal
ok 47 should be deeply equivalent
ok 48 should be deeply equivalent
# http.request(options, callback) - aborted on data
ok 49 has one transaction
ok 50 has one span
ok 51 has expected span name
ok 52 should be strictly equal
ok 53 should be deeply equivalent
ok 54 should be deeply equivalent
# http.request(urlString)
ok 55 should have traceparent header
ok 56 should have elastic-apm-traceparent header
ok 57 traceparent header has matching version
ok 58 traceparent header has matching traceId
ok 59 traceparent header has valid id
ok 60 traceparent header has matching flags
ok 61 has one transaction
ok 62 has one span
ok 63 has expected span name
ok 64 should be strictly equal
ok 65 should be deeply equivalent
ok 66 should be deeply equivalent
# http.request(urlString, callback)
ok 67 should have traceparent header
ok 68 should have elastic-apm-traceparent header
ok 69 traceparent header has matching version
ok 70 traceparent header has matching traceId
ok 71 traceparent header has valid id
ok 72 traceparent header has matching flags
ok 73 has one transaction
ok 74 has one span
ok 75 has expected span name
ok 76 should be strictly equal
ok 77 should be deeply equivalent
ok 78 should be deeply equivalent
# http.request(urlObject)
ok 79 should have traceparent header
ok 80 should have elastic-apm-traceparent header
ok 81 traceparent header has matching version
ok 82 traceparent header has matching traceId
ok 83 traceparent header has valid id
ok 84 traceparent header has matching flags
ok 85 has one transaction
ok 86 has one span
ok 87 has expected span name
ok 88 should be strictly equal
ok 89 should be deeply equivalent
ok 90 should be deeply equivalent
# http.request(urlObject, callback)
ok 91 should have traceparent header
ok 92 should have elastic-apm-traceparent header
ok 93 traceparent header has matching version
ok 94 traceparent header has matching traceId
ok 95 traceparent header has valid id
ok 96 traceparent header has matching flags
ok 97 has one transaction
ok 98 has one span
ok 99 has expected span name
ok 100 should be strictly equal
ok 101 should be deeply equivalent
ok 102 should be deeply equivalent
# http.get(urlString)
ok 103 should have traceparent header
ok 104 should have elastic-apm-traceparent header
ok 105 traceparent header has matching version
ok 106 traceparent header has matching traceId
ok 107 traceparent header has valid id
ok 108 traceparent header has matching flags
ok 109 has one transaction
ok 110 has one span
ok 111 has expected span name
ok 112 should be strictly equal
ok 113 should be deeply equivalent
ok 114 should be deeply equivalent
# http.get(urlString, callback)
ok 115 should have traceparent header
ok 116 should have elastic-apm-traceparent header
ok 117 traceparent header has matching version
ok 118 traceparent header has matching traceId
ok 119 traceparent header has valid id
ok 120 traceparent header has matching flags
ok 121 has one transaction
ok 122 has one span
ok 123 has expected span name
ok 124 should be strictly equal
ok 125 should be deeply equivalent
ok 126 should be deeply equivalent
# http.get(urlObject)
ok 127 should have traceparent header
ok 128 should have elastic-apm-traceparent header
ok 129 traceparent header has matching version
ok 130 traceparent header has matching traceId
ok 131 traceparent header has valid id
ok 132 traceparent header has matching flags
ok 133 has one transaction
ok 134 has one span
ok 135 has expected span name
ok 136 should be strictly equal
ok 137 should be deeply equivalent
ok 138 should be deeply equivalent
# http.get(urlObject, callback)
ok 139 should have traceparent header
ok 140 should have elastic-apm-traceparent header
ok 141 traceparent header has matching version
ok 142 traceparent header has matching traceId
ok 143 traceparent header has valid id
ok 144 traceparent header has matching flags
ok 145 has one transaction
ok 146 has one span
ok 147 has expected span name
ok 148 should be strictly equal
ok 149 should be deeply equivalent
ok 150 should be deeply equivalent
# https.request(options)
ok 151 should have traceparent header
ok 152 should have elastic-apm-traceparent header
ok 153 traceparent header has matching version
ok 154 traceparent header has matching traceId
ok 155 traceparent header has valid id
ok 156 traceparent header has matching flags
ok 157 has one transaction
ok 158 has one span
ok 159 has expected span name
ok 160 should be strictly equal
ok 161 should be deeply equivalent
ok 162 should be deeply equivalent
# https.request(options, callback)
ok 163 should have traceparent header
ok 164 should have elastic-apm-traceparent header
ok 165 traceparent header has matching version
ok 166 traceparent header has matching traceId
ok 167 traceparent header has valid id
ok 168 traceparent header has matching flags
ok 169 has one transaction
ok 170 has one span
ok 171 has expected span name
ok 172 should be strictly equal
ok 173 should be deeply equivalent
ok 174 should be deeply equivalent
# https: consider useElasticTraceparentHeader config option
ok 175 should have traceparent header
ok 176 should be strictly equal
ok 177 traceparent header has matching version
ok 178 traceparent header has matching traceId
ok 179 traceparent header has valid id
ok 180 traceparent header has matching flags
ok 181 has one transaction
ok 182 has one span
ok 183 has expected span name
ok 184 should be strictly equal
ok 185 should be deeply equivalent
ok 186 should be deeply equivalent
# https.request(urlString, options)
ok 187 should have traceparent header
ok 188 should have elastic-apm-traceparent header
ok 189 traceparent header has matching version
ok 190 traceparent header has matching traceId
ok 191 traceparent header has valid id
ok 192 traceparent header has matching flags
ok 193 has one transaction
ok 194 has one span
ok 195 has expected span name
ok 196 should be strictly equal
ok 197 should be deeply equivalent
ok 198 should be deeply equivalent
# https.request(urlString, options, callback)
ok 199 should have traceparent header
ok 200 should have elastic-apm-traceparent header
ok 201 traceparent header has matching version
ok 202 traceparent header has matching traceId
ok 203 traceparent header has valid id
ok 204 traceparent header has matching flags
ok 205 has one transaction
ok 206 has one span
ok 207 has expected span name
ok 208 should be strictly equal
ok 209 should be deeply equivalent
ok 210 should be deeply equivalent
# https.request(urlObject, options)
ok 211 should have traceparent header
ok 212 should have elastic-apm-traceparent header
ok 213 traceparent header has matching version
ok 214 traceparent header has matching traceId
ok 215 traceparent header has valid id
ok 216 traceparent header has matching flags
ok 217 has one transaction
ok 218 has one span
ok 219 has expected span name
ok 220 should be strictly equal
ok 221 should be deeply equivalent
ok 222 should be deeply equivalent
# https.request(urlObject, options, callback)
ok 223 should have traceparent header
ok 224 should have elastic-apm-traceparent header
ok 225 traceparent header has matching version
ok 226 traceparent header has matching traceId
ok 227 traceparent header has valid id
ok 228 traceparent header has matching flags
ok 229 has one transaction
ok 230 has one span
ok 231 has expected span name
ok 232 should be strictly equal
ok 233 should be deeply equivalent
ok 234 should be deeply equivalent
# https.get(urlString, options)
ok 235 should have traceparent header
ok 236 should have elastic-apm-traceparent header
ok 237 traceparent header has matching version
ok 238 traceparent header has matching traceId
ok 239 traceparent header has valid id
ok 240 traceparent header has matching flags
ok 241 has one transaction
ok 242 has one span
ok 243 has expected span name
ok 244 should be strictly equal
ok 245 should be deeply equivalent
ok 246 should be deeply equivalent
# https.get(urlString, options, callback)
ok 247 should have traceparent header
ok 248 should have elastic-apm-traceparent header
ok 249 traceparent header has matching version
ok 250 traceparent header has matching traceId
ok 251 traceparent header has valid id
ok 252 traceparent header has matching flags
ok 253 has one transaction
ok 254 has one span
ok 255 has expected span name
ok 256 should be strictly equal
ok 257 should be deeply equivalent
ok 258 should be deeply equivalent
# https.get(urlObject, options)
ok 259 should have traceparent header
ok 260 should have elastic-apm-traceparent header
ok 261 traceparent header has matching version
ok 262 traceparent header has matching traceId
ok 263 traceparent header has valid id
ok 264 traceparent header has matching flags
ok 265 has one transaction
ok 266 has one span
ok 267 has expected span name
ok 268 should be strictly equal
ok 269 should be deeply equivalent
ok 270 should be deeply equivalent
# https.get(urlObject, options, callback)
ok 271 should have traceparent header
ok 272 should have elastic-apm-traceparent header
ok 273 traceparent header has matching version
ok 274 traceparent header has matching traceId
ok 275 traceparent header has valid id
ok 276 traceparent header has matching flags
ok 277 has one transaction
ok 278 has one span
ok 279 has expected span name
ok 280 should be strictly equal
ok 281 should be deeply equivalent
ok 282 should be deeply equivalent

1..282
# tests 282
# pass  282

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/http/request-to-url.test.js
TAP version 13
# getUrlFromRequestAndOptions tests
# options with host
ok 1 url rendered as expected
# options with host and path
ok 2 url rendered as expected
# options with host, path, port, and a query string
ok 3 url rendered as expected
# options with host, path, port, query string, and a username/password
ok 4 url rendered as expected
ok 5 no auth information in url
ok 6 no auth information in url
# options with host and hostname
ok 7 url rendered as expected (hostname wins)
ok 8 no auth information in url
ok 9 no auth information in url
# does not crash with unexpected data
ok 10 no url returned
ok 11 URL returned
ok 12 no url returned
# port 80 makes it through
ok 13 port 80 made it through
# missing protocol
ok 14 protocol falls back correctly

1..14
# tests 14
# pass  14

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/http/request.test.js
TAP version 13
# request
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
# Outcome
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal

1..13
# tests 13
# pass  13

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/http/sse.test.js
TAP version 13
# normal response
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
# SSE response with explicit headers
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should be strictly equal
# SSE response with implicit headers
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal

1..14
# tests 14
# pass  14

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/koa/set-framework.test.js
running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/koa-router/new-name.test.js
TAP version 13
# route naming
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
# route naming with params
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
# nested routes
ok 17 should be strictly equal
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
ok 21 should be strictly equal
ok 22 should be strictly equal
ok 23 should be strictly equal
ok 24 should be strictly equal
# nested routes with params
ok 25 should be strictly equal
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
ok 29 should be strictly equal
ok 30 should be strictly equal
ok 31 should be strictly equal
ok 32 should be strictly equal

1..32
# tests 32
# pass  32

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/koa-router/old-name.test.js
TAP version 13
# route naming
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
# route naming with params
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
# nested routes
ok 17 should be strictly equal
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
ok 21 should be strictly equal
ok 22 should be strictly equal
ok 23 should be strictly equal
ok 24 should be strictly equal
# nested routes with params
ok 25 should be strictly equal
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
ok 29 should be strictly equal
ok 30 should be strictly equal
ok 31 should be strictly equal
ok 32 should be strictly equal

1..32
# tests 32
# pass  32

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/mysql/mysql.test.js
TAP version 13
# mysql.createConnection
# basic query with callback
# connection.query(sql, callback)
ok 1 mysql span should not bleed into calling code
ok 2 mysql span should not bleed into user callback
ok 3 null
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should be strictly equal
ok 12 should be deeply equivalent
ok 13 should be deeply equivalent
# connection.query(sql, values, callback)
ok 14 mysql span should not bleed into calling code
ok 15 mysql span should not bleed into user callback
ok 16 null
ok 17 should be strictly equal
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
ok 21 should be strictly equal
ok 22 should be strictly equal
ok 23 should be strictly equal
ok 24 should be strictly equal
ok 25 should be deeply equivalent
ok 26 should be deeply equivalent
# connection.query(options, callback)
ok 27 mysql span should not bleed into calling code
ok 28 mysql span should not bleed into user callback
ok 29 null
ok 30 should be strictly equal
ok 31 should be strictly equal
ok 32 should be strictly equal
ok 33 should be strictly equal
ok 34 should be strictly equal
ok 35 should be strictly equal
ok 36 should be strictly equal
ok 37 should be strictly equal
ok 38 should be deeply equivalent
ok 39 should be deeply equivalent
# connection.query(options, values, callback)
ok 40 mysql span should not bleed into calling code
ok 41 mysql span should not bleed into user callback
ok 42 null
ok 43 should be strictly equal
ok 44 should be strictly equal
ok 45 should be strictly equal
ok 46 should be strictly equal
ok 47 should be strictly equal
ok 48 should be strictly equal
ok 49 should be strictly equal
ok 50 should be strictly equal
ok 51 should be deeply equivalent
ok 52 should be deeply equivalent
# connection.query(query)
ok 53 mysql span should not bleed into calling code
ok 54 mysql span should not bleed into user callback
ok 55 null
ok 56 should be strictly equal
ok 57 should be strictly equal
ok 58 should be strictly equal
ok 59 should be strictly equal
ok 60 should be strictly equal
ok 61 should be strictly equal
ok 62 should be strictly equal
ok 63 should be strictly equal
ok 64 should be deeply equivalent
ok 65 should be deeply equivalent
# connection.query(query_with_values)
ok 66 mysql span should not bleed into calling code
ok 67 mysql span should not bleed into user callback
ok 68 null
ok 69 should be strictly equal
ok 70 should be strictly equal
ok 71 should be strictly equal
ok 72 should be strictly equal
ok 73 should be strictly equal
ok 74 should be strictly equal
ok 75 should be strictly equal
ok 76 should be strictly equal
ok 77 should be deeply equivalent
ok 78 should be deeply equivalent
# connection.query(sql) - no callback
ok 79 mysql span should not bleed into calling code
ok 80 should be strictly equal
ok 81 should be strictly equal
ok 82 should be strictly equal
ok 83 should be strictly equal
ok 84 should be strictly equal
ok 85 should be strictly equal
ok 86 should be strictly equal
ok 87 should be deeply equivalent
ok 88 should be deeply equivalent
# basic query streaming
# connection.query(sql)
ok 89 mysql span should not bleed into calling code
ok 90 mysql span should not be active in user code
ok 91 should be strictly equal
ok 92 mysql span should not be active in user code
ok 93 should be strictly equal
ok 94 should be strictly equal
ok 95 should be strictly equal
ok 96 should be strictly equal
ok 97 should be strictly equal
ok 98 should be strictly equal
ok 99 should be strictly equal
ok 100 should be strictly equal
ok 101 should be deeply equivalent
ok 102 should be deeply equivalent
# connection.query(sql, values)
ok 103 mysql span should not bleed into calling code
ok 104 mysql span should not be active in user code
ok 105 should be strictly equal
ok 106 mysql span should not be active in user code
ok 107 should be strictly equal
ok 108 should be strictly equal
ok 109 should be strictly equal
ok 110 should be strictly equal
ok 111 should be strictly equal
ok 112 should be strictly equal
ok 113 should be strictly equal
ok 114 should be strictly equal
ok 115 should be deeply equivalent
ok 116 should be deeply equivalent
# connection.query(options)
ok 117 mysql span should not bleed into calling code
ok 118 mysql span should not be active in user code
ok 119 should be strictly equal
ok 120 mysql span should not be active in user code
ok 121 should be strictly equal
ok 122 should be strictly equal
ok 123 should be strictly equal
ok 124 should be strictly equal
ok 125 should be strictly equal
ok 126 should be strictly equal
ok 127 should be strictly equal
ok 128 should be strictly equal
ok 129 should be deeply equivalent
ok 130 should be deeply equivalent
# connection.query(options, values)
ok 131 mysql span should not bleed into calling code
ok 132 mysql span should not be active in user code
ok 133 should be strictly equal
ok 134 mysql span should not be active in user code
ok 135 should be strictly equal
ok 136 should be strictly equal
ok 137 should be strictly equal
ok 138 should be strictly equal
ok 139 should be strictly equal
ok 140 should be strictly equal
ok 141 should be strictly equal
ok 142 should be strictly equal
ok 143 should be deeply equivalent
ok 144 should be deeply equivalent
# connection.query(query)
ok 145 mysql span should not bleed into calling code
ok 146 mysql span should not be active in user code
ok 147 should be strictly equal
ok 148 mysql span should not be active in user code
ok 149 should be strictly equal
ok 150 should be strictly equal
ok 151 should be strictly equal
ok 152 should be strictly equal
ok 153 should be strictly equal
ok 154 should be strictly equal
ok 155 should be strictly equal
ok 156 should be strictly equal
ok 157 should be deeply equivalent
ok 158 should be deeply equivalent
# connection.query(query_with_values)
ok 159 mysql span should not bleed into calling code
ok 160 mysql span should not be active in user code
ok 161 should be strictly equal
ok 162 mysql span should not be active in user code
ok 163 should be strictly equal
ok 164 should be strictly equal
ok 165 should be strictly equal
ok 166 should be strictly equal
ok 167 should be strictly equal
ok 168 should be strictly equal
ok 169 should be strictly equal
ok 170 should be strictly equal
ok 171 should be deeply equivalent
ok 172 should be deeply equivalent
# simultaneous queries
# on same connection
ok 173 null
ok 174 should be strictly equal
ok 175 null
ok 176 should be strictly equal
ok 177 null
ok 178 should be strictly equal
ok 179 should be strictly equal
ok 180 should be strictly equal
ok 181 should be strictly equal
ok 182 should be strictly equal
ok 183 should be strictly equal
ok 184 should be strictly equal
ok 185 should be strictly equal
ok 186 should be deeply equivalent
ok 187 should be deeply equivalent
ok 188 each mysql span is a child of the transaction
ok 189 should be strictly equal
ok 190 should be strictly equal
ok 191 should be strictly equal
ok 192 should be strictly equal
ok 193 should be deeply equivalent
ok 194 should be deeply equivalent
ok 195 each mysql span is a child of the transaction
ok 196 should be strictly equal
ok 197 should be strictly equal
ok 198 should be strictly equal
ok 199 should be strictly equal
ok 200 should be deeply equivalent
ok 201 should be deeply equivalent
ok 202 each mysql span is a child of the transaction
# on different connections
ok 203 null
ok 204 null
ok 205 null
ok 206 null
ok 207 should be strictly equal
ok 208 null
ok 209 should be strictly equal
ok 210 null
ok 211 should be strictly equal
ok 212 should be strictly equal
ok 213 should be strictly equal
ok 214 should be strictly equal
ok 215 should be strictly equal
ok 216 should be strictly equal
ok 217 should be strictly equal
ok 218 should be strictly equal
ok 219 should be deeply equivalent
ok 220 should be deeply equivalent
ok 221 each mysql span is a child of the transaction
ok 222 should be strictly equal
ok 223 should be strictly equal
ok 224 should be strictly equal
ok 225 should be strictly equal
ok 226 should be deeply equivalent
ok 227 should be deeply equivalent
ok 228 each mysql span is a child of the transaction
ok 229 should be strictly equal
ok 230 should be strictly equal
ok 231 should be strictly equal
ok 232 should be strictly equal
ok 233 should be deeply equivalent
ok 234 should be deeply equivalent
ok 235 each mysql span is a child of the transaction
# simultaneous transactions
ok 236 null
ok 237 should be strictly equal
ok 238 null
ok 239 should be strictly equal
ok 240 null
ok 241 should be strictly equal
ok 242 should be strictly equal
ok 243 should be strictly equal
ok 244 should be deeply equivalent
ok 245 transaction should have span
ok 246 should be strictly equal
ok 247 should be strictly equal
ok 248 should be strictly equal
ok 249 should be strictly equal
ok 250 should be deeply equivalent
ok 251 should be deeply equivalent
ok 252 transaction should have span
ok 253 should be strictly equal
ok 254 should be strictly equal
ok 255 should be strictly equal
ok 256 should be strictly equal
ok 257 should be deeply equivalent
ok 258 should be deeply equivalent
ok 259 transaction should have span
ok 260 should be strictly equal
ok 261 should be strictly equal
ok 262 should be strictly equal
ok 263 should be strictly equal
ok 264 should be deeply equivalent
ok 265 should be deeply equivalent
# mysql.createPool
# basic query with callback
# pool.query(sql, callback)
ok 266 mysql span should not bleed into calling code
ok 267 mysql span should not bleed into user callback
ok 268 null
ok 269 should be strictly equal
ok 270 should be strictly equal
ok 271 should be strictly equal
ok 272 should be strictly equal
ok 273 should be strictly equal
ok 274 should be strictly equal
ok 275 should be strictly equal
ok 276 should be strictly equal
ok 277 should be deeply equivalent
ok 278 should be deeply equivalent
# pool.query(sql, values, callback)
ok 279 mysql span should not bleed into calling code
ok 280 mysql span should not bleed into user callback
ok 281 null
ok 282 should be strictly equal
ok 283 should be strictly equal
ok 284 should be strictly equal
ok 285 should be strictly equal
ok 286 should be strictly equal
ok 287 should be strictly equal
ok 288 should be strictly equal
ok 289 should be strictly equal
ok 290 should be deeply equivalent
ok 291 should be deeply equivalent
# pool.query(options, callback)
ok 292 mysql span should not bleed into calling code
ok 293 mysql span should not bleed into user callback
ok 294 null
ok 295 should be strictly equal
ok 296 should be strictly equal
ok 297 should be strictly equal
ok 298 should be strictly equal
ok 299 should be strictly equal
ok 300 should be strictly equal
ok 301 should be strictly equal
ok 302 should be strictly equal
ok 303 should be deeply equivalent
ok 304 should be deeply equivalent
# pool.query(options, values, callback)
ok 305 mysql span should not bleed into calling code
ok 306 mysql span should not bleed into user callback
ok 307 null
ok 308 should be strictly equal
ok 309 should be strictly equal
ok 310 should be strictly equal
ok 311 should be strictly equal
ok 312 should be strictly equal
ok 313 should be strictly equal
ok 314 should be strictly equal
ok 315 should be strictly equal
ok 316 should be deeply equivalent
ok 317 should be deeply equivalent
# pool.query(query)
ok 318 mysql span should not bleed into calling code
ok 319 mysql span should not bleed into user callback
ok 320 null
ok 321 should be strictly equal
ok 322 should be strictly equal
ok 323 should be strictly equal
ok 324 should be strictly equal
ok 325 should be strictly equal
ok 326 should be strictly equal
ok 327 should be strictly equal
ok 328 should be strictly equal
ok 329 should be deeply equivalent
ok 330 should be deeply equivalent
# pool.query(query_with_values)
ok 331 mysql span should not bleed into calling code
ok 332 mysql span should not bleed into user callback
ok 333 null
ok 334 should be strictly equal
ok 335 should be strictly equal
ok 336 should be strictly equal
ok 337 should be strictly equal
ok 338 should be strictly equal
ok 339 should be strictly equal
ok 340 should be strictly equal
ok 341 should be strictly equal
ok 342 should be deeply equivalent
ok 343 should be deeply equivalent
# pool.query(sql) - no callback
ok 344 mysql span should not bleed into calling code
ok 345 should be strictly equal
ok 346 should be strictly equal
ok 347 should be strictly equal
ok 348 should be strictly equal
ok 349 should be strictly equal
ok 350 should be strictly equal
ok 351 should be strictly equal
ok 352 should be deeply equivalent
ok 353 should be deeply equivalent
# basic query streaming
# pool.query(sql)
ok 354 mysql span should not bleed into calling code
ok 355 mysql span should not be active in user code
ok 356 should be strictly equal
ok 357 mysql span should not be active in user code
ok 358 should be strictly equal
ok 359 should be strictly equal
ok 360 should be strictly equal
ok 361 should be strictly equal
ok 362 should be strictly equal
ok 363 should be strictly equal
ok 364 should be strictly equal
ok 365 should be strictly equal
ok 366 should be deeply equivalent
ok 367 should be deeply equivalent
# pool.query(sql, values)
ok 368 mysql span should not bleed into calling code
ok 369 mysql span should not be active in user code
ok 370 should be strictly equal
ok 371 mysql span should not be active in user code
ok 372 should be strictly equal
ok 373 should be strictly equal
ok 374 should be strictly equal
ok 375 should be strictly equal
ok 376 should be strictly equal
ok 377 should be strictly equal
ok 378 should be strictly equal
ok 379 should be strictly equal
ok 380 should be deeply equivalent
ok 381 should be deeply equivalent
# pool.query(options)
ok 382 mysql span should not bleed into calling code
ok 383 mysql span should not be active in user code
ok 384 should be strictly equal
ok 385 mysql span should not be active in user code
ok 386 should be strictly equal
ok 387 should be strictly equal
ok 388 should be strictly equal
ok 389 should be strictly equal
ok 390 should be strictly equal
ok 391 should be strictly equal
ok 392 should be strictly equal
ok 393 should be strictly equal
ok 394 should be deeply equivalent
ok 395 should be deeply equivalent
# pool.query(options, values)
ok 396 mysql span should not bleed into calling code
ok 397 mysql span should not be active in user code
ok 398 should be strictly equal
ok 399 mysql span should not be active in user code
ok 400 should be strictly equal
ok 401 should be strictly equal
ok 402 should be strictly equal
ok 403 should be strictly equal
ok 404 should be strictly equal
ok 405 should be strictly equal
ok 406 should be strictly equal
ok 407 should be strictly equal
ok 408 should be deeply equivalent
ok 409 should be deeply equivalent
# pool.query(query)
ok 410 mysql span should not bleed into calling code
ok 411 mysql span should not be active in user code
ok 412 should be strictly equal
ok 413 mysql span should not be active in user code
ok 414 should be strictly equal
ok 415 should be strictly equal
ok 416 should be strictly equal
ok 417 should be strictly equal
ok 418 should be strictly equal
ok 419 should be strictly equal
ok 420 should be strictly equal
ok 421 should be strictly equal
ok 422 should be deeply equivalent
ok 423 should be deeply equivalent
# pool.query(query_with_values)
ok 424 mysql span should not bleed into calling code
ok 425 mysql span should not be active in user code
ok 426 should be strictly equal
ok 427 mysql span should not be active in user code
ok 428 should be strictly equal
ok 429 should be strictly equal
ok 430 should be strictly equal
ok 431 should be strictly equal
ok 432 should be strictly equal
ok 433 should be strictly equal
ok 434 should be strictly equal
ok 435 should be strictly equal
ok 436 should be deeply equivalent
ok 437 should be deeply equivalent
# simultaneous queries
# on same connection
ok 438 null
ok 439 should be strictly equal
ok 440 null
ok 441 should be strictly equal
ok 442 null
ok 443 should be strictly equal
ok 444 should be strictly equal
ok 445 should be strictly equal
ok 446 should be strictly equal
ok 447 should be strictly equal
ok 448 should be strictly equal
ok 449 should be strictly equal
ok 450 should be strictly equal
ok 451 should be deeply equivalent
ok 452 should be deeply equivalent
ok 453 each mysql span is a child of the transaction
ok 454 should be strictly equal
ok 455 should be strictly equal
ok 456 should be strictly equal
ok 457 should be strictly equal
ok 458 should be deeply equivalent
ok 459 should be deeply equivalent
ok 460 each mysql span is a child of the transaction
ok 461 should be strictly equal
ok 462 should be strictly equal
ok 463 should be strictly equal
ok 464 should be strictly equal
ok 465 should be deeply equivalent
ok 466 should be deeply equivalent
ok 467 each mysql span is a child of the transaction
# on different connections
ok 468 null
ok 469 null
ok 470 should be strictly equal
ok 471 null
ok 472 null
ok 473 null
ok 474 should be strictly equal
ok 475 null
ok 476 should be strictly equal
ok 477 should be strictly equal
ok 478 should be strictly equal
ok 479 should be strictly equal
ok 480 should be strictly equal
ok 481 should be strictly equal
ok 482 should be strictly equal
ok 483 should be strictly equal
ok 484 should be deeply equivalent
ok 485 should be deeply equivalent
ok 486 each mysql span is a child of the transaction
ok 487 should be strictly equal
ok 488 should be strictly equal
ok 489 should be strictly equal
ok 490 should be strictly equal
ok 491 should be deeply equivalent
ok 492 should be deeply equivalent
ok 493 each mysql span is a child of the transaction
ok 494 should be strictly equal
ok 495 should be strictly equal
ok 496 should be strictly equal
ok 497 should be strictly equal
ok 498 should be deeply equivalent
ok 499 should be deeply equivalent
ok 500 each mysql span is a child of the transaction
# simultaneous transactions
ok 501 null
ok 502 should be strictly equal
ok 503 null
ok 504 should be strictly equal
ok 505 null
ok 506 should be strictly equal
ok 507 should be strictly equal
ok 508 should be strictly equal
ok 509 should be deeply equivalent
ok 510 transaction should have span
ok 511 should be strictly equal
ok 512 should be strictly equal
ok 513 should be strictly equal
ok 514 should be strictly equal
ok 515 should be deeply equivalent
ok 516 should be deeply equivalent
ok 517 transaction should have span
ok 518 should be strictly equal
ok 519 should be strictly equal
ok 520 should be strictly equal
ok 521 should be strictly equal
ok 522 should be deeply equivalent
ok 523 should be deeply equivalent
ok 524 transaction should have span
ok 525 should be strictly equal
ok 526 should be strictly equal
ok 527 should be strictly equal
ok 528 should be strictly equal
ok 529 should be deeply equivalent
ok 530 should be deeply equivalent
# connection.release()
ok 531 null
ok 532 null
ok 533 mysql span should not bleed into user callback
ok 534 null
ok 535 should be strictly equal
ok 536 should be strictly equal
ok 537 should be strictly equal
ok 538 should be strictly equal
ok 539 should be strictly equal
ok 540 should be strictly equal
ok 541 should be strictly equal
ok 542 should be strictly equal
ok 543 should be deeply equivalent
ok 544 should be deeply equivalent
# mysql.createPoolAndGetConnection
# basic query with callback
# pool > connection.query(sql, callback)
ok 545 mysql span should not bleed into calling code
ok 546 mysql span should not bleed into user callback
ok 547 null
ok 548 should be strictly equal
ok 549 should be strictly equal
ok 550 should be strictly equal
ok 551 should be strictly equal
ok 552 should be strictly equal
ok 553 should be strictly equal
ok 554 should be strictly equal
ok 555 should be strictly equal
ok 556 should be deeply equivalent
ok 557 should be deeply equivalent
# pool > connection.query(sql, values, callback)
ok 558 mysql span should not bleed into calling code
ok 559 mysql span should not bleed into user callback
ok 560 null
ok 561 should be strictly equal
ok 562 should be strictly equal
ok 563 should be strictly equal
ok 564 should be strictly equal
ok 565 should be strictly equal
ok 566 should be strictly equal
ok 567 should be strictly equal
ok 568 should be strictly equal
ok 569 should be deeply equivalent
ok 570 should be deeply equivalent
# pool > connection.query(options, callback)
ok 571 mysql span should not bleed into calling code
ok 572 mysql span should not bleed into user callback
ok 573 null
ok 574 should be strictly equal
ok 575 should be strictly equal
ok 576 should be strictly equal
ok 577 should be strictly equal
ok 578 should be strictly equal
ok 579 should be strictly equal
ok 580 should be strictly equal
ok 581 should be strictly equal
ok 582 should be deeply equivalent
ok 583 should be deeply equivalent
# pool > connection.query(options, values, callback)
ok 584 mysql span should not bleed into calling code
ok 585 mysql span should not bleed into user callback
ok 586 null
ok 587 should be strictly equal
ok 588 should be strictly equal
ok 589 should be strictly equal
ok 590 should be strictly equal
ok 591 should be strictly equal
ok 592 should be strictly equal
ok 593 should be strictly equal
ok 594 should be strictly equal
ok 595 should be deeply equivalent
ok 596 should be deeply equivalent
# pool > connection.query(query)
ok 597 mysql span should not bleed into calling code
ok 598 mysql span should not bleed into user callback
ok 599 null
ok 600 should be strictly equal
ok 601 should be strictly equal
ok 602 should be strictly equal
ok 603 should be strictly equal
ok 604 should be strictly equal
ok 605 should be strictly equal
ok 606 should be strictly equal
ok 607 should be strictly equal
ok 608 should be deeply equivalent
ok 609 should be deeply equivalent
# pool > connection.query(query_with_values)
ok 610 mysql span should not bleed into calling code
ok 611 mysql span should not bleed into user callback
ok 612 null
ok 613 should be strictly equal
ok 614 should be strictly equal
ok 615 should be strictly equal
ok 616 should be strictly equal
ok 617 should be strictly equal
ok 618 should be strictly equal
ok 619 should be strictly equal
ok 620 should be strictly equal
ok 621 should be deeply equivalent
ok 622 should be deeply equivalent
# pool > connection.query(sql) - no callback
ok 623 mysql span should not bleed into calling code
ok 624 should be strictly equal
ok 625 should be strictly equal
ok 626 should be strictly equal
ok 627 should be strictly equal
ok 628 should be strictly equal
ok 629 should be strictly equal
ok 630 should be strictly equal
ok 631 should be deeply equivalent
ok 632 should be deeply equivalent
# basic query streaming
# pool > connection.query(sql)
ok 633 mysql span should not bleed into calling code
ok 634 mysql span should not be active in user code
ok 635 should be strictly equal
ok 636 mysql span should not be active in user code
ok 637 should be strictly equal
ok 638 should be strictly equal
ok 639 should be strictly equal
ok 640 should be strictly equal
ok 641 should be strictly equal
ok 642 should be strictly equal
ok 643 should be strictly equal
ok 644 should be strictly equal
ok 645 should be deeply equivalent
ok 646 should be deeply equivalent
# pool > connection.query(sql, values)
ok 647 mysql span should not bleed into calling code
ok 648 mysql span should not be active in user code
ok 649 should be strictly equal
ok 650 mysql span should not be active in user code
ok 651 should be strictly equal
ok 652 should be strictly equal
ok 653 should be strictly equal
ok 654 should be strictly equal
ok 655 should be strictly equal
ok 656 should be strictly equal
ok 657 should be strictly equal
ok 658 should be strictly equal
ok 659 should be deeply equivalent
ok 660 should be deeply equivalent
# pool > connection.query(options)
ok 661 mysql span should not bleed into calling code
ok 662 mysql span should not be active in user code
ok 663 should be strictly equal
ok 664 mysql span should not be active in user code
ok 665 should be strictly equal
ok 666 should be strictly equal
ok 667 should be strictly equal
ok 668 should be strictly equal
ok 669 should be strictly equal
ok 670 should be strictly equal
ok 671 should be strictly equal
ok 672 should be strictly equal
ok 673 should be deeply equivalent
ok 674 should be deeply equivalent
# pool > connection.query(options, values)
ok 675 mysql span should not bleed into calling code
ok 676 mysql span should not be active in user code
ok 677 should be strictly equal
ok 678 mysql span should not be active in user code
ok 679 should be strictly equal
ok 680 should be strictly equal
ok 681 should be strictly equal
ok 682 should be strictly equal
ok 683 should be strictly equal
ok 684 should be strictly equal
ok 685 should be strictly equal
ok 686 should be strictly equal
ok 687 should be deeply equivalent
ok 688 should be deeply equivalent
# pool > connection.query(query)
ok 689 mysql span should not bleed into calling code
ok 690 mysql span should not be active in user code
ok 691 should be strictly equal
ok 692 mysql span should not be active in user code
ok 693 should be strictly equal
ok 694 should be strictly equal
ok 695 should be strictly equal
ok 696 should be strictly equal
ok 697 should be strictly equal
ok 698 should be strictly equal
ok 699 should be strictly equal
ok 700 should be strictly equal
ok 701 should be deeply equivalent
ok 702 should be deeply equivalent
# pool > connection.query(query_with_values)
ok 703 mysql span should not bleed into calling code
ok 704 mysql span should not be active in user code
ok 705 should be strictly equal
ok 706 mysql span should not be active in user code
ok 707 should be strictly equal
ok 708 should be strictly equal
ok 709 should be strictly equal
ok 710 should be strictly equal
ok 711 should be strictly equal
ok 712 should be strictly equal
ok 713 should be strictly equal
ok 714 should be strictly equal
ok 715 should be deeply equivalent
ok 716 should be deeply equivalent
# simultaneous queries
# on same connection
ok 717 null
ok 718 should be strictly equal
ok 719 null
ok 720 should be strictly equal
ok 721 null
ok 722 should be strictly equal
ok 723 should be strictly equal
ok 724 should be strictly equal
ok 725 should be strictly equal
ok 726 should be strictly equal
ok 727 should be strictly equal
ok 728 should be strictly equal
ok 729 should be strictly equal
ok 730 should be deeply equivalent
ok 731 should be deeply equivalent
ok 732 each mysql span is a child of the transaction
ok 733 should be strictly equal
ok 734 should be strictly equal
ok 735 should be strictly equal
ok 736 should be strictly equal
ok 737 should be deeply equivalent
ok 738 should be deeply equivalent
ok 739 each mysql span is a child of the transaction
ok 740 should be strictly equal
ok 741 should be strictly equal
ok 742 should be strictly equal
ok 743 should be strictly equal
ok 744 should be deeply equivalent
ok 745 should be deeply equivalent
ok 746 each mysql span is a child of the transaction
# on different connections
ok 747 null
ok 748 null
ok 749 null
ok 750 should be strictly equal
ok 751 null
ok 752 should be strictly equal
ok 753 null
ok 754 null
ok 755 should be strictly equal
ok 756 should be strictly equal
ok 757 should be strictly equal
ok 758 should be strictly equal
ok 759 should be strictly equal
ok 760 should be strictly equal
ok 761 should be strictly equal
ok 762 should be strictly equal
ok 763 should be deeply equivalent
ok 764 should be deeply equivalent
ok 765 each mysql span is a child of the transaction
ok 766 should be strictly equal
ok 767 should be strictly equal
ok 768 should be strictly equal
ok 769 should be strictly equal
ok 770 should be deeply equivalent
ok 771 should be deeply equivalent
ok 772 each mysql span is a child of the transaction
ok 773 should be strictly equal
ok 774 should be strictly equal
ok 775 should be strictly equal
ok 776 should be strictly equal
ok 777 should be deeply equivalent
ok 778 should be deeply equivalent
ok 779 each mysql span is a child of the transaction
# simultaneous transactions
ok 780 null
ok 781 should be strictly equal
ok 782 null
ok 783 should be strictly equal
ok 784 null
ok 785 should be strictly equal
ok 786 should be strictly equal
ok 787 should be strictly equal
ok 788 should be deeply equivalent
ok 789 transaction should have span
ok 790 should be strictly equal
ok 791 should be strictly equal
ok 792 should be strictly equal
ok 793 should be strictly equal
ok 794 should be deeply equivalent
ok 795 should be deeply equivalent
ok 796 transaction should have span
ok 797 should be strictly equal
ok 798 should be strictly equal
ok 799 should be strictly equal
ok 800 should be strictly equal
ok 801 should be deeply equivalent
ok 802 should be deeply equivalent
ok 803 transaction should have span
ok 804 should be strictly equal
ok 805 should be strictly equal
ok 806 should be strictly equal
ok 807 should be strictly equal
ok 808 should be deeply equivalent
ok 809 should be deeply equivalent
# mysql.createPoolClusterAndGetConnection
# basic query with callback
# poolCluster > connection.query(sql, callback)
ok 810 mysql span should not bleed into calling code
ok 811 mysql span should not bleed into user callback
ok 812 null
ok 813 should be strictly equal
ok 814 should be strictly equal
ok 815 should be strictly equal
ok 816 should be strictly equal
ok 817 should be strictly equal
ok 818 should be strictly equal
ok 819 should be strictly equal
ok 820 should be strictly equal
ok 821 should be deeply equivalent
ok 822 should be deeply equivalent
# poolCluster > connection.query(sql, values, callback)
ok 823 mysql span should not bleed into calling code
ok 824 mysql span should not bleed into user callback
ok 825 null
ok 826 should be strictly equal
ok 827 should be strictly equal
ok 828 should be strictly equal
ok 829 should be strictly equal
ok 830 should be strictly equal
ok 831 should be strictly equal
ok 832 should be strictly equal
ok 833 should be strictly equal
ok 834 should be deeply equivalent
ok 835 should be deeply equivalent
# poolCluster > connection.query(options, callback)
ok 836 mysql span should not bleed into calling code
ok 837 mysql span should not bleed into user callback
ok 838 null
ok 839 should be strictly equal
ok 840 should be strictly equal
ok 841 should be strictly equal
ok 842 should be strictly equal
ok 843 should be strictly equal
ok 844 should be strictly equal
ok 845 should be strictly equal
ok 846 should be strictly equal
ok 847 should be deeply equivalent
ok 848 should be deeply equivalent
# poolCluster > connection.query(options, values, callback)
ok 849 mysql span should not bleed into calling code
ok 850 mysql span should not bleed into user callback
ok 851 null
ok 852 should be strictly equal
ok 853 should be strictly equal
ok 854 should be strictly equal
ok 855 should be strictly equal
ok 856 should be strictly equal
ok 857 should be strictly equal
ok 858 should be strictly equal
ok 859 should be strictly equal
ok 860 should be deeply equivalent
ok 861 should be deeply equivalent
# poolCluster > connection.query(query)
ok 862 mysql span should not bleed into calling code
ok 863 mysql span should not bleed into user callback
ok 864 null
ok 865 should be strictly equal
ok 866 should be strictly equal
ok 867 should be strictly equal
ok 868 should be strictly equal
ok 869 should be strictly equal
ok 870 should be strictly equal
ok 871 should be strictly equal
ok 872 should be strictly equal
ok 873 should be deeply equivalent
ok 874 should be deeply equivalent
# poolCluster > connection.query(query_with_values)
ok 875 mysql span should not bleed into calling code
ok 876 mysql span should not bleed into user callback
ok 877 null
ok 878 should be strictly equal
ok 879 should be strictly equal
ok 880 should be strictly equal
ok 881 should be strictly equal
ok 882 should be strictly equal
ok 883 should be strictly equal
ok 884 should be strictly equal
ok 885 should be strictly equal
ok 886 should be deeply equivalent
ok 887 should be deeply equivalent
# poolCluster > connection.query(sql) - no callback
ok 888 mysql span should not bleed into calling code
ok 889 should be strictly equal
ok 890 should be strictly equal
ok 891 should be strictly equal
ok 892 should be strictly equal
ok 893 should be strictly equal
ok 894 should be strictly equal
ok 895 should be strictly equal
ok 896 should be deeply equivalent
ok 897 should be deeply equivalent
# basic query streaming
# poolCluster > connection.query(sql)
ok 898 mysql span should not bleed into calling code
ok 899 mysql span should not be active in user code
ok 900 should be strictly equal
ok 901 mysql span should not be active in user code
ok 902 should be strictly equal
ok 903 should be strictly equal
ok 904 should be strictly equal
ok 905 should be strictly equal
ok 906 should be strictly equal
ok 907 should be strictly equal
ok 908 should be strictly equal
ok 909 should be strictly equal
ok 910 should be deeply equivalent
ok 911 should be deeply equivalent
# poolCluster > connection.query(sql, values)
ok 912 mysql span should not bleed into calling code
ok 913 mysql span should not be active in user code
ok 914 should be strictly equal
ok 915 mysql span should not be active in user code
ok 916 should be strictly equal
ok 917 should be strictly equal
ok 918 should be strictly equal
ok 919 should be strictly equal
ok 920 should be strictly equal
ok 921 should be strictly equal
ok 922 should be strictly equal
ok 923 should be strictly equal
ok 924 should be deeply equivalent
ok 925 should be deeply equivalent
# poolCluster > connection.query(options)
ok 926 mysql span should not bleed into calling code
ok 927 mysql span should not be active in user code
ok 928 should be strictly equal
ok 929 mysql span should not be active in user code
ok 930 should be strictly equal
ok 931 should be strictly equal
ok 932 should be strictly equal
ok 933 should be strictly equal
ok 934 should be strictly equal
ok 935 should be strictly equal
ok 936 should be strictly equal
ok 937 should be strictly equal
ok 938 should be deeply equivalent
ok 939 should be deeply equivalent
# poolCluster > connection.query(options, values)
ok 940 mysql span should not bleed into calling code
ok 941 mysql span should not be active in user code
ok 942 should be strictly equal
ok 943 mysql span should not be active in user code
ok 944 should be strictly equal
ok 945 should be strictly equal
ok 946 should be strictly equal
ok 947 should be strictly equal
ok 948 should be strictly equal
ok 949 should be strictly equal
ok 950 should be strictly equal
ok 951 should be strictly equal
ok 952 should be deeply equivalent
ok 953 should be deeply equivalent
# poolCluster > connection.query(query)
ok 954 mysql span should not bleed into calling code
ok 955 mysql span should not be active in user code
ok 956 should be strictly equal
ok 957 mysql span should not be active in user code
ok 958 should be strictly equal
ok 959 should be strictly equal
ok 960 should be strictly equal
ok 961 should be strictly equal
ok 962 should be strictly equal
ok 963 should be strictly equal
ok 964 should be strictly equal
ok 965 should be strictly equal
ok 966 should be deeply equivalent
ok 967 should be deeply equivalent
# poolCluster > connection.query(query_with_values)
ok 968 mysql span should not bleed into calling code
ok 969 mysql span should not be active in user code
ok 970 should be strictly equal
ok 971 mysql span should not be active in user code
ok 972 should be strictly equal
ok 973 should be strictly equal
ok 974 should be strictly equal
ok 975 should be strictly equal
ok 976 should be strictly equal
ok 977 should be strictly equal
ok 978 should be strictly equal
ok 979 should be strictly equal
ok 980 should be deeply equivalent
ok 981 should be deeply equivalent
# simultaneous queries
# on same connection
ok 982 null
ok 983 should be strictly equal
ok 984 null
ok 985 should be strictly equal
ok 986 null
ok 987 should be strictly equal
ok 988 should be strictly equal
ok 989 should be strictly equal
ok 990 should be strictly equal
ok 991 should be strictly equal
ok 992 should be strictly equal
ok 993 should be strictly equal
ok 994 should be strictly equal
ok 995 should be deeply equivalent
ok 996 should be deeply equivalent
ok 997 each mysql span is a child of the transaction
ok 998 should be strictly equal
ok 999 should be strictly equal
ok 1000 should be strictly equal
ok 1001 should be strictly equal
ok 1002 should be deeply equivalent
ok 1003 should be deeply equivalent
ok 1004 each mysql span is a child of the transaction
ok 1005 should be strictly equal
ok 1006 should be strictly equal
ok 1007 should be strictly equal
ok 1008 should be strictly equal
ok 1009 should be deeply equivalent
ok 1010 should be deeply equivalent
ok 1011 each mysql span is a child of the transaction
# on different connections
ok 1012 null
ok 1013 null
ok 1014 null
ok 1015 should be strictly equal
ok 1016 null
ok 1017 should be strictly equal
ok 1018 null
ok 1019 null
ok 1020 should be strictly equal
ok 1021 should be strictly equal
ok 1022 should be strictly equal
ok 1023 should be strictly equal
ok 1024 should be strictly equal
ok 1025 should be strictly equal
ok 1026 should be strictly equal
ok 1027 should be strictly equal
ok 1028 should be deeply equivalent
ok 1029 should be deeply equivalent
ok 1030 each mysql span is a child of the transaction
ok 1031 should be strictly equal
ok 1032 should be strictly equal
ok 1033 should be strictly equal
ok 1034 should be strictly equal
ok 1035 should be deeply equivalent
ok 1036 should be deeply equivalent
ok 1037 each mysql span is a child of the transaction
ok 1038 should be strictly equal
ok 1039 should be strictly equal
ok 1040 should be strictly equal
ok 1041 should be strictly equal
ok 1042 should be deeply equivalent
ok 1043 should be deeply equivalent
ok 1044 each mysql span is a child of the transaction
# simultaneous transactions
ok 1045 null
ok 1046 should be strictly equal
ok 1047 null
ok 1048 should be strictly equal
ok 1049 null
ok 1050 should be strictly equal
ok 1051 should be strictly equal
ok 1052 should be strictly equal
ok 1053 should be deeply equivalent
ok 1054 transaction should have span
ok 1055 should be strictly equal
ok 1056 should be strictly equal
ok 1057 should be strictly equal
ok 1058 should be strictly equal
ok 1059 should be deeply equivalent
ok 1060 should be deeply equivalent
ok 1061 transaction should have span
ok 1062 should be strictly equal
ok 1063 should be strictly equal
ok 1064 should be strictly equal
ok 1065 should be strictly equal
ok 1066 should be deeply equivalent
ok 1067 should be deeply equivalent
ok 1068 transaction should have span
ok 1069 should be strictly equal
ok 1070 should be strictly equal
ok 1071 should be strictly equal
ok 1072 should be strictly equal
ok 1073 should be deeply equivalent
ok 1074 should be deeply equivalent
# mysql.createPoolClusterAndGetConnectionViaOf
# basic query with callback
# poolCluster > of > connection.query(sql, callback)
ok 1075 mysql span should not bleed into calling code
ok 1076 mysql span should not bleed into user callback
ok 1077 null
ok 1078 should be strictly equal
ok 1079 should be strictly equal
ok 1080 should be strictly equal
ok 1081 should be strictly equal
ok 1082 should be strictly equal
ok 1083 should be strictly equal
ok 1084 should be strictly equal
ok 1085 should be strictly equal
ok 1086 should be deeply equivalent
ok 1087 should be deeply equivalent
# poolCluster > of > connection.query(sql, values, callback)
ok 1088 mysql span should not bleed into calling code
ok 1089 mysql span should not bleed into user callback
ok 1090 null
ok 1091 should be strictly equal
ok 1092 should be strictly equal
ok 1093 should be strictly equal
ok 1094 should be strictly equal
ok 1095 should be strictly equal
ok 1096 should be strictly equal
ok 1097 should be strictly equal
ok 1098 should be strictly equal
ok 1099 should be deeply equivalent
ok 1100 should be deeply equivalent
# poolCluster > of > connection.query(options, callback)
ok 1101 mysql span should not bleed into calling code
ok 1102 mysql span should not bleed into user callback
ok 1103 null
ok 1104 should be strictly equal
ok 1105 should be strictly equal
ok 1106 should be strictly equal
ok 1107 should be strictly equal
ok 1108 should be strictly equal
ok 1109 should be strictly equal
ok 1110 should be strictly equal
ok 1111 should be strictly equal
ok 1112 should be deeply equivalent
ok 1113 should be deeply equivalent
# poolCluster > of > connection.query(options, values, callback)
ok 1114 mysql span should not bleed into calling code
ok 1115 mysql span should not bleed into user callback
ok 1116 null
ok 1117 should be strictly equal
ok 1118 should be strictly equal
ok 1119 should be strictly equal
ok 1120 should be strictly equal
ok 1121 should be strictly equal
ok 1122 should be strictly equal
ok 1123 should be strictly equal
ok 1124 should be strictly equal
ok 1125 should be deeply equivalent
ok 1126 should be deeply equivalent
# poolCluster > of > connection.query(query)
ok 1127 mysql span should not bleed into calling code
ok 1128 mysql span should not bleed into user callback
ok 1129 null
ok 1130 should be strictly equal
ok 1131 should be strictly equal
ok 1132 should be strictly equal
ok 1133 should be strictly equal
ok 1134 should be strictly equal
ok 1135 should be strictly equal
ok 1136 should be strictly equal
ok 1137 should be strictly equal
ok 1138 should be deeply equivalent
ok 1139 should be deeply equivalent
# poolCluster > of > connection.query(query_with_values)
ok 1140 mysql span should not bleed into calling code
ok 1141 mysql span should not bleed into user callback
ok 1142 null
ok 1143 should be strictly equal
ok 1144 should be strictly equal
ok 1145 should be strictly equal
ok 1146 should be strictly equal
ok 1147 should be strictly equal
ok 1148 should be strictly equal
ok 1149 should be strictly equal
ok 1150 should be strictly equal
ok 1151 should be deeply equivalent
ok 1152 should be deeply equivalent
# poolCluster > of > connection.query(sql) - no callback
ok 1153 mysql span should not bleed into calling code
ok 1154 should be strictly equal
ok 1155 should be strictly equal
ok 1156 should be strictly equal
ok 1157 should be strictly equal
ok 1158 should be strictly equal
ok 1159 should be strictly equal
ok 1160 should be strictly equal
ok 1161 should be deeply equivalent
ok 1162 should be deeply equivalent
# basic query streaming
# poolCluster > of > connection.query(sql)
ok 1163 mysql span should not bleed into calling code
ok 1164 mysql span should not be active in user code
ok 1165 should be strictly equal
ok 1166 mysql span should not be active in user code
ok 1167 should be strictly equal
ok 1168 should be strictly equal
ok 1169 should be strictly equal
ok 1170 should be strictly equal
ok 1171 should be strictly equal
ok 1172 should be strictly equal
ok 1173 should be strictly equal
ok 1174 should be strictly equal
ok 1175 should be deeply equivalent
ok 1176 should be deeply equivalent
# poolCluster > of > connection.query(sql, values)
ok 1177 mysql span should not bleed into calling code
ok 1178 mysql span should not be active in user code
ok 1179 should be strictly equal
ok 1180 mysql span should not be active in user code
ok 1181 should be strictly equal
ok 1182 should be strictly equal
ok 1183 should be strictly equal
ok 1184 should be strictly equal
ok 1185 should be strictly equal
ok 1186 should be strictly equal
ok 1187 should be strictly equal
ok 1188 should be strictly equal
ok 1189 should be deeply equivalent
ok 1190 should be deeply equivalent
# poolCluster > of > connection.query(options)
ok 1191 mysql span should not bleed into calling code
ok 1192 mysql span should not be active in user code
ok 1193 should be strictly equal
ok 1194 mysql span should not be active in user code
ok 1195 should be strictly equal
ok 1196 should be strictly equal
ok 1197 should be strictly equal
ok 1198 should be strictly equal
ok 1199 should be strictly equal
ok 1200 should be strictly equal
ok 1201 should be strictly equal
ok 1202 should be strictly equal
ok 1203 should be deeply equivalent
ok 1204 should be deeply equivalent
# poolCluster > of > connection.query(options, values)
ok 1205 mysql span should not bleed into calling code
ok 1206 mysql span should not be active in user code
ok 1207 should be strictly equal
ok 1208 mysql span should not be active in user code
ok 1209 should be strictly equal
ok 1210 should be strictly equal
ok 1211 should be strictly equal
ok 1212 should be strictly equal
ok 1213 should be strictly equal
ok 1214 should be strictly equal
ok 1215 should be strictly equal
ok 1216 should be strictly equal
ok 1217 should be deeply equivalent
ok 1218 should be deeply equivalent
# poolCluster > of > connection.query(query)
ok 1219 mysql span should not bleed into calling code
ok 1220 mysql span should not be active in user code
ok 1221 should be strictly equal
ok 1222 mysql span should not be active in user code
ok 1223 should be strictly equal
ok 1224 should be strictly equal
ok 1225 should be strictly equal
ok 1226 should be strictly equal
ok 1227 should be strictly equal
ok 1228 should be strictly equal
ok 1229 should be strictly equal
ok 1230 should be strictly equal
ok 1231 should be deeply equivalent
ok 1232 should be deeply equivalent
# poolCluster > of > connection.query(query_with_values)
ok 1233 mysql span should not bleed into calling code
ok 1234 mysql span should not be active in user code
ok 1235 should be strictly equal
ok 1236 mysql span should not be active in user code
ok 1237 should be strictly equal
ok 1238 should be strictly equal
ok 1239 should be strictly equal
ok 1240 should be strictly equal
ok 1241 should be strictly equal
ok 1242 should be strictly equal
ok 1243 should be strictly equal
ok 1244 should be strictly equal
ok 1245 should be deeply equivalent
ok 1246 should be deeply equivalent
# simultaneous queries
# on same connection
ok 1247 null
ok 1248 should be strictly equal
ok 1249 null
ok 1250 should be strictly equal
ok 1251 null
ok 1252 should be strictly equal
ok 1253 should be strictly equal
ok 1254 should be strictly equal
ok 1255 should be strictly equal
ok 1256 should be strictly equal
ok 1257 should be strictly equal
ok 1258 should be strictly equal
ok 1259 should be strictly equal
ok 1260 should be deeply equivalent
ok 1261 should be deeply equivalent
ok 1262 each mysql span is a child of the transaction
ok 1263 should be strictly equal
ok 1264 should be strictly equal
ok 1265 should be strictly equal
ok 1266 should be strictly equal
ok 1267 should be deeply equivalent
ok 1268 should be deeply equivalent
ok 1269 each mysql span is a child of the transaction
ok 1270 should be strictly equal
ok 1271 should be strictly equal
ok 1272 should be strictly equal
ok 1273 should be strictly equal
ok 1274 should be deeply equivalent
ok 1275 should be deeply equivalent
ok 1276 each mysql span is a child of the transaction
# on different connections
ok 1277 null
ok 1278 null
ok 1279 null
ok 1280 should be strictly equal
ok 1281 null
ok 1282 null
ok 1283 should be strictly equal
ok 1284 null
ok 1285 should be strictly equal
ok 1286 should be strictly equal
ok 1287 should be strictly equal
ok 1288 should be strictly equal
ok 1289 should be strictly equal
ok 1290 should be strictly equal
ok 1291 should be strictly equal
ok 1292 should be strictly equal
ok 1293 should be deeply equivalent
ok 1294 should be deeply equivalent
ok 1295 each mysql span is a child of the transaction
ok 1296 should be strictly equal
ok 1297 should be strictly equal
ok 1298 should be strictly equal
ok 1299 should be strictly equal
ok 1300 should be deeply equivalent
ok 1301 should be deeply equivalent
ok 1302 each mysql span is a child of the transaction
ok 1303 should be strictly equal
ok 1304 should be strictly equal
ok 1305 should be strictly equal
ok 1306 should be strictly equal
ok 1307 should be deeply equivalent
ok 1308 should be deeply equivalent
ok 1309 each mysql span is a child of the transaction
# simultaneous transactions
ok 1310 null
ok 1311 should be strictly equal
ok 1312 null
ok 1313 should be strictly equal
ok 1314 null
ok 1315 should be strictly equal
ok 1316 should be strictly equal
ok 1317 should be strictly equal
ok 1318 should be deeply equivalent
ok 1319 transaction should have span
ok 1320 should be strictly equal
ok 1321 should be strictly equal
ok 1322 should be strictly equal
ok 1323 should be strictly equal
ok 1324 should be deeply equivalent
ok 1325 should be deeply equivalent
ok 1326 transaction should have span
ok 1327 should be strictly equal
ok 1328 should be strictly equal
ok 1329 should be strictly equal
ok 1330 should be strictly equal
ok 1331 should be deeply equivalent
ok 1332 should be deeply equivalent
ok 1333 transaction should have span
ok 1334 should be strictly equal
ok 1335 should be strictly equal
ok 1336 should be strictly equal
ok 1337 should be strictly equal
ok 1338 should be deeply equivalent
ok 1339 should be deeply equivalent

1..1339
# tests 1339
# pass  1339

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/mysql/pool-release-1.test.js
TAP version 13
# release connection prior to transaction
ok 1 null
ok 2 should be truthy
ok 3 null
ok 4 should be truthy

1..4
# tests 4
# pass  4

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/mysql2/mysql.test.js
TAP version 13
# mysql2.createConnection
# query
# callback
# connection.query(sql, callback)
ok 1 null
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should be deeply equivalent
ok 11 should be deeply equivalent
# connection.query(sql, values, callback)
ok 12 null
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
ok 17 should be strictly equal
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
ok 21 should be deeply equivalent
ok 22 should be deeply equivalent
# connection.query(options, callback)
ok 23 null
ok 24 should be strictly equal
ok 25 should be strictly equal
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
ok 29 should be strictly equal
ok 30 should be strictly equal
ok 31 should be strictly equal
ok 32 should be deeply equivalent
ok 33 should be deeply equivalent
# connection.query(options, values, callback)
ok 34 null
ok 35 should be strictly equal
ok 36 should be strictly equal
ok 37 should be strictly equal
ok 38 should be strictly equal
ok 39 should be strictly equal
ok 40 should be strictly equal
ok 41 should be strictly equal
ok 42 should be strictly equal
ok 43 should be deeply equivalent
ok 44 should be deeply equivalent
# connection.query(query, callback)
ok 45 null
ok 46 should be strictly equal
ok 47 should be strictly equal
ok 48 should be strictly equal
ok 49 should be strictly equal
ok 50 should be strictly equal
ok 51 should be strictly equal
ok 52 should be strictly equal
ok 53 should be strictly equal
ok 54 should be deeply equivalent
ok 55 should be deeply equivalent
# connection.query(query_with_values, callback)
ok 56 null
ok 57 should be strictly equal
ok 58 should be strictly equal
ok 59 should be strictly equal
ok 60 should be strictly equal
ok 61 should be strictly equal
ok 62 should be strictly equal
ok 63 should be strictly equal
ok 64 should be strictly equal
ok 65 should be deeply equivalent
ok 66 should be deeply equivalent
# promise
# connection.query(sql)
ok 67 should be strictly equal
ok 68 should be strictly equal
ok 69 should be strictly equal
ok 70 should be strictly equal
ok 71 should be strictly equal
ok 72 should be strictly equal
ok 73 should be strictly equal
ok 74 should be strictly equal
ok 75 should be deeply equivalent
ok 76 should be deeply equivalent
# connection.query(sql, values)
ok 77 should be strictly equal
ok 78 should be strictly equal
ok 79 should be strictly equal
ok 80 should be strictly equal
ok 81 should be strictly equal
ok 82 should be strictly equal
ok 83 should be strictly equal
ok 84 should be strictly equal
ok 85 should be deeply equivalent
ok 86 should be deeply equivalent
# connection.query(options)
ok 87 should be strictly equal
ok 88 should be strictly equal
ok 89 should be strictly equal
ok 90 should be strictly equal
ok 91 should be strictly equal
ok 92 should be strictly equal
ok 93 should be strictly equal
ok 94 should be strictly equal
ok 95 should be deeply equivalent
ok 96 should be deeply equivalent
# connection.query(options, values)
ok 97 should be strictly equal
ok 98 should be strictly equal
ok 99 should be strictly equal
ok 100 should be strictly equal
ok 101 should be strictly equal
ok 102 should be strictly equal
ok 103 should be strictly equal
ok 104 should be strictly equal
ok 105 should be deeply equivalent
ok 106 should be deeply equivalent
# streaming
# connection.query(sql)
ok 107 should be strictly equal
ok 108 should be strictly equal
ok 109 should be strictly equal
ok 110 should be strictly equal
ok 111 should be strictly equal
ok 112 should be strictly equal
ok 113 should be strictly equal
ok 114 should be strictly equal
ok 115 should be strictly equal
ok 116 should be deeply equivalent
ok 117 should be deeply equivalent
# connection.query(sql, values)
ok 118 should be strictly equal
ok 119 should be strictly equal
ok 120 should be strictly equal
ok 121 should be strictly equal
ok 122 should be strictly equal
ok 123 should be strictly equal
ok 124 should be strictly equal
ok 125 should be strictly equal
ok 126 should be strictly equal
ok 127 should be deeply equivalent
ok 128 should be deeply equivalent
# connection.query(options)
ok 129 should be strictly equal
ok 130 should be strictly equal
ok 131 should be strictly equal
ok 132 should be strictly equal
ok 133 should be strictly equal
ok 134 should be strictly equal
ok 135 should be strictly equal
ok 136 should be strictly equal
ok 137 should be strictly equal
ok 138 should be deeply equivalent
ok 139 should be deeply equivalent
# connection.query(options, values)
ok 140 should be strictly equal
ok 141 should be strictly equal
ok 142 should be strictly equal
ok 143 should be strictly equal
ok 144 should be strictly equal
ok 145 should be strictly equal
ok 146 should be strictly equal
ok 147 should be strictly equal
ok 148 should be strictly equal
ok 149 should be deeply equivalent
ok 150 should be deeply equivalent
# connection.query(query)
ok 151 should be strictly equal
ok 152 should be strictly equal
ok 153 should be strictly equal
ok 154 should be strictly equal
ok 155 should be strictly equal
ok 156 should be strictly equal
ok 157 should be strictly equal
ok 158 should be strictly equal
ok 159 should be strictly equal
ok 160 should be deeply equivalent
ok 161 should be deeply equivalent
# connection.query(query_with_values)
ok 162 should be strictly equal
ok 163 should be strictly equal
ok 164 should be strictly equal
ok 165 should be strictly equal
ok 166 should be strictly equal
ok 167 should be strictly equal
ok 168 should be strictly equal
ok 169 should be strictly equal
ok 170 should be strictly equal
ok 171 should be deeply equivalent
ok 172 should be deeply equivalent
# execute
# callback
# connection.execute(sql, callback)
ok 173 null
ok 174 should be strictly equal
ok 175 should be strictly equal
ok 176 should be strictly equal
ok 177 should be strictly equal
ok 178 should be strictly equal
ok 179 should be strictly equal
ok 180 should be strictly equal
ok 181 should be strictly equal
ok 182 should be deeply equivalent
ok 183 should be deeply equivalent
# connection.execute(sql, values, callback)
ok 184 null
ok 185 should be strictly equal
ok 186 should be strictly equal
ok 187 should be strictly equal
ok 188 should be strictly equal
ok 189 should be strictly equal
ok 190 should be strictly equal
ok 191 should be strictly equal
ok 192 should be strictly equal
ok 193 should be deeply equivalent
ok 194 should be deeply equivalent
# connection.execute(options, callback)
ok 195 null
ok 196 should be strictly equal
ok 197 should be strictly equal
ok 198 should be strictly equal
ok 199 should be strictly equal
ok 200 should be strictly equal
ok 201 should be strictly equal
ok 202 should be strictly equal
ok 203 should be strictly equal
ok 204 should be deeply equivalent
ok 205 should be deeply equivalent
# connection.execute(options, values, callback)
ok 206 null
ok 207 should be strictly equal
ok 208 should be strictly equal
ok 209 should be strictly equal
ok 210 should be strictly equal
ok 211 should be strictly equal
ok 212 should be strictly equal
ok 213 should be strictly equal
ok 214 should be strictly equal
ok 215 should be deeply equivalent
ok 216 should be deeply equivalent
# promise
# connection.execute(sql)
ok 217 should be strictly equal
ok 218 should be strictly equal
ok 219 should be strictly equal
ok 220 should be strictly equal
ok 221 should be strictly equal
ok 222 should be strictly equal
ok 223 should be strictly equal
ok 224 should be strictly equal
ok 225 should be deeply equivalent
ok 226 should be deeply equivalent
# connection.execute(sql, values)
ok 227 should be strictly equal
ok 228 should be strictly equal
ok 229 should be strictly equal
ok 230 should be strictly equal
ok 231 should be strictly equal
ok 232 should be strictly equal
ok 233 should be strictly equal
ok 234 should be strictly equal
ok 235 should be deeply equivalent
ok 236 should be deeply equivalent
# connection.execute(options)
ok 237 should be strictly equal
ok 238 should be strictly equal
ok 239 should be strictly equal
ok 240 should be strictly equal
ok 241 should be strictly equal
ok 242 should be strictly equal
ok 243 should be strictly equal
ok 244 should be strictly equal
ok 245 should be deeply equivalent
ok 246 should be deeply equivalent
# connection.execute(options, values)
ok 247 should be strictly equal
ok 248 should be strictly equal
ok 249 should be strictly equal
ok 250 should be strictly equal
ok 251 should be strictly equal
ok 252 should be strictly equal
ok 253 should be strictly equal
ok 254 should be strictly equal
ok 255 should be deeply equivalent
ok 256 should be deeply equivalent
# simultaneous queries
# on same connection
ok 257 null
ok 258 should be strictly equal
ok 259 null
ok 260 should be strictly equal
ok 261 null
ok 262 should be strictly equal
ok 263 should be strictly equal
ok 264 should be strictly equal
ok 265 should be strictly equal
ok 266 should be strictly equal
ok 267 should be strictly equal
ok 268 should be strictly equal
ok 269 should be strictly equal
ok 270 should be deeply equivalent
ok 271 should be deeply equivalent
ok 272 should be strictly equal
ok 273 should be strictly equal
ok 274 should be strictly equal
ok 275 should be strictly equal
ok 276 should be deeply equivalent
ok 277 should be deeply equivalent
ok 278 should be strictly equal
ok 279 should be strictly equal
ok 280 should be strictly equal
ok 281 should be strictly equal
ok 282 should be deeply equivalent
ok 283 should be deeply equivalent
# on different connections
ok 284 null
ok 285 null
ok 286 null
ok 287 null
ok 288 should be strictly equal
ok 289 null
ok 290 should be strictly equal
ok 291 null
ok 292 should be strictly equal
ok 293 should be strictly equal
ok 294 should be strictly equal
ok 295 should be strictly equal
ok 296 should be strictly equal
ok 297 should be strictly equal
ok 298 should be strictly equal
ok 299 should be strictly equal
ok 300 should be deeply equivalent
ok 301 should be deeply equivalent
ok 302 should be strictly equal
ok 303 should be strictly equal
ok 304 should be strictly equal
ok 305 should be strictly equal
ok 306 should be deeply equivalent
ok 307 should be deeply equivalent
ok 308 should be strictly equal
ok 309 should be strictly equal
ok 310 should be strictly equal
ok 311 should be strictly equal
ok 312 should be deeply equivalent
ok 313 should be deeply equivalent
# simultaneous transactions
ok 314 null
ok 315 should be strictly equal
ok 316 null
ok 317 should be strictly equal
ok 318 null
ok 319 should be strictly equal
ok 320 should be strictly equal
ok 321 should be strictly equal
ok 322 should be deeply equivalent
ok 323 transaction should have span
ok 324 should be strictly equal
ok 325 should be strictly equal
ok 326 should be strictly equal
ok 327 should be strictly equal
ok 328 should be deeply equivalent
ok 329 should be deeply equivalent
ok 330 transaction should have span
ok 331 should be strictly equal
ok 332 should be strictly equal
ok 333 should be strictly equal
ok 334 should be strictly equal
ok 335 should be deeply equivalent
ok 336 should be deeply equivalent
ok 337 transaction should have span
ok 338 should be strictly equal
ok 339 should be strictly equal
ok 340 should be strictly equal
ok 341 should be strictly equal
ok 342 should be deeply equivalent
ok 343 should be deeply equivalent
# mysql2.createPool
# query
# callback
# pool.query(sql, callback)
ok 344 null
ok 345 should be strictly equal
ok 346 should be strictly equal
ok 347 should be strictly equal
ok 348 should be strictly equal
ok 349 should be strictly equal
ok 350 should be strictly equal
ok 351 should be strictly equal
ok 352 should be strictly equal
ok 353 should be deeply equivalent
ok 354 should be deeply equivalent
# pool.query(sql, values, callback)
ok 355 null
ok 356 should be strictly equal
ok 357 should be strictly equal
ok 358 should be strictly equal
ok 359 should be strictly equal
ok 360 should be strictly equal
ok 361 should be strictly equal
ok 362 should be strictly equal
ok 363 should be strictly equal
ok 364 should be deeply equivalent
ok 365 should be deeply equivalent
# pool.query(options, callback)
ok 366 null
ok 367 should be strictly equal
ok 368 should be strictly equal
ok 369 should be strictly equal
ok 370 should be strictly equal
ok 371 should be strictly equal
ok 372 should be strictly equal
ok 373 should be strictly equal
ok 374 should be strictly equal
ok 375 should be deeply equivalent
ok 376 should be deeply equivalent
# pool.query(options, values, callback)
ok 377 null
ok 378 should be strictly equal
ok 379 should be strictly equal
ok 380 should be strictly equal
ok 381 should be strictly equal
ok 382 should be strictly equal
ok 383 should be strictly equal
ok 384 should be strictly equal
ok 385 should be strictly equal
ok 386 should be deeply equivalent
ok 387 should be deeply equivalent
# promise
# pool.query(sql)
ok 388 should be strictly equal
ok 389 should be strictly equal
ok 390 should be strictly equal
ok 391 should be strictly equal
ok 392 should be strictly equal
ok 393 should be strictly equal
ok 394 should be strictly equal
ok 395 should be strictly equal
ok 396 should be deeply equivalent
ok 397 should be deeply equivalent
# pool.query(sql, values)
ok 398 should be strictly equal
ok 399 should be strictly equal
ok 400 should be strictly equal
ok 401 should be strictly equal
ok 402 should be strictly equal
ok 403 should be strictly equal
ok 404 should be strictly equal
ok 405 should be strictly equal
ok 406 should be deeply equivalent
ok 407 should be deeply equivalent
# pool.query(options)
ok 408 should be strictly equal
ok 409 should be strictly equal
ok 410 should be strictly equal
ok 411 should be strictly equal
ok 412 should be strictly equal
ok 413 should be strictly equal
ok 414 should be strictly equal
ok 415 should be strictly equal
ok 416 should be deeply equivalent
ok 417 should be deeply equivalent
# pool.query(options, values)
ok 418 should be strictly equal
ok 419 should be strictly equal
ok 420 should be strictly equal
ok 421 should be strictly equal
ok 422 should be strictly equal
ok 423 should be strictly equal
ok 424 should be strictly equal
ok 425 should be strictly equal
ok 426 should be deeply equivalent
ok 427 should be deeply equivalent
# streaming
# pool.query(sql)
ok 428 should be strictly equal
ok 429 should be strictly equal
ok 430 should be strictly equal
ok 431 should be strictly equal
ok 432 should be strictly equal
ok 433 should be strictly equal
ok 434 should be strictly equal
ok 435 should be strictly equal
ok 436 should be strictly equal
ok 437 should be deeply equivalent
ok 438 should be deeply equivalent
# pool.query(sql, values)
ok 439 should be strictly equal
ok 440 should be strictly equal
ok 441 should be strictly equal
ok 442 should be strictly equal
ok 443 should be strictly equal
ok 444 should be strictly equal
ok 445 should be strictly equal
ok 446 should be strictly equal
ok 447 should be strictly equal
ok 448 should be deeply equivalent
ok 449 should be deeply equivalent
# pool.query(options)
ok 450 should be strictly equal
ok 451 should be strictly equal
ok 452 should be strictly equal
ok 453 should be strictly equal
ok 454 should be strictly equal
ok 455 should be strictly equal
ok 456 should be strictly equal
ok 457 should be strictly equal
ok 458 should be strictly equal
ok 459 should be deeply equivalent
ok 460 should be deeply equivalent
# pool.query(options, values)
ok 461 should be strictly equal
ok 462 should be strictly equal
ok 463 should be strictly equal
ok 464 should be strictly equal
ok 465 should be strictly equal
ok 466 should be strictly equal
ok 467 should be strictly equal
ok 468 should be strictly equal
ok 469 should be strictly equal
ok 470 should be deeply equivalent
ok 471 should be deeply equivalent
# execute
# callback
# pool.execute(sql, callback)
ok 472 null
ok 473 should be strictly equal
ok 474 should be strictly equal
ok 475 should be strictly equal
ok 476 should be strictly equal
ok 477 should be strictly equal
ok 478 should be strictly equal
ok 479 should be strictly equal
ok 480 should be strictly equal
ok 481 should be deeply equivalent
ok 482 should be deeply equivalent
# pool.execute(sql, values, callback)
ok 483 null
ok 484 should be strictly equal
ok 485 should be strictly equal
ok 486 should be strictly equal
ok 487 should be strictly equal
ok 488 should be strictly equal
ok 489 should be strictly equal
ok 490 should be strictly equal
ok 491 should be strictly equal
ok 492 should be deeply equivalent
ok 493 should be deeply equivalent
# pool.execute(options, callback)
ok 494 null
ok 495 should be strictly equal
ok 496 should be strictly equal
ok 497 should be strictly equal
ok 498 should be strictly equal
ok 499 should be strictly equal
ok 500 should be strictly equal
ok 501 should be strictly equal
ok 502 should be strictly equal
ok 503 should be deeply equivalent
ok 504 should be deeply equivalent
# pool.execute(options, values, callback)
ok 505 null
ok 506 should be strictly equal
ok 507 should be strictly equal
ok 508 should be strictly equal
ok 509 should be strictly equal
ok 510 should be strictly equal
ok 511 should be strictly equal
ok 512 should be strictly equal
ok 513 should be strictly equal
ok 514 should be deeply equivalent
ok 515 should be deeply equivalent
# promise
# pool.execute(sql)
ok 516 should be strictly equal
ok 517 should be strictly equal
ok 518 should be strictly equal
ok 519 should be strictly equal
ok 520 should be strictly equal
ok 521 should be strictly equal
ok 522 should be strictly equal
ok 523 should be strictly equal
ok 524 should be deeply equivalent
ok 525 should be deeply equivalent
# pool.execute(sql, values)
ok 526 should be strictly equal
ok 527 should be strictly equal
ok 528 should be strictly equal
ok 529 should be strictly equal
ok 530 should be strictly equal
ok 531 should be strictly equal
ok 532 should be strictly equal
ok 533 should be strictly equal
ok 534 should be deeply equivalent
ok 535 should be deeply equivalent
# pool.execute(options)
ok 536 should be strictly equal
ok 537 should be strictly equal
ok 538 should be strictly equal
ok 539 should be strictly equal
ok 540 should be strictly equal
ok 541 should be strictly equal
ok 542 should be strictly equal
ok 543 should be strictly equal
ok 544 should be deeply equivalent
ok 545 should be deeply equivalent
# pool.execute(options, values)
ok 546 should be strictly equal
ok 547 should be strictly equal
ok 548 should be strictly equal
ok 549 should be strictly equal
ok 550 should be strictly equal
ok 551 should be strictly equal
ok 552 should be strictly equal
ok 553 should be strictly equal
ok 554 should be deeply equivalent
ok 555 should be deeply equivalent
# simultaneous queries
# on same connection
ok 556 null
ok 557 should be strictly equal
ok 558 null
ok 559 should be strictly equal
ok 560 null
ok 561 should be strictly equal
ok 562 should be strictly equal
ok 563 should be strictly equal
ok 564 should be strictly equal
ok 565 should be strictly equal
ok 566 should be strictly equal
ok 567 should be strictly equal
ok 568 should be strictly equal
ok 569 should be deeply equivalent
ok 570 should be deeply equivalent
ok 571 should be strictly equal
ok 572 should be strictly equal
ok 573 should be strictly equal
ok 574 should be strictly equal
ok 575 should be deeply equivalent
ok 576 should be deeply equivalent
ok 577 should be strictly equal
ok 578 should be strictly equal
ok 579 should be strictly equal
ok 580 should be strictly equal
ok 581 should be deeply equivalent
ok 582 should be deeply equivalent
# on different connections
ok 583 null
ok 584 null
ok 585 should be strictly equal
ok 586 null
ok 587 null
ok 588 should be strictly equal
ok 589 null
ok 590 null
ok 591 should be strictly equal
ok 592 should be strictly equal
ok 593 should be strictly equal
ok 594 should be strictly equal
ok 595 should be strictly equal
ok 596 should be strictly equal
ok 597 should be strictly equal
ok 598 should be strictly equal
ok 599 should be deeply equivalent
ok 600 should be deeply equivalent
ok 601 should be strictly equal
ok 602 should be strictly equal
ok 603 should be strictly equal
ok 604 should be strictly equal
ok 605 should be deeply equivalent
ok 606 should be deeply equivalent
ok 607 should be strictly equal
ok 608 should be strictly equal
ok 609 should be strictly equal
ok 610 should be strictly equal
ok 611 should be deeply equivalent
ok 612 should be deeply equivalent
# simultaneous transactions
ok 613 null
ok 614 should be strictly equal
ok 615 null
ok 616 should be strictly equal
ok 617 null
ok 618 should be strictly equal
ok 619 should be strictly equal
ok 620 should be strictly equal
ok 621 should be deeply equivalent
ok 622 transaction should have span
ok 623 should be strictly equal
ok 624 should be strictly equal
ok 625 should be strictly equal
ok 626 should be strictly equal
ok 627 should be deeply equivalent
ok 628 should be deeply equivalent
ok 629 transaction should have span
ok 630 should be strictly equal
ok 631 should be strictly equal
ok 632 should be strictly equal
ok 633 should be strictly equal
ok 634 should be deeply equivalent
ok 635 should be deeply equivalent
ok 636 transaction should have span
ok 637 should be strictly equal
ok 638 should be strictly equal
ok 639 should be strictly equal
ok 640 should be strictly equal
ok 641 should be deeply equivalent
ok 642 should be deeply equivalent
# connection.release()
ok 643 null
ok 644 null
ok 645 null
ok 646 should be strictly equal
ok 647 should be strictly equal
ok 648 should be strictly equal
ok 649 should be strictly equal
ok 650 should be strictly equal
ok 651 should be strictly equal
ok 652 should be strictly equal
ok 653 should be strictly equal
ok 654 should be deeply equivalent
ok 655 should be deeply equivalent
# mysql2.createPoolAndGetConnection
# query
# callback
# pool > connection.query(sql, callback)
ok 656 null
ok 657 should be strictly equal
ok 658 should be strictly equal
ok 659 should be strictly equal
ok 660 should be strictly equal
ok 661 should be strictly equal
ok 662 should be strictly equal
ok 663 should be strictly equal
ok 664 should be strictly equal
ok 665 should be deeply equivalent
ok 666 should be deeply equivalent
# pool > connection.query(sql, values, callback)
ok 667 null
ok 668 should be strictly equal
ok 669 should be strictly equal
ok 670 should be strictly equal
ok 671 should be strictly equal
ok 672 should be strictly equal
ok 673 should be strictly equal
ok 674 should be strictly equal
ok 675 should be strictly equal
ok 676 should be deeply equivalent
ok 677 should be deeply equivalent
# pool > connection.query(options, callback)
ok 678 null
ok 679 should be strictly equal
ok 680 should be strictly equal
ok 681 should be strictly equal
ok 682 should be strictly equal
ok 683 should be strictly equal
ok 684 should be strictly equal
ok 685 should be strictly equal
ok 686 should be strictly equal
ok 687 should be deeply equivalent
ok 688 should be deeply equivalent
# pool > connection.query(options, values, callback)
ok 689 null
ok 690 should be strictly equal
ok 691 should be strictly equal
ok 692 should be strictly equal
ok 693 should be strictly equal
ok 694 should be strictly equal
ok 695 should be strictly equal
ok 696 should be strictly equal
ok 697 should be strictly equal
ok 698 should be deeply equivalent
ok 699 should be deeply equivalent
# pool > connection.query(query, callback)
ok 700 null
ok 701 should be strictly equal
ok 702 should be strictly equal
ok 703 should be strictly equal
ok 704 should be strictly equal
ok 705 should be strictly equal
ok 706 should be strictly equal
ok 707 should be strictly equal
ok 708 should be strictly equal
ok 709 should be deeply equivalent
ok 710 should be deeply equivalent
# pool > connection.query(query_with_values, callback)
ok 711 null
ok 712 should be strictly equal
ok 713 should be strictly equal
ok 714 should be strictly equal
ok 715 should be strictly equal
ok 716 should be strictly equal
ok 717 should be strictly equal
ok 718 should be strictly equal
ok 719 should be strictly equal
ok 720 should be deeply equivalent
ok 721 should be deeply equivalent
# promise
# pool > connection.query(sql)
ok 722 should be strictly equal
ok 723 should be strictly equal
ok 724 should be strictly equal
ok 725 should be strictly equal
ok 726 should be strictly equal
ok 727 should be strictly equal
ok 728 should be strictly equal
ok 729 should be strictly equal
ok 730 should be deeply equivalent
ok 731 should be deeply equivalent
# pool > connection.query(sql, values)
ok 732 should be strictly equal
ok 733 should be strictly equal
ok 734 should be strictly equal
ok 735 should be strictly equal
ok 736 should be strictly equal
ok 737 should be strictly equal
ok 738 should be strictly equal
ok 739 should be strictly equal
ok 740 should be deeply equivalent
ok 741 should be deeply equivalent
# pool > connection.query(options)
ok 742 should be strictly equal
ok 743 should be strictly equal
ok 744 should be strictly equal
ok 745 should be strictly equal
ok 746 should be strictly equal
ok 747 should be strictly equal
ok 748 should be strictly equal
ok 749 should be strictly equal
ok 750 should be deeply equivalent
ok 751 should be deeply equivalent
# pool > connection.query(options, values)
ok 752 should be strictly equal
ok 753 should be strictly equal
ok 754 should be strictly equal
ok 755 should be strictly equal
ok 756 should be strictly equal
ok 757 should be strictly equal
ok 758 should be strictly equal
ok 759 should be strictly equal
ok 760 should be deeply equivalent
ok 761 should be deeply equivalent
# streaming
# pool > connection.query(sql)
ok 762 should be strictly equal
ok 763 should be strictly equal
ok 764 should be strictly equal
ok 765 should be strictly equal
ok 766 should be strictly equal
ok 767 should be strictly equal
ok 768 should be strictly equal
ok 769 should be strictly equal
ok 770 should be strictly equal
ok 771 should be deeply equivalent
ok 772 should be deeply equivalent
# pool > connection.query(sql, values)
ok 773 should be strictly equal
ok 774 should be strictly equal
ok 775 should be strictly equal
ok 776 should be strictly equal
ok 777 should be strictly equal
ok 778 should be strictly equal
ok 779 should be strictly equal
ok 780 should be strictly equal
ok 781 should be strictly equal
ok 782 should be deeply equivalent
ok 783 should be deeply equivalent
# pool > connection.query(options)
ok 784 should be strictly equal
ok 785 should be strictly equal
ok 786 should be strictly equal
ok 787 should be strictly equal
ok 788 should be strictly equal
ok 789 should be strictly equal
ok 790 should be strictly equal
ok 791 should be strictly equal
ok 792 should be strictly equal
ok 793 should be deeply equivalent
ok 794 should be deeply equivalent
# pool > connection.query(options, values)
ok 795 should be strictly equal
ok 796 should be strictly equal
ok 797 should be strictly equal
ok 798 should be strictly equal
ok 799 should be strictly equal
ok 800 should be strictly equal
ok 801 should be strictly equal
ok 802 should be strictly equal
ok 803 should be strictly equal
ok 804 should be deeply equivalent
ok 805 should be deeply equivalent
# pool > connection.query(query)
ok 806 should be strictly equal
ok 807 should be strictly equal
ok 808 should be strictly equal
ok 809 should be strictly equal
ok 810 should be strictly equal
ok 811 should be strictly equal
ok 812 should be strictly equal
ok 813 should be strictly equal
ok 814 should be strictly equal
ok 815 should be deeply equivalent
ok 816 should be deeply equivalent
# pool > connection.query(query_with_values)
ok 817 should be strictly equal
ok 818 should be strictly equal
ok 819 should be strictly equal
ok 820 should be strictly equal
ok 821 should be strictly equal
ok 822 should be strictly equal
ok 823 should be strictly equal
ok 824 should be strictly equal
ok 825 should be strictly equal
ok 826 should be deeply equivalent
ok 827 should be deeply equivalent
# execute
# callback
# pool > connection.execute(sql, callback)
ok 828 null
ok 829 should be strictly equal
ok 830 should be strictly equal
ok 831 should be strictly equal
ok 832 should be strictly equal
ok 833 should be strictly equal
ok 834 should be strictly equal
ok 835 should be strictly equal
ok 836 should be strictly equal
ok 837 should be deeply equivalent
ok 838 should be deeply equivalent
# pool > connection.execute(sql, values, callback)
ok 839 null
ok 840 should be strictly equal
ok 841 should be strictly equal
ok 842 should be strictly equal
ok 843 should be strictly equal
ok 844 should be strictly equal
ok 845 should be strictly equal
ok 846 should be strictly equal
ok 847 should be strictly equal
ok 848 should be deeply equivalent
ok 849 should be deeply equivalent
# pool > connection.execute(options, callback)
ok 850 null
ok 851 should be strictly equal
ok 852 should be strictly equal
ok 853 should be strictly equal
ok 854 should be strictly equal
ok 855 should be strictly equal
ok 856 should be strictly equal
ok 857 should be strictly equal
ok 858 should be strictly equal
ok 859 should be deeply equivalent
ok 860 should be deeply equivalent
# pool > connection.execute(options, values, callback)
ok 861 null
ok 862 should be strictly equal
ok 863 should be strictly equal
ok 864 should be strictly equal
ok 865 should be strictly equal
ok 866 should be strictly equal
ok 867 should be strictly equal
ok 868 should be strictly equal
ok 869 should be strictly equal
ok 870 should be deeply equivalent
ok 871 should be deeply equivalent
# promise
# pool > connection.execute(sql)
ok 872 should be strictly equal
ok 873 should be strictly equal
ok 874 should be strictly equal
ok 875 should be strictly equal
ok 876 should be strictly equal
ok 877 should be strictly equal
ok 878 should be strictly equal
ok 879 should be strictly equal
ok 880 should be deeply equivalent
ok 881 should be deeply equivalent
# pool > connection.execute(sql, values)
ok 882 should be strictly equal
ok 883 should be strictly equal
ok 884 should be strictly equal
ok 885 should be strictly equal
ok 886 should be strictly equal
ok 887 should be strictly equal
ok 888 should be strictly equal
ok 889 should be strictly equal
ok 890 should be deeply equivalent
ok 891 should be deeply equivalent
# pool > connection.execute(options)
ok 892 should be strictly equal
ok 893 should be strictly equal
ok 894 should be strictly equal
ok 895 should be strictly equal
ok 896 should be strictly equal
ok 897 should be strictly equal
ok 898 should be strictly equal
ok 899 should be strictly equal
ok 900 should be deeply equivalent
ok 901 should be deeply equivalent
# pool > connection.execute(options, values)
ok 902 should be strictly equal
ok 903 should be strictly equal
ok 904 should be strictly equal
ok 905 should be strictly equal
ok 906 should be strictly equal
ok 907 should be strictly equal
ok 908 should be strictly equal
ok 909 should be strictly equal
ok 910 should be deeply equivalent
ok 911 should be deeply equivalent
# simultaneous queries
# on same connection
ok 912 null
ok 913 should be strictly equal
ok 914 null
ok 915 should be strictly equal
ok 916 null
ok 917 should be strictly equal
ok 918 should be strictly equal
ok 919 should be strictly equal
ok 920 should be strictly equal
ok 921 should be strictly equal
ok 922 should be strictly equal
ok 923 should be strictly equal
ok 924 should be strictly equal
ok 925 should be deeply equivalent
ok 926 should be deeply equivalent
ok 927 should be strictly equal
ok 928 should be strictly equal
ok 929 should be strictly equal
ok 930 should be strictly equal
ok 931 should be deeply equivalent
ok 932 should be deeply equivalent
ok 933 should be strictly equal
ok 934 should be strictly equal
ok 935 should be strictly equal
ok 936 should be strictly equal
ok 937 should be deeply equivalent
ok 938 should be deeply equivalent
# on different connections
ok 939 null
ok 940 null
ok 941 should be strictly equal
ok 942 null
ok 943 null
ok 944 should be strictly equal
ok 945 null
ok 946 null
ok 947 should be strictly equal
ok 948 should be strictly equal
ok 949 should be strictly equal
ok 950 should be strictly equal
ok 951 should be strictly equal
ok 952 should be strictly equal
ok 953 should be strictly equal
ok 954 should be strictly equal
ok 955 should be deeply equivalent
ok 956 should be deeply equivalent
ok 957 should be strictly equal
ok 958 should be strictly equal
ok 959 should be strictly equal
ok 960 should be strictly equal
ok 961 should be deeply equivalent
ok 962 should be deeply equivalent
ok 963 should be strictly equal
ok 964 should be strictly equal
ok 965 should be strictly equal
ok 966 should be strictly equal
ok 967 should be deeply equivalent
ok 968 should be deeply equivalent
# simultaneous transactions
ok 969 null
ok 970 should be strictly equal
ok 971 null
ok 972 should be strictly equal
ok 973 null
ok 974 should be strictly equal
ok 975 should be strictly equal
ok 976 should be strictly equal
ok 977 should be deeply equivalent
ok 978 transaction should have span
ok 979 should be strictly equal
ok 980 should be strictly equal
ok 981 should be strictly equal
ok 982 should be strictly equal
ok 983 should be deeply equivalent
ok 984 should be deeply equivalent
ok 985 transaction should have span
ok 986 should be strictly equal
ok 987 should be strictly equal
ok 988 should be strictly equal
ok 989 should be strictly equal
ok 990 should be deeply equivalent
ok 991 should be deeply equivalent
ok 992 transaction should have span
ok 993 should be strictly equal
ok 994 should be strictly equal
ok 995 should be strictly equal
ok 996 should be strictly equal
ok 997 should be deeply equivalent
ok 998 should be deeply equivalent
# mysql2.createPoolClusterAndGetConnection
# query
# callback
# poolCluster > connection.query(sql, callback)
ok 999 null
ok 1000 should be strictly equal
ok 1001 should be strictly equal
ok 1002 should be strictly equal
ok 1003 should be strictly equal
ok 1004 should be strictly equal
ok 1005 should be strictly equal
ok 1006 should be strictly equal
ok 1007 should be strictly equal
ok 1008 should be deeply equivalent
ok 1009 should be deeply equivalent
# poolCluster > connection.query(sql, values, callback)
ok 1010 null
ok 1011 should be strictly equal
ok 1012 should be strictly equal
ok 1013 should be strictly equal
ok 1014 should be strictly equal
ok 1015 should be strictly equal
ok 1016 should be strictly equal
ok 1017 should be strictly equal
ok 1018 should be strictly equal
ok 1019 should be deeply equivalent
ok 1020 should be deeply equivalent
# poolCluster > connection.query(options, callback)
ok 1021 null
ok 1022 should be strictly equal
ok 1023 should be strictly equal
ok 1024 should be strictly equal
ok 1025 should be strictly equal
ok 1026 should be strictly equal
ok 1027 should be strictly equal
ok 1028 should be strictly equal
ok 1029 should be strictly equal
ok 1030 should be deeply equivalent
ok 1031 should be deeply equivalent
# poolCluster > connection.query(options, values, callback)
ok 1032 null
ok 1033 should be strictly equal
ok 1034 should be strictly equal
ok 1035 should be strictly equal
ok 1036 should be strictly equal
ok 1037 should be strictly equal
ok 1038 should be strictly equal
ok 1039 should be strictly equal
ok 1040 should be strictly equal
ok 1041 should be deeply equivalent
ok 1042 should be deeply equivalent
# poolCluster > connection.query(query, callback)
ok 1043 null
ok 1044 should be strictly equal
ok 1045 should be strictly equal
ok 1046 should be strictly equal
ok 1047 should be strictly equal
ok 1048 should be strictly equal
ok 1049 should be strictly equal
ok 1050 should be strictly equal
ok 1051 should be strictly equal
ok 1052 should be deeply equivalent
ok 1053 should be deeply equivalent
# poolCluster > connection.query(query_with_values, callback)
ok 1054 null
ok 1055 should be strictly equal
ok 1056 should be strictly equal
ok 1057 should be strictly equal
ok 1058 should be strictly equal
ok 1059 should be strictly equal
ok 1060 should be strictly equal
ok 1061 should be strictly equal
ok 1062 should be strictly equal
ok 1063 should be deeply equivalent
ok 1064 should be deeply equivalent
# streaming
# poolCluster > connection.query(sql)
ok 1065 should be strictly equal
ok 1066 should be strictly equal
ok 1067 should be strictly equal
ok 1068 should be strictly equal
ok 1069 should be strictly equal
ok 1070 should be strictly equal
ok 1071 should be strictly equal
ok 1072 should be strictly equal
ok 1073 should be strictly equal
ok 1074 should be deeply equivalent
ok 1075 should be deeply equivalent
# poolCluster > connection.query(sql, values)
ok 1076 should be strictly equal
ok 1077 should be strictly equal
ok 1078 should be strictly equal
ok 1079 should be strictly equal
ok 1080 should be strictly equal
ok 1081 should be strictly equal
ok 1082 should be strictly equal
ok 1083 should be strictly equal
ok 1084 should be strictly equal
ok 1085 should be deeply equivalent
ok 1086 should be deeply equivalent
# poolCluster > connection.query(options)
ok 1087 should be strictly equal
ok 1088 should be strictly equal
ok 1089 should be strictly equal
ok 1090 should be strictly equal
ok 1091 should be strictly equal
ok 1092 should be strictly equal
ok 1093 should be strictly equal
ok 1094 should be strictly equal
ok 1095 should be strictly equal
ok 1096 should be deeply equivalent
ok 1097 should be deeply equivalent
# poolCluster > connection.query(options, values)
ok 1098 should be strictly equal
ok 1099 should be strictly equal
ok 1100 should be strictly equal
ok 1101 should be strictly equal
ok 1102 should be strictly equal
ok 1103 should be strictly equal
ok 1104 should be strictly equal
ok 1105 should be strictly equal
ok 1106 should be strictly equal
ok 1107 should be deeply equivalent
ok 1108 should be deeply equivalent
# poolCluster > connection.query(query)
ok 1109 should be strictly equal
ok 1110 should be strictly equal
ok 1111 should be strictly equal
ok 1112 should be strictly equal
ok 1113 should be strictly equal
ok 1114 should be strictly equal
ok 1115 should be strictly equal
ok 1116 should be strictly equal
ok 1117 should be strictly equal
ok 1118 should be deeply equivalent
ok 1119 should be deeply equivalent
# poolCluster > connection.query(query_with_values)
ok 1120 should be strictly equal
ok 1121 should be strictly equal
ok 1122 should be strictly equal
ok 1123 should be strictly equal
ok 1124 should be strictly equal
ok 1125 should be strictly equal
ok 1126 should be strictly equal
ok 1127 should be strictly equal
ok 1128 should be strictly equal
ok 1129 should be deeply equivalent
ok 1130 should be deeply equivalent
# execute
# callback
# poolCluster > connection.execute(sql, callback)
ok 1131 null
ok 1132 should be strictly equal
ok 1133 should be strictly equal
ok 1134 should be strictly equal
ok 1135 should be strictly equal
ok 1136 should be strictly equal
ok 1137 should be strictly equal
ok 1138 should be strictly equal
ok 1139 should be strictly equal
ok 1140 should be deeply equivalent
ok 1141 should be deeply equivalent
# poolCluster > connection.execute(sql, values, callback)
ok 1142 null
ok 1143 should be strictly equal
ok 1144 should be strictly equal
ok 1145 should be strictly equal
ok 1146 should be strictly equal
ok 1147 should be strictly equal
ok 1148 should be strictly equal
ok 1149 should be strictly equal
ok 1150 should be strictly equal
ok 1151 should be deeply equivalent
ok 1152 should be deeply equivalent
# poolCluster > connection.execute(options, callback)
ok 1153 null
ok 1154 should be strictly equal
ok 1155 should be strictly equal
ok 1156 should be strictly equal
ok 1157 should be strictly equal
ok 1158 should be strictly equal
ok 1159 should be strictly equal
ok 1160 should be strictly equal
ok 1161 should be strictly equal
ok 1162 should be deeply equivalent
ok 1163 should be deeply equivalent
# poolCluster > connection.execute(options, values, callback)
ok 1164 null
ok 1165 should be strictly equal
ok 1166 should be strictly equal
ok 1167 should be strictly equal
ok 1168 should be strictly equal
ok 1169 should be strictly equal
ok 1170 should be strictly equal
ok 1171 should be strictly equal
ok 1172 should be strictly equal
ok 1173 should be deeply equivalent
ok 1174 should be deeply equivalent
# simultaneous queries
# on same connection
ok 1175 null
ok 1176 should be strictly equal
ok 1177 null
ok 1178 should be strictly equal
ok 1179 null
ok 1180 should be strictly equal
ok 1181 should be strictly equal
ok 1182 should be strictly equal
ok 1183 should be strictly equal
ok 1184 should be strictly equal
ok 1185 should be strictly equal
ok 1186 should be strictly equal
ok 1187 should be strictly equal
ok 1188 should be deeply equivalent
ok 1189 should be deeply equivalent
ok 1190 should be strictly equal
ok 1191 should be strictly equal
ok 1192 should be strictly equal
ok 1193 should be strictly equal
ok 1194 should be deeply equivalent
ok 1195 should be deeply equivalent
ok 1196 should be strictly equal
ok 1197 should be strictly equal
ok 1198 should be strictly equal
ok 1199 should be strictly equal
ok 1200 should be deeply equivalent
ok 1201 should be deeply equivalent
# on different connections
ok 1202 null
ok 1203 null
ok 1204 should be strictly equal
ok 1205 null
ok 1206 null
ok 1207 should be strictly equal
ok 1208 null
ok 1209 null
ok 1210 should be strictly equal
ok 1211 should be strictly equal
ok 1212 should be strictly equal
ok 1213 should be strictly equal
ok 1214 should be strictly equal
ok 1215 should be strictly equal
ok 1216 should be strictly equal
ok 1217 should be strictly equal
ok 1218 should be deeply equivalent
ok 1219 should be deeply equivalent
ok 1220 should be strictly equal
ok 1221 should be strictly equal
ok 1222 should be strictly equal
ok 1223 should be strictly equal
ok 1224 should be deeply equivalent
ok 1225 should be deeply equivalent
ok 1226 should be strictly equal
ok 1227 should be strictly equal
ok 1228 should be strictly equal
ok 1229 should be strictly equal
ok 1230 should be deeply equivalent
ok 1231 should be deeply equivalent
# simultaneous transactions
ok 1232 null
ok 1233 should be strictly equal
ok 1234 null
ok 1235 should be strictly equal
ok 1236 null
ok 1237 should be strictly equal
ok 1238 should be strictly equal
ok 1239 should be strictly equal
ok 1240 should be deeply equivalent
ok 1241 transaction should have span
ok 1242 should be strictly equal
ok 1243 should be strictly equal
ok 1244 should be strictly equal
ok 1245 should be strictly equal
ok 1246 should be deeply equivalent
ok 1247 should be deeply equivalent
ok 1248 transaction should have span
ok 1249 should be strictly equal
ok 1250 should be strictly equal
ok 1251 should be strictly equal
ok 1252 should be strictly equal
ok 1253 should be deeply equivalent
ok 1254 should be deeply equivalent
ok 1255 transaction should have span
ok 1256 should be strictly equal
ok 1257 should be strictly equal
ok 1258 should be strictly equal
ok 1259 should be strictly equal
ok 1260 should be deeply equivalent
ok 1261 should be deeply equivalent
# mysql2.createPoolClusterAndGetConnectionViaOf
# query
# callback
# poolCluster > of > connection.query(sql, callback)
ok 1262 null
ok 1263 should be strictly equal
ok 1264 should be strictly equal
ok 1265 should be strictly equal
ok 1266 should be strictly equal
ok 1267 should be strictly equal
ok 1268 should be strictly equal
ok 1269 should be strictly equal
ok 1270 should be strictly equal
ok 1271 should be deeply equivalent
ok 1272 should be deeply equivalent
# poolCluster > of > connection.query(sql, values, callback)
ok 1273 null
ok 1274 should be strictly equal
ok 1275 should be strictly equal
ok 1276 should be strictly equal
ok 1277 should be strictly equal
ok 1278 should be strictly equal
ok 1279 should be strictly equal
ok 1280 should be strictly equal
ok 1281 should be strictly equal
ok 1282 should be deeply equivalent
ok 1283 should be deeply equivalent
# poolCluster > of > connection.query(options, callback)
ok 1284 null
ok 1285 should be strictly equal
ok 1286 should be strictly equal
ok 1287 should be strictly equal
ok 1288 should be strictly equal
ok 1289 should be strictly equal
ok 1290 should be strictly equal
ok 1291 should be strictly equal
ok 1292 should be strictly equal
ok 1293 should be deeply equivalent
ok 1294 should be deeply equivalent
# poolCluster > of > connection.query(options, values, callback)
ok 1295 null
ok 1296 should be strictly equal
ok 1297 should be strictly equal
ok 1298 should be strictly equal
ok 1299 should be strictly equal
ok 1300 should be strictly equal
ok 1301 should be strictly equal
ok 1302 should be strictly equal
ok 1303 should be strictly equal
ok 1304 should be deeply equivalent
ok 1305 should be deeply equivalent
# poolCluster > of > connection.query(query, callback)
ok 1306 null
ok 1307 should be strictly equal
ok 1308 should be strictly equal
ok 1309 should be strictly equal
ok 1310 should be strictly equal
ok 1311 should be strictly equal
ok 1312 should be strictly equal
ok 1313 should be strictly equal
ok 1314 should be strictly equal
ok 1315 should be deeply equivalent
ok 1316 should be deeply equivalent
# poolCluster > of > connection.query(query_with_values, callback)
ok 1317 null
ok 1318 should be strictly equal
ok 1319 should be strictly equal
ok 1320 should be strictly equal
ok 1321 should be strictly equal
ok 1322 should be strictly equal
ok 1323 should be strictly equal
ok 1324 should be strictly equal
ok 1325 should be strictly equal
ok 1326 should be deeply equivalent
ok 1327 should be deeply equivalent
# streaming
# poolCluster > of > connection.query(sql)
ok 1328 should be strictly equal
ok 1329 should be strictly equal
ok 1330 should be strictly equal
ok 1331 should be strictly equal
ok 1332 should be strictly equal
ok 1333 should be strictly equal
ok 1334 should be strictly equal
ok 1335 should be strictly equal
ok 1336 should be strictly equal
ok 1337 should be deeply equivalent
ok 1338 should be deeply equivalent
# poolCluster > of > connection.query(sql, values)
ok 1339 should be strictly equal
ok 1340 should be strictly equal
ok 1341 should be strictly equal
ok 1342 should be strictly equal
ok 1343 should be strictly equal
ok 1344 should be strictly equal
ok 1345 should be strictly equal
ok 1346 should be strictly equal
ok 1347 should be strictly equal
ok 1348 should be deeply equivalent
ok 1349 should be deeply equivalent
# poolCluster > of > connection.query(options)
ok 1350 should be strictly equal
ok 1351 should be strictly equal
ok 1352 should be strictly equal
ok 1353 should be strictly equal
ok 1354 should be strictly equal
ok 1355 should be strictly equal
ok 1356 should be strictly equal
ok 1357 should be strictly equal
ok 1358 should be strictly equal
ok 1359 should be deeply equivalent
ok 1360 should be deeply equivalent
# poolCluster > of > connection.query(options, values)
ok 1361 should be strictly equal
ok 1362 should be strictly equal
ok 1363 should be strictly equal
ok 1364 should be strictly equal
ok 1365 should be strictly equal
ok 1366 should be strictly equal
ok 1367 should be strictly equal
ok 1368 should be strictly equal
ok 1369 should be strictly equal
ok 1370 should be deeply equivalent
ok 1371 should be deeply equivalent
# poolCluster > of > connection.query(query)
ok 1372 should be strictly equal
ok 1373 should be strictly equal
ok 1374 should be strictly equal
ok 1375 should be strictly equal
ok 1376 should be strictly equal
ok 1377 should be strictly equal
ok 1378 should be strictly equal
ok 1379 should be strictly equal
ok 1380 should be strictly equal
ok 1381 should be deeply equivalent
ok 1382 should be deeply equivalent
# poolCluster > of > connection.query(query_with_values)
ok 1383 should be strictly equal
ok 1384 should be strictly equal
ok 1385 should be strictly equal
ok 1386 should be strictly equal
ok 1387 should be strictly equal
ok 1388 should be strictly equal
ok 1389 should be strictly equal
ok 1390 should be strictly equal
ok 1391 should be strictly equal
ok 1392 should be deeply equivalent
ok 1393 should be deeply equivalent
# execute
# callback
# poolCluster > of > connection.execute(sql, callback)
ok 1394 null
ok 1395 should be strictly equal
ok 1396 should be strictly equal
ok 1397 should be strictly equal
ok 1398 should be strictly equal
ok 1399 should be strictly equal
ok 1400 should be strictly equal
ok 1401 should be strictly equal
ok 1402 should be strictly equal
ok 1403 should be deeply equivalent
ok 1404 should be deeply equivalent
# poolCluster > of > connection.execute(sql, values, callback)
ok 1405 null
ok 1406 should be strictly equal
ok 1407 should be strictly equal
ok 1408 should be strictly equal
ok 1409 should be strictly equal
ok 1410 should be strictly equal
ok 1411 should be strictly equal
ok 1412 should be strictly equal
ok 1413 should be strictly equal
ok 1414 should be deeply equivalent
ok 1415 should be deeply equivalent
# poolCluster > of > connection.execute(options, callback)
ok 1416 null
ok 1417 should be strictly equal
ok 1418 should be strictly equal
ok 1419 should be strictly equal
ok 1420 should be strictly equal
ok 1421 should be strictly equal
ok 1422 should be strictly equal
ok 1423 should be strictly equal
ok 1424 should be strictly equal
ok 1425 should be deeply equivalent
ok 1426 should be deeply equivalent
# poolCluster > of > connection.execute(options, values, callback)
ok 1427 null
ok 1428 should be strictly equal
ok 1429 should be strictly equal
ok 1430 should be strictly equal
ok 1431 should be strictly equal
ok 1432 should be strictly equal
ok 1433 should be strictly equal
ok 1434 should be strictly equal
ok 1435 should be strictly equal
ok 1436 should be deeply equivalent
ok 1437 should be deeply equivalent
# simultaneous queries
# on same connection
ok 1438 null
ok 1439 should be strictly equal
ok 1440 null
ok 1441 should be strictly equal
ok 1442 null
ok 1443 should be strictly equal
ok 1444 should be strictly equal
ok 1445 should be strictly equal
ok 1446 should be strictly equal
ok 1447 should be strictly equal
ok 1448 should be strictly equal
ok 1449 should be strictly equal
ok 1450 should be strictly equal
ok 1451 should be deeply equivalent
ok 1452 should be deeply equivalent
ok 1453 should be strictly equal
ok 1454 should be strictly equal
ok 1455 should be strictly equal
ok 1456 should be strictly equal
ok 1457 should be deeply equivalent
ok 1458 should be deeply equivalent
ok 1459 should be strictly equal
ok 1460 should be strictly equal
ok 1461 should be strictly equal
ok 1462 should be strictly equal
ok 1463 should be deeply equivalent
ok 1464 should be deeply equivalent
# on different connections
ok 1465 null
ok 1466 null
ok 1467 should be strictly equal
ok 1468 null
ok 1469 null
ok 1470 should be strictly equal
ok 1471 null
ok 1472 null
ok 1473 should be strictly equal
ok 1474 should be strictly equal
ok 1475 should be strictly equal
ok 1476 should be strictly equal
ok 1477 should be strictly equal
ok 1478 should be strictly equal
ok 1479 should be strictly equal
ok 1480 should be strictly equal
ok 1481 should be deeply equivalent
ok 1482 should be deeply equivalent
ok 1483 should be strictly equal
ok 1484 should be strictly equal
ok 1485 should be strictly equal
ok 1486 should be strictly equal
ok 1487 should be deeply equivalent
ok 1488 should be deeply equivalent
ok 1489 should be strictly equal
ok 1490 should be strictly equal
ok 1491 should be strictly equal
ok 1492 should be strictly equal
ok 1493 should be deeply equivalent
ok 1494 should be deeply equivalent
# simultaneous transactions
ok 1495 null
ok 1496 should be strictly equal
ok 1497 null
ok 1498 should be strictly equal
ok 1499 null
ok 1500 should be strictly equal
ok 1501 should be strictly equal
ok 1502 should be strictly equal
ok 1503 should be deeply equivalent
ok 1504 transaction should have span
ok 1505 should be strictly equal
ok 1506 should be strictly equal
ok 1507 should be strictly equal
ok 1508 should be strictly equal
ok 1509 should be deeply equivalent
ok 1510 should be deeply equivalent
ok 1511 transaction should have span
ok 1512 should be strictly equal
ok 1513 should be strictly equal
ok 1514 should be strictly equal
ok 1515 should be strictly equal
ok 1516 should be deeply equivalent
ok 1517 should be deeply equivalent
ok 1518 transaction should have span
ok 1519 should be strictly equal
ok 1520 should be strictly equal
ok 1521 should be strictly equal
ok 1522 should be strictly equal
ok 1523 should be deeply equivalent
ok 1524 should be deeply equivalent

1..1524
# tests 1524
# pass  1524

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/mysql2/pool-release-1.test.js
TAP version 13
# release connection prior to transaction
ok 1 null
ok 2 should be truthy
ok 3 null
ok 4 should be truthy

1..4
# tests 4
# pass  4

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/pg/knex.test.js
TAP version 13
# knex.select().from('test')
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
ok 17 should be strictly equal
ok 18 include user-land code frame
# knex.select('c1', 'c2').from('test')
ok 19 should be strictly equal
ok 20 should be strictly equal
ok 21 should be strictly equal
ok 22 should be strictly equal
ok 23 should be strictly equal
ok 24 should be strictly equal
ok 25 should be strictly equal
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
ok 29 should be strictly equal
ok 30 should be strictly equal
ok 31 should be strictly equal
ok 32 should be strictly equal
ok 33 should be strictly equal
ok 34 should be strictly equal
ok 35 should be strictly equal
ok 36 include user-land code frame
# knex.column('c1', 'c2').select().from('test')
ok 37 should be strictly equal
ok 38 should be strictly equal
ok 39 should be strictly equal
ok 40 should be strictly equal
ok 41 should be strictly equal
ok 42 should be strictly equal
ok 43 should be strictly equal
ok 44 should be strictly equal
ok 45 should be strictly equal
ok 46 should be strictly equal
ok 47 should be strictly equal
ok 48 should be strictly equal
ok 49 should be strictly equal
ok 50 should be strictly equal
ok 51 should be strictly equal
ok 52 should be strictly equal
ok 53 should be strictly equal
ok 54 include user-land code frame
# knex('test').select()
ok 55 should be strictly equal
ok 56 should be strictly equal
ok 57 should be strictly equal
ok 58 should be strictly equal
ok 59 should be strictly equal
ok 60 should be strictly equal
ok 61 should be strictly equal
ok 62 should be strictly equal
ok 63 should be strictly equal
ok 64 should be strictly equal
ok 65 should be strictly equal
ok 66 should be strictly equal
ok 67 should be strictly equal
ok 68 should be strictly equal
ok 69 should be strictly equal
ok 70 should be strictly equal
ok 71 should be strictly equal
ok 72 include user-land code frame
# knex.select().from('test').timeout(10000)
ok 73 should be strictly equal
ok 74 should be strictly equal
ok 75 should be strictly equal
ok 76 should be strictly equal
ok 77 should be strictly equal
ok 78 should be strictly equal
ok 79 should be strictly equal
ok 80 should be strictly equal
ok 81 should be strictly equal
ok 82 should be strictly equal
ok 83 should be strictly equal
ok 84 should be strictly equal
ok 85 should be strictly equal
ok 86 should be strictly equal
ok 87 should be strictly equal
ok 88 should be strictly equal
ok 89 should be strictly equal
ok 90 include user-land code frame
# knex('test').insert({c1: 'test1', c2: 'test2'})
ok 91 should be strictly equal
ok 92 should be strictly equal
ok 93 should be strictly equal
ok 94 should be strictly equal
ok 95 should be strictly equal
ok 96 should be strictly equal
ok 97 should be strictly equal
ok 98 should be strictly equal
ok 99 include user-land code frame
# knex.raw
ok 100 should be strictly equal
ok 101 should be strictly equal
ok 102 should be strictly equal
ok 103 should be strictly equal
ok 104 should be strictly equal
ok 105 should be strictly equal
ok 106 should be strictly equal
ok 107 should be strictly equal
ok 108 should be strictly equal
ok 109 should be strictly equal
ok 110 should be strictly equal
ok 111 should be strictly equal
ok 112 should be strictly equal
ok 113 should be strictly equal
ok 114 should be strictly equal
ok 115 should be strictly equal
ok 116 should be strictly equal
ok 117 include user-land code frame

1..117
# tests 117
# pass  117

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/pg/pg.test.js
TAP version 13
# pg.createClient
# basic query with callback
# client.query(sql, callback)
ok 1 null
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should be deeply equivalent
ok 11 should be deeply equivalent
# client.query(sql, values, callback)
ok 12 null
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
ok 17 should be strictly equal
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
ok 21 should be deeply equivalent
ok 22 should be deeply equivalent
# client.query(options, callback)
ok 23 null
ok 24 should be strictly equal
ok 25 should be strictly equal
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
ok 29 should be strictly equal
ok 30 should be strictly equal
ok 31 should be strictly equal
ok 32 should be deeply equivalent
ok 33 should be deeply equivalent
# client.query(options, values, callback)
ok 34 null
ok 35 should be strictly equal
ok 36 should be strictly equal
ok 37 should be strictly equal
ok 38 should be strictly equal
ok 39 should be strictly equal
ok 40 should be strictly equal
ok 41 should be strictly equal
ok 42 should be strictly equal
ok 43 should be deeply equivalent
ok 44 should be deeply equivalent
# client.query(options-with-values, callback)
ok 45 null
ok 46 should be strictly equal
ok 47 should be strictly equal
ok 48 should be strictly equal
ok 49 should be strictly equal
ok 50 should be strictly equal
ok 51 should be strictly equal
ok 52 should be strictly equal
ok 53 should be strictly equal
ok 54 should be deeply equivalent
ok 55 should be deeply equivalent
# client.query(sql) - no callback
ok 56 should be strictly equal
ok 57 should be strictly equal
ok 58 should be strictly equal
ok 59 should be strictly equal
ok 60 should be strictly equal
ok 61 should be strictly equal
ok 62 should be strictly equal
ok 63 should be deeply equivalent
ok 64 should be deeply equivalent
# basic query streaming
# client.query(new Query(sql))
ok 65 should be strictly equal
ok 66 should be strictly equal
ok 67 should be strictly equal
ok 68 should be strictly equal
ok 69 should be strictly equal
ok 70 should be strictly equal
ok 71 should be strictly equal
ok 72 should be strictly equal
ok 73 should be strictly equal
ok 74 should be deeply equivalent
ok 75 should be deeply equivalent
# basic query promise
# client.query(sql)
ok 76 should be strictly equal
ok 77 should be strictly equal
ok 78 should be strictly equal
ok 79 should be strictly equal
ok 80 should be strictly equal
ok 81 should be strictly equal
ok 82 should be strictly equal
ok 83 should be strictly equal
ok 84 should be strictly equal
ok 85 should be deeply equivalent
ok 86 should be deeply equivalent
# client.query(sql, values)
ok 87 should be strictly equal
ok 88 should be strictly equal
ok 89 should be strictly equal
ok 90 should be strictly equal
ok 91 should be strictly equal
ok 92 should be strictly equal
ok 93 should be strictly equal
ok 94 should be strictly equal
ok 95 should be strictly equal
ok 96 should be deeply equivalent
ok 97 should be deeply equivalent
# client.query(options)
ok 98 should be strictly equal
ok 99 should be strictly equal
ok 100 should be strictly equal
ok 101 should be strictly equal
ok 102 should be strictly equal
ok 103 should be strictly equal
ok 104 should be strictly equal
ok 105 should be strictly equal
ok 106 should be strictly equal
ok 107 should be deeply equivalent
ok 108 should be deeply equivalent
# client.query(options, values)
ok 109 should be strictly equal
ok 110 should be strictly equal
ok 111 should be strictly equal
ok 112 should be strictly equal
ok 113 should be strictly equal
ok 114 should be strictly equal
ok 115 should be strictly equal
ok 116 should be strictly equal
ok 117 should be strictly equal
ok 118 should be deeply equivalent
ok 119 should be deeply equivalent
# client.query(options-with-values)
ok 120 should be strictly equal
ok 121 should be strictly equal
ok 122 should be strictly equal
ok 123 should be strictly equal
ok 124 should be strictly equal
ok 125 should be strictly equal
ok 126 should be strictly equal
ok 127 should be strictly equal
ok 128 should be strictly equal
ok 129 should be deeply equivalent
ok 130 should be deeply equivalent
# simultaneous queries
# on same connection
ok 131 null
ok 132 should be strictly equal
ok 133 null
ok 134 should be strictly equal
ok 135 null
ok 136 should be strictly equal
ok 137 should be strictly equal
ok 138 should be strictly equal
ok 139 should be strictly equal
ok 140 should be strictly equal
ok 141 should be strictly equal
ok 142 should be strictly equal
ok 143 should be strictly equal
ok 144 should be deeply equivalent
ok 145 should be deeply equivalent
ok 146 should be strictly equal
ok 147 should be strictly equal
ok 148 should be strictly equal
ok 149 should be strictly equal
ok 150 should be deeply equivalent
ok 151 should be deeply equivalent
ok 152 should be strictly equal
ok 153 should be strictly equal
ok 154 should be strictly equal
ok 155 should be strictly equal
ok 156 should be deeply equivalent
ok 157 should be deeply equivalent
# simultaneous transactions
ok 158 null
ok 159 should be strictly equal
ok 160 null
ok 161 should be strictly equal
ok 162 null
ok 163 should be strictly equal
ok 164 should be strictly equal
ok 165 should be strictly equal
ok 166 should be deeply equivalent
ok 167 transaction should have span
ok 168 should be strictly equal
ok 169 should be strictly equal
ok 170 should be strictly equal
ok 171 should be strictly equal
ok 172 should be deeply equivalent
ok 173 should be deeply equivalent
ok 174 transaction should have span
ok 175 should be strictly equal
ok 176 should be strictly equal
ok 177 should be strictly equal
ok 178 should be strictly equal
ok 179 should be deeply equivalent
ok 180 should be deeply equivalent
ok 181 transaction should have span
ok 182 should be strictly equal
ok 183 should be strictly equal
ok 184 should be strictly equal
ok 185 should be strictly equal
ok 186 should be deeply equivalent
ok 187 should be deeply equivalent
# pg.createPoolAndConnect
# basic query with callback
# pool.query(sql, callback)
ok 188 null
ok 189 should be strictly equal
ok 190 should be strictly equal
ok 191 should be strictly equal
ok 192 should be strictly equal
ok 193 should be strictly equal
ok 194 should be strictly equal
ok 195 should be strictly equal
ok 196 should be strictly equal
ok 197 should be deeply equivalent
ok 198 should be deeply equivalent
# pool.query(sql, values, callback)
ok 199 null
ok 200 should be strictly equal
ok 201 should be strictly equal
ok 202 should be strictly equal
ok 203 should be strictly equal
ok 204 should be strictly equal
ok 205 should be strictly equal
ok 206 should be strictly equal
ok 207 should be strictly equal
ok 208 should be deeply equivalent
ok 209 should be deeply equivalent
# pool.query(options, callback)
ok 210 null
ok 211 should be strictly equal
ok 212 should be strictly equal
ok 213 should be strictly equal
ok 214 should be strictly equal
ok 215 should be strictly equal
ok 216 should be strictly equal
ok 217 should be strictly equal
ok 218 should be strictly equal
ok 219 should be deeply equivalent
ok 220 should be deeply equivalent
# pool.query(options, values, callback)
ok 221 null
ok 222 should be strictly equal
ok 223 should be strictly equal
ok 224 should be strictly equal
ok 225 should be strictly equal
ok 226 should be strictly equal
ok 227 should be strictly equal
ok 228 should be strictly equal
ok 229 should be strictly equal
ok 230 should be deeply equivalent
ok 231 should be deeply equivalent
# pool.query(options-with-values, callback)
ok 232 null
ok 233 should be strictly equal
ok 234 should be strictly equal
ok 235 should be strictly equal
ok 236 should be strictly equal
ok 237 should be strictly equal
ok 238 should be strictly equal
ok 239 should be strictly equal
ok 240 should be strictly equal
ok 241 should be deeply equivalent
ok 242 should be deeply equivalent
# pool.query(sql) - no callback
ok 243 should be strictly equal
ok 244 should be strictly equal
ok 245 should be strictly equal
ok 246 should be strictly equal
ok 247 should be strictly equal
ok 248 should be strictly equal
ok 249 should be strictly equal
ok 250 should be deeply equivalent
ok 251 should be deeply equivalent
# basic query streaming
# pool.query(new Query(sql))
ok 252 should be strictly equal
ok 253 should be strictly equal
ok 254 should be strictly equal
ok 255 should be strictly equal
ok 256 should be strictly equal
ok 257 should be strictly equal
ok 258 should be strictly equal
ok 259 should be strictly equal
ok 260 should be strictly equal
ok 261 should be deeply equivalent
ok 262 should be deeply equivalent
# basic query promise
# pool.query(sql)
ok 263 should be strictly equal
ok 264 should be strictly equal
ok 265 should be strictly equal
ok 266 should be strictly equal
ok 267 should be strictly equal
ok 268 should be strictly equal
ok 269 should be strictly equal
ok 270 should be strictly equal
ok 271 should be strictly equal
ok 272 should be deeply equivalent
ok 273 should be deeply equivalent
# pool.query(sql, values)
ok 274 should be strictly equal
ok 275 should be strictly equal
ok 276 should be strictly equal
ok 277 should be strictly equal
ok 278 should be strictly equal
ok 279 should be strictly equal
ok 280 should be strictly equal
ok 281 should be strictly equal
ok 282 should be strictly equal
ok 283 should be deeply equivalent
ok 284 should be deeply equivalent
# pool.query(options)
ok 285 should be strictly equal
ok 286 should be strictly equal
ok 287 should be strictly equal
ok 288 should be strictly equal
ok 289 should be strictly equal
ok 290 should be strictly equal
ok 291 should be strictly equal
ok 292 should be strictly equal
ok 293 should be strictly equal
ok 294 should be deeply equivalent
ok 295 should be deeply equivalent
# pool.query(options, values)
ok 296 should be strictly equal
ok 297 should be strictly equal
ok 298 should be strictly equal
ok 299 should be strictly equal
ok 300 should be strictly equal
ok 301 should be strictly equal
ok 302 should be strictly equal
ok 303 should be strictly equal
ok 304 should be strictly equal
ok 305 should be deeply equivalent
ok 306 should be deeply equivalent
# pool.query(options-with-values)
ok 307 should be strictly equal
ok 308 should be strictly equal
ok 309 should be strictly equal
ok 310 should be strictly equal
ok 311 should be strictly equal
ok 312 should be strictly equal
ok 313 should be strictly equal
ok 314 should be strictly equal
ok 315 should be strictly equal
ok 316 should be deeply equivalent
ok 317 should be deeply equivalent
# simultaneous queries
# on same connection
ok 318 null
ok 319 should be strictly equal
ok 320 null
ok 321 should be strictly equal
ok 322 null
ok 323 should be strictly equal
ok 324 should be strictly equal
ok 325 should be strictly equal
ok 326 should be strictly equal
ok 327 should be strictly equal
ok 328 should be strictly equal
ok 329 should be strictly equal
ok 330 should be strictly equal
ok 331 should be deeply equivalent
ok 332 should be deeply equivalent
ok 333 should be strictly equal
ok 334 should be strictly equal
ok 335 should be strictly equal
ok 336 should be strictly equal
ok 337 should be deeply equivalent
ok 338 should be deeply equivalent
ok 339 should be strictly equal
ok 340 should be strictly equal
ok 341 should be strictly equal
ok 342 should be strictly equal
ok 343 should be deeply equivalent
ok 344 should be deeply equivalent
# simultaneous transactions
ok 345 null
ok 346 should be strictly equal
ok 347 null
ok 348 should be strictly equal
ok 349 null
ok 350 should be strictly equal
ok 351 should be strictly equal
ok 352 should be strictly equal
ok 353 should be deeply equivalent
ok 354 transaction should have span
ok 355 should be strictly equal
ok 356 should be strictly equal
ok 357 should be strictly equal
ok 358 should be strictly equal
ok 359 should be deeply equivalent
ok 360 should be deeply equivalent
ok 361 transaction should have span
ok 362 should be strictly equal
ok 363 should be strictly equal
ok 364 should be strictly equal
ok 365 should be strictly equal
ok 366 should be deeply equivalent
ok 367 should be deeply equivalent
ok 368 transaction should have span
ok 369 should be strictly equal
ok 370 should be strictly equal
ok 371 should be strictly equal
ok 372 should be strictly equal
ok 373 should be deeply equivalent
ok 374 should be deeply equivalent
# simultaneous queries on different connections
ok 375 undefined
ok 376 undefined
ok 377 null
ok 378 should be strictly equal
ok 379 undefined
ok 380 null
ok 381 should be strictly equal
ok 382 null
ok 383 should be strictly equal
ok 384 should be strictly equal
ok 385 should be strictly equal
ok 386 should be strictly equal
ok 387 should be strictly equal
ok 388 should be strictly equal
ok 389 should be strictly equal
ok 390 should be strictly equal
ok 391 should be deeply equivalent
ok 392 should be deeply equivalent
ok 393 should be strictly equal
ok 394 should be strictly equal
ok 395 should be strictly equal
ok 396 should be strictly equal
ok 397 should be deeply equivalent
ok 398 should be deeply equivalent
ok 399 should be strictly equal
ok 400 should be strictly equal
ok 401 should be strictly equal
ok 402 should be strictly equal
ok 403 should be deeply equivalent
ok 404 should be deeply equivalent
# connection.release()
ok 405 undefined
ok 406 undefined
ok 407 null
ok 408 should be strictly equal
ok 409 should be strictly equal
ok 410 should be strictly equal
ok 411 should be strictly equal
ok 412 should be strictly equal
ok 413 should be strictly equal
ok 414 should be strictly equal
ok 415 should be strictly equal
ok 416 should be deeply equivalent
ok 417 should be deeply equivalent

1..417
# tests 417
# pass  417

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/restify/basic.test.js
TAP version 13
# transaction name
ok 1 has a transaction
ok 2 transaction name is GET /hello/:name
ok 3 transaction type is request
ok 4 server should respond with status code 200
ok 5 got correct body
# error reporting
ok 6 has the expected error
ok 7 captured data with error
ok 8 captured data has the request object
ok 9 reported an error
ok 10 has a transaction
ok 11 transaction name is GET /hello/:name
ok 12 transaction type is request
ok 13 server should respond with status code 500
# error reporting from chained handler
ok 14 has the expected error
ok 15 captured data with error
ok 16 captured data has the request object
ok 17 reported an error
ok 18 has a transaction
ok 19 transaction name is GET /hello/:name
ok 20 transaction type is request
ok 21 server should respond with status code 500
# error reporting from chained handler given as array
ok 22 has the expected error
ok 23 captured data with error
ok 24 captured data has the request object
ok 25 reported an error
ok 26 has a transaction
ok 27 transaction name is GET /hello/:name
ok 28 transaction type is request
ok 29 server should respond with status code 500

1..29
# tests 29
# pass  29

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/restify/set-framework.test.js
TAP version 13
# restify set-framework test
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal

1..4
# tests 4
# pass  4

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/aws-sdk/aws4-retries.test.js
TAP version 13
# AWS4 signature auth with retry
# manual transaction trace id: 7f44203f660dcdf6a407af9ad1330773
ok 1 request 1 method is HEAD
ok 2 request 1 path is /$BUKKIT/$KEY
ok 3 request 1 "Authorization" header is for us-east-1: "AWS4-HMAC-SHA256 Credential=fake/20211125/us-east-1/s3/aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date, Signature=5364502098ffee8cda36f5c6741de2919b0202e401fef57538a6c24d65644ea0"
ok 4 request 1 "Authorization" header has expected SignedHeaders
ok 5 request 1 traceparent has expected trace id: 00-7f44203f660dcdf6a407af9ad1330773-770c44d4e6f73f28-01
ok 6 request 1 tracestate has expected es item
ok 7 request 2 method is HEAD
ok 8 request 2 path is /$BUKKIT
ok 9 request 2 "Authorization" header is for us-east-1: "AWS4-HMAC-SHA256 Credential=fake/20211125/us-east-1/s3/aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date, Signature=c02794e201723f0076268ebc161f25c985dfe96d4963ef89a38e552703a7d783"
ok 10 request 2 "Authorization" header has expected SignedHeaders
ok 11 request 2 traceparent has expected trace id: 00-7f44203f660dcdf6a407af9ad1330773-184de422cd627db6-01
ok 12 request 2 tracestate has expected es item
{"log.level":"info","@timestamp":"2021-11-25T13:05:50.154Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"a3a97a9713dac17bcff5c4f874c46643\"}"}
ok 13 request 3 method is HEAD
ok 14 request 3 path is /$BUKKIT/$KEY
ok 15 request 3 "Authorization" header is for *us-west-1*: "AWS4-HMAC-SHA256 Credential=fake/20211125/us-west-1/s3/aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date, Signature=0843d77e7601249859f38f345b690158678cf2f77c8576ed18742e5ed5840137"
ok 16 request 3 "Authorization" header has expected SignedHeaders
ok 17 request 3 traceparent has expected trace id: 00-7f44203f660dcdf6a407af9ad1330773-e5f2744c6c75197e-01
ok 18 request 3 tracestate has expected es item
ok 19 headObject did not return an error
ok 20 headObject returned data
ok 21 headObject data.ContentLength is as expected
ok 22 the mock S3 server got 3 requests from the AWS.S3 client

1..22
# tests 22
# pass  22

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/aws-sdk/dynamodb.test.js
TAP version 13
# AWS DynamoDB: Unit Test Functions
# function getRegionFromRequest
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
# function getPortFromRequest
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
# function getStatementFromRequest
ok 15 should be strictly equal
ok 16 should be strictly equal
ok 17 should be strictly equal
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
ok 21 should be strictly equal
# function getAddressFromRequest
ok 22 should be strictly equal
ok 23 should be strictly equal
ok 24 should be strictly equal
ok 25 should be strictly equal
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
# function getMethodFromRequest
ok 29 should be strictly equal
ok 30 should be strictly equal
ok 31 should be strictly equal
ok 32 should be strictly equal
ok 33 should be strictly equal
# AWS DynamoDB: End to End Test
# API: query
ok 34 null
ok 35 span named correctly
ok 36 span type correctly set
ok 37 span subtype set correctly
ok 38 query set correctly
ok 39 statement set in context correctly
ok 40 service name in destination context
# API: listTable
ok 41 null
ok 42 span named correctly
ok 43 span type correctly set
ok 44 span subtype set correctly
ok 45 query set correctly
ok 46 service name in destination context
# API: error
ok 47 expect error
ok 48 expect captured error
ok 49 expect a db span
ok 50 expect db span to have failure outcome
# AWS DynamoDB: No Transaction
# API: query
ok 51 null
ok 52 no spans without transaction

1..52
# tests 52
# pass  52

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/aws-sdk/s3.test.js
TAP version 13
# simple S3 usage scenario
# executing test script with this env: {"ELASTIC_APM_SERVER_URL":"http://localhost:41567","AWS_ACCESS_KEY_ID":"fake","AWS_SECRET_ACCESS_KEY":"fake","TEST_BUCKET_NAME":"elasticapmtest-bucket-1","TEST_ENDPOINT":"http://localstack:4566","TEST_REGION":"us-east-2"}
ok 1 use-s3.js did not error out
ok 2 APM server got event metadata object
ok 3 got the transaction
ok 4 all remaining events are spans
ok 5 all spans have the same trace_id
ok 6 all spans have the same transaction_id
ok 7 all spans have outcome="success"
ok 8 all spans have sync=false
ok 9 all spans have sample_rate=1
ok 10 listAllBuckets produced expected span
ok 11 createTheBucketIfNecessary produced expected span
ok 12 waitForBucketToExist produced expected span
ok 13 createObj produced expected span
ok 14 waitForObjectToExist produced expected span
ok 15 getObj produced expected span
ok 16 getObjConditionalGet produced expected span
ok 17 getObjUsingPromise produced expected span
ok 18 deleteTheObj produced expected span
ok 19 deleteTheBucketIfCreatedIt produced expected span
ok 20 all spans accounted for

1..20
# tests 20
# pass  20

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/aws-sdk/sns.test.js
TAP version 13
# AWS SNS: Unit Test Functions
# getArnOrPhoneNumberFromRequest tests
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
# getDestinationNameFromRequest tests
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should be strictly equal
# getSpanNameFromRequest tests
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
ok 17 should be strictly equal
# getMessageDestinationContextFromRequest tests
ok 18 should be deeply equivalent
ok 19 should be deeply equivalent
ok 20 should be deeply equivalent
# AWS SNS: End to End Test
# API: publish
ok 21 span named correctly
ok 22 span type correctly set
ok 23 span subtype set correctly
ok 24 span action set correctly
ok 25 span.sync is false
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
ok 29 should be strictly equal
ok 30 should be strictly equal
ok 31 should be strictly equal
ok 32 should be strictly equal
# API: no transaction
ok 33 no messaging span without a transaction
# API: error
ok 34 error expected
ok 35 error produces outcome=failure span
# API: listTopics
ok 36 only publish operation creates spans
# API: ignored queue
ok 37 ignores configured topic name

1..37
# tests 37
# pass  37

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/modules/aws-sdk/sqs.test.js
TAP version 13
# AWS SQS: Unit Test Functions
# function getToFromFromOperation
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
# function getActionFromOperation
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be strictly equal
ok 10 should be strictly equal
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
# function getQueueNameFromRequest
ok 17 should be strictly equal
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
ok 21 should be strictly equal
ok 22 should be strictly equal
ok 23 should be strictly equal
ok 24 should be strictly equal
ok 25 should be strictly equal
# function getRegionFromRequest
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
ok 29 should be strictly equal
ok 30 should be strictly equal
ok 31 should be strictly equal
ok 32 should be strictly equal
ok 33 should be strictly equal
# function shouldIgnoreRequest
ok 34 should be strictly equal
ok 35 should be strictly equal
ok 36 should be strictly equal
ok 37 should be strictly equal
# function getMessageDestinationContext
ok 38 should be strictly equal
ok 39 should be strictly equal
ok 40 should be deeply equivalent
# AWS SQS: End to End Tests
# API: sendMessage
ok 41 null
ok 42 generated two spans
ok 43 SQS span named correctly
ok 44 span type set to messaging
ok 45 span subtype set to sqs
ok 46 span action matches API method called
ok 47 messaging context set
ok 48 queue name context set
ok 49 other span is for HTTP request
# API: sendMessageBatch
ok 50 null
ok 51 generated two spans
ok 52 other span is for HTTP request
ok 53 SQS span named correctly
ok 54 span type set to messaging
ok 55 span subtype set to sqs
ok 56 span action matches API method called
ok 57 messaging context set
ok 58 queue name context set
# API: deleteMessage
ok 59 null
ok 60 generated two spans
ok 61 SQS span named correctly
ok 62 span type set to messaging
ok 63 span subtype set to sqs
ok 64 span action matches API method called
ok 65 messaging context set
ok 66 queue name context set
ok 67 other span is for HTTP request
# API: deleteMessageBatch
ok 68 null
ok 69 generated two spans
ok 70 second span is for HTTP request
ok 71 SQS span named correctly
ok 72 span type set to messaging
ok 73 span subtype set to sqs
ok 74 span action matches API method called
ok 75 messaging context set
ok 76 queue name context set
# API: receiveMessage
ok 77 null
ok 78 generated two spans
ok 79 other span is for HTTP request
ok 80 SQS span named correctly
ok 81 span type set to messaging
ok 82 span subtype set to sqs
ok 83 span action matches API method called
ok 84 messaging context set
ok 85 queue name context set
# API: receiveMessage no transaction
ok 86 null
ok 87 no spans without a transaction
# API: sendMessage without a transaction
ok 88 null
ok 89 no spans without a transaction
# API: sendMessage without a transaction
ok 90 null
ok 91 no spans without a transaction
# API: sendMessage promise
ok 92 generated two spans
ok 93 SQS span named correctly
ok 94 span type set to messaging
ok 95 span subtype set to sqs
ok 96 span action matches API method called
ok 97 messaging context set
ok 98 queue name context set
ok 99 other span is for HTTP request
# API: sendMessageBatch promise
ok 100 generated two spans
ok 101 other span is for HTTP request
ok 102 SQS span named correctly
ok 103 span type set to messaging
ok 104 span subtype set to sqs
ok 105 span action matches API method called
ok 106 messaging context set
ok 107 queue name context set
# API: deleteMessage promise
ok 108 generated two spans
ok 109 SQS span named correctly
ok 110 span type set to messaging
ok 111 span subtype set to sqs
ok 112 span action matches API method called
ok 113 messaging context set
ok 114 queue name context set
ok 115 other span is for HTTP request
# API: deleteMessageBatch promise
ok 116 generated two spans
ok 117 second span is for HTTP request
ok 118 SQS span named correctly
ok 119 span type set to messaging
ok 120 span subtype set to sqs
ok 121 span action matches API method called
ok 122 messaging context set
ok 123 queue name context set
# API: receiveMessage promise
ok 124 generated two spans
ok 125 other span is for HTTP request
ok 126 SQS span named correctly
ok 127 span type set to messaging
ok 128 span subtype set to sqs
ok 129 span action matches API method called
ok 130 messaging context set
ok 131 queue name context set
# API: no transaction
ok 132 null
ok 133 no spans generated because no transaction

1..133
# tests 133
# pass  133

# ok

running (cwd: ./): node --unhandled-rejections=strict test/instrumentation/run-context/run-context.test.js
TAP version 13
# run-context/fixtures/simple.js
ok 1 fixtures/simple.js exited non-zero
ok 2 APM server got event metadata object
ok 3 exactly 5 events
ok 4 s2 is a child of t1
ok 5 s2.sync=false
ok 6 s5 is a child of t4
ok 7 s5.sync=true
# run-context/fixtures/custom-instrumentation-sync.js
ok 8 fixtures/custom-instrumentation-sync.js exited non-zero
ok 9 APM server got event metadata object
ok 10 exactly 6 events
ok 11 s4 is a child of t3
ok 12 s4.sync=true
ok 13 s5 is a child of s4
ok 14 s5.sync=true
# run-context/fixtures/ls-callbacks.js
ok 15 fixtures/ls-callbacks.js exited non-zero
ok 16 APM server got event metadata object
ok 17 exactly 4 events
ok 18 s2 is a child of t1
ok 19 s2.sync=true
ok 20 s3 is a child of t1
ok 21 s3.sync=false
# run-context/fixtures/ls-promises.js
ok 22 fixtures/ls-promises.js exited non-zero
ok 23 APM server got event metadata object
ok 24 exactly 4 events
ok 25 s2 is a child of t1
ok 26 s3 is a child of t1
# run-context/fixtures/ls-await.js
ok 27 fixtures/ls-await.js exited non-zero
ok 28 APM server got event metadata object
ok 29 exactly 4 events
ok 30 s2 is a child of t1
ok 31 s3 is a child of t1
# run-context/fixtures/parentage-with-ended-span.js
ok 32 fixtures/parentage-with-ended-span.js exited non-zero
ok 33 APM server got event metadata object
ok 34 exactly 5 events
ok 35 s1 is a child of t0
ok 36 s1.sync=false
ok 37 s2 is a child of t0 (because s1 ended before s2 was started, in the same async task)
ok 38 s2.sync=false
ok 39 s3 is a child of s1
ok 40 s3.sync=false
# run-context/fixtures/end-non-current-spans.js
ok 41 fixtures/end-non-current-spans.js exited non-zero
ok 42 APM server got event metadata object
ok 43 exactly 6 events
ok 44 s1 is a child of t0
ok 45 s2 is a child of s1
ok 46 s3 is a child of s1
ok 47 s4 is a child of s3

1..47
# tests 47
# pass  47

# ok

running (cwd: ./): node --unhandled-rejections=strict test/integration/503.test.js
TAP version 13
# should not throw on 503
{"log.level":"info","@timestamp":"2021-11-25T13:06:17.704Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"f2f94e085ced4776bddb4b1b20318b0c\"}"}
{"log.level":"error","@timestamp":"2021-11-25T13:06:17.732Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"APM Server transport error (503): Unexpected APM Server response\n{\"error\":\"something\"}"}
ok 1 undefined

1..1
# tests 1
# pass  1

# ok

running (cwd: ./): node --unhandled-rejections=strict test/integration/abort-on-invalid-cert.test.js
TAP version 13
# should not allow self signed certificate
{"log.level":"info","@timestamp":"2021-11-25T13:06:18.908Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"a6c1962ffc7ee1eb86517cc79a348a7b\"}"}
{"log.level":"error","@timestamp":"2021-11-25T13:06:18.927Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"APM Server transport error (DEPTH_ZERO_SELF_SIGNED_CERT): self signed certificate"}
ok 1 agent.captureError callback called

1..1
# tests 1
# pass  1

# ok

running (cwd: ./): node --unhandled-rejections=strict test/integration/allow-invalid-cert.test.js
TAP version 13
# should allow self signed certificate
{"log.level":"info","@timestamp":"2021-11-25T13:06:20.116Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"2f7727bbd65271308c4cb3877c9175dc\"}"}
ok 1 server received client request
ok 2 undefined
ok 3 agent.captureError callback called

1..3
# tests 3
# pass  3

# ok

running (cwd: ./): node --unhandled-rejections=strict test/integration/no-sampling.test.js
TAP version 13
# should not sample
ok 1 expected 1 metadata to be sent
ok 2 expected 20 transactions to be sent

1..2
# tests 2
# pass  2

# ok

running (cwd: ./): node --unhandled-rejections=strict test/integration/server-url-path.test.js
TAP version 13
# should allow path in serverUrl
{"log.level":"info","@timestamp":"2021-11-25T13:06:23.549Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"ef795f81c6efd276a764c77564327a94\"}"}
ok 1 should be strictly equal

1..1
# tests 1
# pass  1

# ok

running (cwd: ./): node --unhandled-rejections=strict test/integration/skip-internal-http-spans.test.js
TAP version 13
# should not throw on socket close
ok 1 has expected value for metadata
ok 2 has expected value for transaction
ok 3 has expected value for span
ok 4 has expected value for error
ok 5 has expected value for metadata
ok 6 has expected value for transaction
ok 7 has expected value for span
ok 8 has expected value for error

1..8
# tests 8
# pass  8

# ok

running (cwd: ./): node --unhandled-rejections=strict test/integration/socket-close.test.js
TAP version 13
# should not throw on socket close
{"log.level":"info","@timestamp":"2021-11-25T13:06:31.189Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"5e7ce5d355d9830034f8d14dd95ef710\"}"}
{"log.level":"error","@timestamp":"2021-11-25T13:06:31.208Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"APM Server transport error (EPIPE): write EPIPE"}
ok 1 undefined

1..1
# tests 1
# pass  1

# ok

running (cwd: ./): node --unhandled-rejections=strict test/integration/verify-server-ca-cert.test.js
TAP version 13
# should allow self signed certificate
{"log.level":"info","@timestamp":"2021-11-25T13:06:32.959Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"149c3b6004f30c7189a4033c736aaf51\"}"}
ok 1 server received client request
ok 2 undefined
ok 3 agent.captureError callback called

1..3
# tests 3
# pass  3

# ok

running (cwd: ./): node --unhandled-rejections=strict test/integration/api-schema/basic.test.js
TAP version 13
# metadata schema failure
ok 1 should be strictly equal
ok 2 got expected number of errors
ok 3 actual error field "message" matches "should have required property 'service'"
# transaction schema failure
ok 4 should be strictly equal
ok 5 got expected number of errors
ok 6 actual error field "message" matches "should have required property 'duration'"
ok 7 actual error field "message" matches "should have required property 'id'"
ok 8 actual error field "message" matches "should have required property 'span_count'"
ok 9 actual error field "message" matches "should have required property 'trace_id'"
ok 10 actual error field "message" matches "should have required property 'type'"
# span schema failure
ok 11 should be strictly equal
ok 12 got expected number of errors
ok 13 actual error field "message" matches "should have required property 'duration'"
ok 14 actual error field "message" matches "should have required property 'id'"
ok 15 actual error field "message" matches "should have required property 'name'"
ok 16 actual error field "message" matches "should have required property 'parent_id'"
ok 17 actual error field "message" matches "should have required property 'trace_id'"
ok 18 actual error field "message" matches "should have required property 'type'"
ok 19 actual error field "message" matches "should have required property 'start'"
ok 20 actual error field "message" matches "should have required property 'timestamp'"
ok 21 actual error field "message" matches "should match some schema in anyOf"
# error schema failure
ok 22 should be strictly equal
ok 23 got expected number of errors
ok 24 actual error field "message" matches "should have required property 'id'"
ok 25 actual error field "message" matches "should have required property 'exception'"
ok 26 actual error field "message" matches "should have required property 'log'"
ok 27 actual error field "message" matches "should match some schema in anyOf"
ok 28 should be strictly equal
ok 29 got expected number of errors
ok 30 actual error field "dataPath" matches ".exception"
ok 31 actual error field "params" matches {"missingProperty":"message"}
ok 32 actual error field "message" matches "should have required property 'message'"
ok 33 actual error field "dataPath" matches ".exception"
ok 34 actual error field "params" matches {"missingProperty":"type"}
ok 35 actual error field "message" matches "should have required property 'type'"
ok 36 actual error field "dataPath" matches ".exception"
ok 37 actual error field "params" matches {}
ok 38 actual error field "message" matches "should match some schema in anyOf"
ok 39 should be strictly equal
ok 40 got expected number of errors
ok 41 actual error field "dataPath" matches ".log"
ok 42 actual error field "params" matches {"missingProperty":"message"}
ok 43 actual error field "message" matches "should have required property 'message'"
# metadata + transaction schema
ok 44 server should receive a POST request
ok 45 server should receive request to correct endpoint
ok 46 metadata should be valid
ok 47 metadata should not have any validation errors
ok 48 transaction should be valid
ok 49 transaction should not have any validation errors
ok 50 flush should not result in an error
# metadata + span schema
ok 51 server should receive a POST request
ok 52 server should receive request to correct endpoint
ok 53 metadata should be valid
ok 54 metadata should not have any validation errors
ok 55 span should be valid
ok 56 span should not have any validation errors
ok 57 flush should not result in an error
# metadata + error schema - 0
{"log.level":"info","@timestamp":"2021-11-25T13:06:34.428Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"fb7d7317836a69306bb7dd7e9e4c3eee\"}"}
ok 58 server should receive a POST request
ok 59 server should receive request to correct endpoint
ok 60 metadata should be valid
ok 61 metadata should not have any validation errors
ok 62 error should be valid
ok 63 error should not have any validation errors
ok 64 captureError should not result in an error
# metadata + error schema - 1
{"log.level":"info","@timestamp":"2021-11-25T13:06:34.456Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"a6c1a551883c368b144cebe7326a4ebc\"}"}
ok 65 server should receive a POST request
ok 66 server should receive request to correct endpoint
ok 67 metadata should be valid
ok 68 metadata should not have any validation errors
ok 69 error should be valid
ok 70 error should not have any validation errors
ok 71 captureError should not result in an error

1..71
# tests 71
# pass  71

# ok

running (cwd: ./): node --unhandled-rejections=strict test/integration/api-schema/capture-error-log-stack-traces.test.js
TAP version 13
# error schema - captureErrorLogStackTraces: true - 0
{"log.level":"info","@timestamp":"2021-11-25T13:06:35.765Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"3255054aa5fb3fe2ed321403f53d006e\"}"}
ok 1 server should receive a POST request
ok 2 server should receive request to correct endpoint
ok 3 metadata should be valid
ok 4 metadata should not have any validation errors
ok 5 error should be valid
ok 6 error should not have any validation errors
ok 7 captureError should not result in an error
# error schema - captureErrorLogStackTraces: true - 1
{"log.level":"info","@timestamp":"2021-11-25T13:06:35.818Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"dfcb60319530bdba8f0834cad4acfa72\"}"}
ok 8 server should receive a POST request
ok 9 server should receive request to correct endpoint
ok 10 metadata should be valid
ok 11 metadata should not have any validation errors
ok 12 error should be valid
ok 13 error should not have any validation errors
ok 14 captureError should not result in an error

1..14
# tests 14
# pass  14

# ok

running (cwd: ./): node --unhandled-rejections=strict test/integration/api-schema/capture-span-stack-traces.test.js
TAP version 13
# span schema - captureSpanStackTraces: false
ok 1 server should receive a POST request
ok 2 server should receive request to correct endpoint
ok 3 metadata should be valid
ok 4 metadata should not have any validation errors
ok 5 span should be valid
ok 6 span should not have any validation errors
ok 7 flush should not result in an error

1..7
# tests 7
# pass  7

# ok

running (cwd: ./): node --unhandled-rejections=strict test/integration/api-schema/source-lines-error-frames.test.js
TAP version 13
# errors schema - sourceLinesErrorAppFrames: 0, sourceLinesErrorLibraryFrames: 0 - 0
{"log.level":"info","@timestamp":"2021-11-25T13:06:38.375Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"beadafcd995245612917d249544387c0\"}"}
ok 1 server should receive a POST request
ok 2 server should receive request to correct endpoint
ok 3 metadata should be valid
ok 4 metadata should not have any validation errors
ok 5 error should be valid
ok 6 error should not have any validation errors
ok 7 undefined
# errors schema - sourceLinesErrorAppFrames: 0, sourceLinesErrorLibraryFrames: 0 - 1
{"log.level":"info","@timestamp":"2021-11-25T13:06:38.429Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"2eac4f67a3030386b20d660324e34bdd\"}"}
ok 8 server should receive a POST request
ok 9 server should receive request to correct endpoint
ok 10 metadata should be valid
ok 11 metadata should not have any validation errors
ok 12 error should be valid
ok 13 error should not have any validation errors
ok 14 undefined

1..14
# tests 14
# pass  14

# ok

running (cwd: ./): node --unhandled-rejections=strict test/integration/api-schema/source-lines-span-frames.test.js
TAP version 13
# span schema - sourceLinesSpanAppFrames: 5, sourceLinesSpanLibraryFrames: 5
ok 1 server should receive a POST request
ok 2 server should receive request to correct endpoint
ok 3 metadata should be valid
ok 4 metadata should not have any validation errors
ok 5 span should be valid
ok 6 span should not have any validation errors
ok 7 flush should not result in an error

1..7
# tests 7
# pass  7

# ok

running (cwd: ./): node --unhandled-rejections=strict test/lambda/callbacks.test.js
TAP version 13
# success
ok 1 null
ok 2 should be strictly equal
ok 3 should be truthy
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be truthy
# failure
ok 8 should be truthy
ok 9 should be falsy
ok 10 should be truthy
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be truthy

1..15
# tests 15
# pass  15

# ok

running (cwd: ./): node --unhandled-rejections=strict test/lambda/context.test.js
TAP version 13
# context.succeed
ok 1 null
ok 2 should be strictly equal
ok 3 should be truthy
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be truthy
# context.done
ok 8 null
ok 9 should be strictly equal
ok 10 should be truthy
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be truthy
# context.fail
ok 15 should be truthy
ok 16 should be falsy
ok 17 should be truthy
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be strictly equal
ok 21 should be strictly equal
ok 22 should be truthy

1..22
# tests 22
# pass  22

# ok

running (cwd: ./): node --unhandled-rejections=strict test/lambda/metadata.test.js
TAP version 13
# isLambdaExecutionEnvironment
ok 1 execution environment not detected
ok 2 execution environment detected
# lambda metadata
# setup
# mock APM serverUrl: http://localhost:44691
# APM agent started
# ignores cloudProvider:auto in lambda environment
ok 3 no cloudMetadataFetcher is given to the transport in a Lambda env
# metadata includes first fn invocation info
ok 4 no error from executing the lambda handler: err=null
ok 5 should be strictly equal
ok 6 got metadata
ok 7 service.name
ok 8 service.id
ok 9 service.version has lambda-local hardcoded "1.0"
ok 10 service.framework.name
ok 11 service.runtime.name
ok 12 service.node.configured_name
ok 13 cloud.provider
ok 14 cloud.region
ok 15 cloud.service.name
ok 16 cloud.account.id
# teardown

1..16
# tests 16
# pass  16

# ok

running (cwd: ./): node --unhandled-rejections=strict test/lambda/promises.test.js
TAP version 13
# resolve
ok 1 null
ok 2 should be strictly equal
ok 3 should be truthy
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be truthy
# resolve with parent id header present
ok 8 null
ok 9 should be strictly equal
ok 10 should be truthy
ok 11 should be strictly equal
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be truthy
ok 15 context trace id matches parent trace id
ok 16 input tracestate passed on to transaction
# resolve with elastic-apm-traceparent present
ok 17 null
ok 18 should be strictly equal
ok 19 should be truthy
ok 20 context trace id matches parent trace id
ok 21 input tracestate passed on to transaction
# resolve with both elastic-apm-traceparent and traceparent present
ok 22 null
ok 23 should be strictly equal
ok 24 should be truthy
ok 25 context trace id matches parent trace id
ok 26 input tracestate passed on to transaction
ok 27 prefers traceparent to elastic-apm-traceparent
# resolve with both elastic-apm-traceparent before traceparent present
ok 28 null
ok 29 should be strictly equal
ok 30 should be truthy
ok 31 context trace id matches parent trace id
ok 32 input tracestate passed on to transaction
ok 33 prefers traceparent to elastic-apm-traceparent
# reject
ok 34 should be truthy
ok 35 should be falsy
ok 36 should be truthy
ok 37 should be strictly equal
ok 38 should be strictly equal
ok 39 should be strictly equal
ok 40 should be strictly equal
ok 41 should be truthy

1..41
# tests 41
# pass  41

# ok

running (cwd: ./): node --unhandled-rejections=strict test/lambda/transaction.test.js
TAP version 13
# cold start tests
ok 1 first invocation is a cold start
ok 2 second invocation is not a cold start
# setLambdaTransactionData aws_api_http_test_data tests
ok 3 coldstart value set
ok 4 execution value set
ok 5 execution value set
ok 6 execution value set
ok 7 transaction type set
ok 8 transaction named correctly
ok 9 cloud origin provider set correctly
ok 10 service origin name set correctly
ok 11 service origin id set correctly
ok 12 service origin version set correctly
ok 13 cloud origin service name set correctly
ok 14 cloud origin service name set correctly
# setLambdaTransactionData aws_api_rest_test_data.json tests
ok 15 colstart value set
ok 16 execution value set
ok 17 trigger type set
ok 18 execution value set
ok 19 transaction type set
ok 20 transaction named correctly
ok 21 service origin name set correctly
ok 22 service origin id set correctly
ok 23 service origin version set correctly
ok 24 cloud origin provider set correctly
ok 25 cloud origin service name set correctly
ok 26 cloud origin service name set correctly
# setLambdaTransactionData aws_sqs_test_data.json tests
ok 27 colstart value set
ok 28 execution value set
ok 29 trigger type set
ok 30 trigger request_id
ok 31 transaction type set
ok 32 transaction named correctly
ok 33 service origin name set correctly
ok 34 service origin id set correctly
ok 35 cloud origin provider set correctly
ok 36 cloud origin service name set correctly
ok 37 cloud origin region name set correctly
ok 38 cloud origin account id set correctly
ok 39 message queue set correctly
ok 40 message age is a number
ok 41 message body set correctly
ok 42 message headers set correctly
# setLambdaTransactionData aws_sns_test_data.json tests
ok 43 colstart value set
ok 44 trigger type set
ok 45 trigger request_id set
ok 46 transaction type set
ok 47 transaction named correctly
ok 48 service origin name set correctly
ok 49 service origin id set correctly
ok 50 service origin version set correctly
ok 51 cloud origin provider set correctly
ok 52 cloud origin service name set correctly
ok 53 cloud origin region name set correctly
ok 54 cloud origin account id set correctly
ok 55 message queue set correctly
ok 56 message age is a number
ok 57 message body set correctly
ok 58 message headers set correctly
# setLambdaTransactionData aws_s3_test_data.json tests
ok 59 colstart value set
ok 60 trigger type set
ok 61 trigger request id set
ok 62 transaction type set
ok 63 transaction named correctly
ok 64 service origin name set correctly
ok 65 service origin id set correctly
ok 66 service origin version set correctly
ok 67 cloud origin provider set correctly
ok 68 cloud origin service name set correctly
ok 69 cloud origin region name set correctly
# setLambdaTransactionData generic tests
ok 70 colstart value set
ok 71 trigger type set
ok 72 execution value set
ok 73 transaction type set
ok 74 transaction named correctly
ok 75 cloud origin provider set correctly
ok 76 colstart value set
ok 77 trigger type set
ok 78 execution value set
ok 79 transaction type set
ok 80 transaction named correctly
ok 81 cloud origin provider set correctly
# serialize transaction lambda fields
ok 82 name serialized
ok 83 type serialized
ok 84 outcome serialized
ok 85 result serialized
ok 86 faas is not defined yet
ok 87 service is not defined yet
ok 88 service is not defined yet
ok 89 message is not defined yet
ok 90 coldstart serialized
ok 91 execution serialized
ok 92 trigger type serialized
ok 93 trigger type serialized
ok 94 service name serialized
ok 95 service id serialized
ok 96 service version serialized
ok 97 cloud origin provider serialized
ok 98 cloud origin service name serialized
ok 99 cloud origin account id serialized
ok 100 cloud origin region serialized
ok 101 should be strictly equal
ok 102 should be strictly equal
ok 103 should be strictly equal
ok 104 should be deeply equivalent
# setLambdaTransactionData invalid objects
ok 105 no exceptions thrown or crashing errors
ok 106 no exceptions thrown or crashing errors
ok 107 no exceptions thrown or crashing errors
ok 108 no exceptions thrown or crashing errors
ok 109 no exceptions thrown or crashing errors
# transaction.result failure: thrown error
ok 110 should be truthy
ok 111 result is failure
# transaction.result failure: callback error
ok 112 should be truthy
ok 113 result is failure
# transaction.result failure: api gateway failure
ok 114 should be truthy
ok 115 result is failure

1..115
# tests 115
# pass  115

# ok

running (cwd: ./): node --unhandled-rejections=strict test/metrics/breakdown.test.js
TAP version 13
# includes breakdown when sampling
ok 1 wait for breakdown metrics did not timeout
ok 2 has one transaction
# transaction
ok 3 type matches
ok 4 type matches
ok 5 result matches
ok 6 sampled state matches
ok 7 has one span
# span
ok 8 name matches
ok 9 type matches
# metricSet - span metrics
ok 10 found metricset
ok 11 has expected sample keys
ok 12 has expected transaction data
ok 13 has expected span data
# metricSet - transaction span metrics
ok 14 found metricset
ok 15 has expected sample keys
ok 16 has expected transaction data
ok 17 has expected span data
# only transaction
ok 18 wait for breakdown metrics did not timeout
ok 19 found app span metricset
ok 20 sample values match
# with single sub-span
ok 21 wait for breakdown metrics did not timeout
ok 22 found app span metricset
ok 23 sample values match
ok 24 found db.mysql span metricset
ok 25 sample values match
# with single app sub-span
ok 26 wait for breakdown metrics did not timeout
ok 27 found app span metricset
ok 28 sample values match
# with parallel sub-spans
ok 29 wait for breakdown metrics did not timeout
ok 30 found app span metricset
ok 31 sample values match
ok 32 found db.mysql span metricset
ok 33 sample values match
# with overlapping sub-spans
ok 34 wait for breakdown metrics did not timeout
ok 35 found app span metricset
ok 36 sample values match
ok 37 found db.mysql span metricset
ok 38 sample values match
# with sequential sub-spans
ok 39 wait for breakdown metrics did not timeout
ok 40 found app span metricset
ok 41 sample values match
ok 42 found db.mysql span metricset
ok 43 sample values match
# with sub-spans returning to app time
ok 44 wait for breakdown metrics did not timeout
ok 45 found app span metricset
ok 46 sample values match
ok 47 found db.mysql span metricset
ok 48 sample values match
# with overlapping nested async sub-spans
ok 49 wait for breakdown metrics did not timeout
ok 50 found app span metricset
ok 51 sample values match
ok 52 found db.mysql span metricset
ok 53 sample values match
# with app sub-span extending beyond end
ok 54 wait for breakdown metrics did not timeout
ok 55 found app span metricset
ok 56 sample values match
ok 57 does not have un-ended spans
# with other sub-span extending beyond end
ok 58 wait for breakdown metrics did not timeout
ok 59 found app span metricset
ok 60 sample values match
ok 61 does not have un-ended spans
# with other sub-span starting after end
ok 62 wait for breakdown metrics did not timeout
ok 63 found app span metricset
ok 64 sample values match
ok 65 does not have un-ended spans

1..65
# tests 65
# pass  65

# ok

running (cwd: ./): node --unhandled-rejections=strict test/metrics/index.test.js
TAP version 13
# reports expected metrics
# event #1
ok 1 has timestamp within 50ms of now (delta: 4ms, timestamp: 2021-11-25T13:06:50.038Z)
ok 2 has expected tags
# system.cpu.total.norm.pct
ok 3 is present
ok 4 is a number
ok 5 is finite (was: 0.3333333333333333)
ok 6 is betewen 0 and 1
# system.memory.total
ok 7 is present
ok 8 is a number
ok 9 is finite (was: 15731294208)
ok 10 should match total memory
# system.memory.actual.free
ok 11 is present
ok 12 is a number
ok 13 is finite (was: 10935123968)
ok 14 is larger than os.freemem() (value: 10935123968, free: 5976150016)
# system.process.memory.rss.bytes
ok 15 is present
ok 16 is a number
ok 17 is finite (was: 55418880)
ok 18 is close to current rss (value: 55418880, rss: 56180736)
# system.process.cpu.total.norm.pct
ok 19 is present
ok 20 is a number
ok 21 is finite (was: 0.3333333333333333)
ok 22 is betewen 0 and 1
# system.process.cpu.system.norm.pct
ok 23 is present
ok 24 is a number
ok 25 is finite (was: 0)
ok 26 is betewen 0 and 1
# system.process.cpu.user.norm.pct
ok 27 is present
ok 28 is a number
ok 29 is finite (was: 0.3333333333333333)
ok 30 is betewen 0 and 1
# nodejs.handles.active
ok 31 is present
ok 32 is a number
ok 33 is finite (was: 2)
ok 34 is positive
# nodejs.requests.active
ok 35 is present
ok 36 is a number
ok 37 is finite (was: 3)
ok 38 is positive
# nodejs.eventloop.delay.avg.ms
ok 39 is present
ok 40 is a number
ok 41 is finite (was: 0)
ok 42 is positive
# nodejs.memory.heap.allocated.bytes
ok 43 is present
ok 44 is a number
ok 45 is finite (was: 17166336)
ok 46 is positive
# nodejs.memory.heap.used.bytes
ok 47 is present
ok 48 is a number
ok 49 is finite (was: 10514656)
ok 50 is positive
# nodejs.memory.external.bytes
ok 51 is present
ok 52 is a number
ok 53 is finite (was: 862995)
ok 54 is positive
# nodejs.memory.arrayBuffers.bytes
ok 55 is present
ok 56 is a number
ok 57 is finite (was: 183299)
ok 58 is positive
# ws.connections
ok 59 is present
ok 60 is a number
ok 61 is finite (was: 23)
ok 62 should be strictly equal
# event #2
ok 63 has timestamp within 50ms of now (delta: 2ms, timestamp: 2021-11-25T13:06:50.537Z)
ok 64 is about 500ms later (delta: 1ms, timestamp: 2021-11-25T13:06:50.537Z)
ok 65 has expected tags
# system.cpu.total.norm.pct
ok 66 is present
ok 67 is a number
ok 68 is finite (was: 0.2639593908629442)
ok 69 is >0 and <=1
# system.memory.total
ok 70 is present
ok 71 is a number
ok 72 is finite (was: 15731294208)
ok 73 should match total memory
# system.memory.actual.free
ok 74 is present
ok 75 is a number
ok 76 is finite (was: 10934087680)
ok 77 is larger than os.freemem() (value: 10934087680, free: 5975085056)
# system.process.memory.rss.bytes
ok 78 is present
ok 79 is a number
ok 80 is finite (was: 56451072)
ok 81 is close to current rss (value: 56451072, rss: 56451072)
# system.process.cpu.total.norm.pct
ok 82 is present
ok 83 is a number
ok 84 is finite (was: 0.13705583756345177)
ok 85 is >0 and <=1
# system.process.cpu.system.norm.pct
ok 86 is present
ok 87 is a number
ok 88 is finite (was: 0.005076142131979695)
ok 89 is betewen 0 and 1
# system.process.cpu.user.norm.pct
ok 90 is present
ok 91 is a number
ok 92 is finite (was: 0.1319796954314721)
ok 93 is >0 and <=1
# nodejs.handles.active
ok 94 is present
ok 95 is a number
ok 96 is finite (was: 2)
ok 97 is positive
# nodejs.requests.active
ok 98 is present
ok 99 is a number
ok 100 is finite (was: 3)
ok 101 is positive
# nodejs.eventloop.delay.avg.ms
ok 102 is present
ok 103 is a number
ok 104 is finite (was: 0.18824145454545516)
ok 105 is positive
# nodejs.memory.heap.allocated.bytes
ok 106 is present
ok 107 is a number
ok 108 is finite (was: 17952768)
ok 109 is positive
# nodejs.memory.heap.used.bytes
ok 110 is present
ok 111 is a number
ok 112 is finite (was: 9318488)
ok 113 is positive
# nodejs.memory.external.bytes
ok 114 is present
ok 115 is a number
ok 116 is finite (was: 860446)
ok 117 is positive
# nodejs.memory.arrayBuffers.bytes
ok 118 is present
ok 119 is a number
ok 120 is finite (was: 180750)
ok 121 is positive
# ws.connections
ok 122 is present
ok 123 is a number
ok 124 is finite (was: 23)
ok 125 should be strictly equal
# applies metrics limit
ok 126 has expected number of metrics
# increments counter when active
ok 127 should start at zero
ok 128 should have incremented by 1 by default
ok 129 should have incremented by an amount
ok 130 should have incremented
# noop counter when not active
ok 131 should not throw
# Metrics objects do not throw/crash when not started
ok 132 unset registrySymbol does not crash metrics object
ok 133 unset registrySymbol does not crash metrics object
ok 134 unset registrySymbol does not crash metrics object
ok 135 unset registrySymbol does not crash metrics object
ok 136 unset registrySymbol does not crash metrics object

1..136
# tests 136
# pass  136

# ok

running (cwd: ./): node --unhandled-rejections=strict test/metrics/stale.test.js
TAP version 13
# Unit Tests: isStaleMetric and removeMetricFromRegistry
# isStaleMetric
ok 1 should be truthy
ok 2 should be truthy
ok 3 should be truthy
ok 4 should be truthy
ok 5 should be truthy
ok 6 should be truthy
ok 7 should be truthy
ok 8 value without metricImpl does not explode
# removeMetricFromRegistry functionality
ok 9 requested deletion of correct key
# removeMetricFromRegistry invalid types
ok 10 call with empty object does not explode
ok 11 call with invalid registry does not explode

1..11
# tests 11
# pass  11

# ok

running (cwd: ./): node --unhandled-rejections=strict test/redact-secrets/is-secret.test.js
TAP version 13
# isSecret.key true
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
# isSecret.key false
ok 8 should be strictly equal
ok 9 should be strictly equal
# isSecret.value credt card number
ok 10 should be strictly equal
ok 11 should be strictly equal
ok 12 should be strictly equal
# isSecret.value false
ok 13 should be strictly equal

1..13
# tests 13
# pass  13

# ok

running (cwd: ./): node --unhandled-rejections=strict test/redact-secrets/redact-secrets.test.js
TAP version 13
# redact.map
ok 1 should be deeply equivalent
ok 2 should be deeply equivalent
# redact.forEach
ok 3 should be strictly equal
ok 4 should be deeply equivalent

1..4
# tests 4
# pass  4

# ok

running (cwd: ./): node --unhandled-rejections=strict test/sanitize-field-names/express.test.js
TAP version 13
# Running fixtures with express
# tests default wildcard handling, with urlencode bodyparsing
ok 1 received request
ok 2 header "keepmeRequest" is still set
ok 3 key "keepmeRequest" has correct value
ok 4 header "password" is redacted
ok 5 header "passwd" is redacted
ok 6 header "pwd" is redacted
ok 7 header "secret" is redacted
ok 8 header "Somethingkey" is redacted
ok 9 header "FOOtokenBAR" is redacted
ok 10 header "ZIPsessionZAP" is redacted
ok 11 header "FOOsessionBAR" is redacted
ok 12 header "FULLOFcreditBEES" is redacted
ok 13 header "SINGcardSONG" is redacted
ok 14 header "authorization" is redacted
ok 15 header "set-cookie" is redacted
ok 16 header "keepmeResponse" is still set
ok 17 key "keepmeResponse" has correct value
ok 18 header "password" is redacted
ok 19 header "passwd" is redacted
ok 20 header "pwd" is redacted
ok 21 header "secret" is redacted
ok 22 header "Somethingkey" is redacted
ok 23 header "FOOtokenBAR" is redacted
ok 24 header "ZIPsessionZAP" is redacted
ok 25 header "FOOsessionBAR" is redacted
ok 26 header "FULLOFcreditBEES" is redacted
ok 27 header "SINGcardSONG" is redacted
ok 28 header "authorization" is redacted
ok 29 header "set-cookie" is redacted
ok 30 key "keepmeForm" is still set
ok 31 key "keepmeForm" has correct value
ok 32 key "password" is not set
ok 33 key "passwd" is not set
ok 34 key "pwd" is not set
ok 35 key "secret" is not set
ok 36 key "Somethingkey" is not set
ok 37 key "FOOtokenBAR" is not set
ok 38 key "ZIPsessionZAP" is not set
ok 39 key "FOOsessionBAR" is not set
ok 40 key "FULLOFcreditBEES" is not set
ok 41 key "SINGcardSONG" is not set
ok 42 key "authorization" is not set
ok 43 key "set-cookie" is not set
ok 44 null
ok 45 received response
# tests default wildcard handling, with text bodyparsing
ok 46 received request
ok 47 header "keepmeRequest" is still set
ok 48 key "keepmeRequest" has correct value
ok 49 header "password" is redacted
ok 50 header "passwd" is redacted
ok 51 header "pwd" is redacted
ok 52 header "secret" is redacted
ok 53 header "Somethingkey" is redacted
ok 54 header "FOOtokenBAR" is redacted
ok 55 header "ZIPsessionZAP" is redacted
ok 56 header "FOOsessionBAR" is redacted
ok 57 header "FULLOFcreditBEES" is redacted
ok 58 header "SINGcardSONG" is redacted
ok 59 header "authorization" is redacted
ok 60 header "set-cookie" is redacted
ok 61 header "keepmeResponse" is still set
ok 62 key "keepmeResponse" has correct value
ok 63 header "password" is redacted
ok 64 header "passwd" is redacted
ok 65 header "pwd" is redacted
ok 66 header "secret" is redacted
ok 67 header "Somethingkey" is redacted
ok 68 header "FOOtokenBAR" is redacted
ok 69 header "ZIPsessionZAP" is redacted
ok 70 header "FOOsessionBAR" is redacted
ok 71 header "FULLOFcreditBEES" is redacted
ok 72 header "SINGcardSONG" is redacted
ok 73 header "authorization" is redacted
ok 74 header "set-cookie" is redacted
ok 75 key "keepmeForm" is still set
ok 76 key "keepmeForm" has correct value
ok 77 key "password" is not set
ok 78 key "passwd" is not set
ok 79 key "pwd" is not set
ok 80 key "secret" is not set
ok 81 key "Somethingkey" is not set
ok 82 key "FOOtokenBAR" is not set
ok 83 key "ZIPsessionZAP" is not set
ok 84 key "FOOsessionBAR" is not set
ok 85 key "FULLOFcreditBEES" is not set
ok 86 key "SINGcardSONG" is not set
ok 87 key "authorization" is not set
ok 88 key "set-cookie" is not set
ok 89 null
ok 90 received response
# tests configured wildcard handling, with urlencode bodyparsing
ok 91 received request
ok 92 header "password" is still set
ok 93 key "password" has correct value
ok 94 header "thisisa" is redacted
ok 95 header "passwd" is still set
ok 96 key "passwd" has correct value
ok 97 header "thisisa" is redacted
ok 98 key "Somethingkey" is still set
ok 99 key "Somethingkey" has correct value
ok 100 key "thisisa" is not set
ok 101 null
ok 102 received response
# tests configured wildcard handling, case insensativity turned off
ok 103 received request
ok 104 header "password" is still set
ok 105 key "password" has correct value
ok 106 header "thisisa" is still set
ok 107 key "thisisa" has correct value
ok 108 header "passwd" is still set
ok 109 key "passwd" has correct value
ok 110 header "thisisa" is still set
ok 111 key "thisisa" has correct value
ok 112 key "Somethingkey" is still set
ok 113 key "Somethingkey" has correct value
ok 114 key "thisisa" is still set
ok 115 key "thisisa" has correct value
ok 116 null
ok 117 received response

1..117
# tests 117
# pass  117

# ok

running (cwd: ./): node --unhandled-rejections=strict test/sanitize-field-names/fastify.test.js
TAP version 13
# Running fixtures with fastify
# tests default wildcard handling, with urlencode bodyparsing
ok 1 received request
ok 2 header "keepmeRequest" is still set
ok 3 key "keepmeRequest" has correct value
ok 4 header "password" is redacted
ok 5 header "passwd" is redacted
ok 6 header "pwd" is redacted
ok 7 header "secret" is redacted
ok 8 header "Somethingkey" is redacted
ok 9 header "FOOtokenBAR" is redacted
ok 10 header "ZIPsessionZAP" is redacted
ok 11 header "FOOsessionBAR" is redacted
ok 12 header "FULLOFcreditBEES" is redacted
ok 13 header "SINGcardSONG" is redacted
ok 14 header "authorization" is redacted
ok 15 header "set-cookie" is redacted
ok 16 header "keepmeResponse" is still set
ok 17 key "keepmeResponse" has correct value
ok 18 header "password" is redacted
ok 19 header "passwd" is redacted
ok 20 header "pwd" is redacted
ok 21 header "secret" is redacted
ok 22 header "Somethingkey" is redacted
ok 23 header "FOOtokenBAR" is redacted
ok 24 header "ZIPsessionZAP" is redacted
ok 25 header "FOOsessionBAR" is redacted
ok 26 header "FULLOFcreditBEES" is redacted
ok 27 header "SINGcardSONG" is redacted
ok 28 header "authorization" is redacted
ok 29 header "set-cookie" is redacted
ok 30 received response
# tests default wildcard handling, with text bodyparsing
ok 31 received request
ok 32 header "keepmeRequest" is still set
ok 33 key "keepmeRequest" has correct value
ok 34 header "password" is redacted
ok 35 header "passwd" is redacted
ok 36 header "pwd" is redacted
ok 37 header "secret" is redacted
ok 38 header "Somethingkey" is redacted
ok 39 header "FOOtokenBAR" is redacted
ok 40 header "ZIPsessionZAP" is redacted
ok 41 header "FOOsessionBAR" is redacted
ok 42 header "FULLOFcreditBEES" is redacted
ok 43 header "SINGcardSONG" is redacted
ok 44 header "authorization" is redacted
ok 45 header "set-cookie" is redacted
ok 46 header "keepmeResponse" is still set
ok 47 key "keepmeResponse" has correct value
ok 48 header "password" is redacted
ok 49 header "passwd" is redacted
ok 50 header "pwd" is redacted
ok 51 header "secret" is redacted
ok 52 header "Somethingkey" is redacted
ok 53 header "FOOtokenBAR" is redacted
ok 54 header "ZIPsessionZAP" is redacted
ok 55 header "FOOsessionBAR" is redacted
ok 56 header "FULLOFcreditBEES" is redacted
ok 57 header "SINGcardSONG" is redacted
ok 58 header "authorization" is redacted
ok 59 header "set-cookie" is redacted
ok 60 received response
# tests configured wildcard handling, with urlencode bodyparsing
ok 61 received request
ok 62 header "password" is still set
ok 63 key "password" has correct value
ok 64 header "thisisa" is redacted
ok 65 header "passwd" is still set
ok 66 key "passwd" has correct value
ok 67 header "thisisa" is redacted
ok 68 received response
# tests configured wildcard handling, case insensativity turned off
ok 69 received request
ok 70 header "password" is still set
ok 71 key "password" has correct value
ok 72 header "thisisa" is still set
ok 73 key "thisisa" has correct value
ok 74 header "passwd" is still set
ok 75 key "passwd" has correct value
ok 76 header "thisisa" is still set
ok 77 key "thisisa" has correct value
ok 78 received response

1..78
# tests 78
# pass  78

# ok

running (cwd: ./): node --unhandled-rejections=strict test/sanitize-field-names/hapi.test.js
TAP version 13
# Running fixtures with hapi
# tests default wildcard handling, with urlencode bodyparsing
ok 1 received request
ok 2 header "keepmeRequest" is still set
ok 3 key "keepmeRequest" has correct value
ok 4 header "password" is redacted
ok 5 header "passwd" is redacted
ok 6 header "pwd" is redacted
ok 7 header "secret" is redacted
ok 8 header "Somethingkey" is redacted
ok 9 header "FOOtokenBAR" is redacted
ok 10 header "ZIPsessionZAP" is redacted
ok 11 header "FOOsessionBAR" is redacted
ok 12 header "FULLOFcreditBEES" is redacted
ok 13 header "SINGcardSONG" is redacted
ok 14 header "authorization" is redacted
ok 15 header "set-cookie" is redacted
ok 16 header "keepmeResponse" is still set
ok 17 key "keepmeResponse" has correct value
ok 18 header "password" is redacted
ok 19 header "passwd" is redacted
ok 20 header "pwd" is redacted
ok 21 header "secret" is redacted
ok 22 header "Somethingkey" is redacted
ok 23 header "FOOtokenBAR" is redacted
ok 24 header "ZIPsessionZAP" is redacted
ok 25 header "FOOsessionBAR" is redacted
ok 26 header "FULLOFcreditBEES" is redacted
ok 27 header "SINGcardSONG" is redacted
ok 28 header "authorization" is redacted
ok 29 header "set-cookie" is redacted
ok 30 received response
# tests default wildcard handling, with text bodyparsing
ok 31 received request
ok 32 header "keepmeRequest" is still set
ok 33 key "keepmeRequest" has correct value
ok 34 header "password" is redacted
ok 35 header "passwd" is redacted
ok 36 header "pwd" is redacted
ok 37 header "secret" is redacted
ok 38 header "Somethingkey" is redacted
ok 39 header "FOOtokenBAR" is redacted
ok 40 header "ZIPsessionZAP" is redacted
ok 41 header "FOOsessionBAR" is redacted
ok 42 header "FULLOFcreditBEES" is redacted
ok 43 header "SINGcardSONG" is redacted
ok 44 header "authorization" is redacted
ok 45 header "set-cookie" is redacted
ok 46 header "keepmeResponse" is still set
ok 47 key "keepmeResponse" has correct value
ok 48 header "password" is redacted
ok 49 header "passwd" is redacted
ok 50 header "pwd" is redacted
ok 51 header "secret" is redacted
ok 52 header "Somethingkey" is redacted
ok 53 header "FOOtokenBAR" is redacted
ok 54 header "ZIPsessionZAP" is redacted
ok 55 header "FOOsessionBAR" is redacted
ok 56 header "FULLOFcreditBEES" is redacted
ok 57 header "SINGcardSONG" is redacted
ok 58 header "authorization" is redacted
ok 59 header "set-cookie" is redacted
ok 60 received response
# tests configured wildcard handling, with urlencode bodyparsing
ok 61 received request
ok 62 header "password" is still set
ok 63 key "password" has correct value
ok 64 header "thisisa" is redacted
ok 65 header "passwd" is still set
ok 66 key "passwd" has correct value
ok 67 header "thisisa" is redacted
ok 68 received response
# tests configured wildcard handling, case insensativity turned off
ok 69 received request
ok 70 header "password" is still set
ok 71 key "password" has correct value
ok 72 header "thisisa" is still set
ok 73 key "thisisa" has correct value
ok 74 header "passwd" is still set
ok 75 key "passwd" has correct value
ok 76 header "thisisa" is still set
ok 77 key "thisisa" has correct value
ok 78 received response

1..78
# tests 78
# pass  78

# ok

running (cwd: ./): node --unhandled-rejections=strict test/sanitize-field-names/koa.test.js
TAP version 13
# Running fixtures with koa
# tests default wildcard handling, with urlencode bodyparsing
ok 1 received request
ok 2 header "keepmeRequest" is still set
ok 3 key "keepmeRequest" has correct value
ok 4 header "password" is redacted
ok 5 header "passwd" is redacted
ok 6 header "pwd" is redacted
ok 7 header "secret" is redacted
ok 8 header "Somethingkey" is redacted
ok 9 header "FOOtokenBAR" is redacted
ok 10 header "ZIPsessionZAP" is redacted
ok 11 header "FOOsessionBAR" is redacted
ok 12 header "FULLOFcreditBEES" is redacted
ok 13 header "SINGcardSONG" is redacted
ok 14 header "authorization" is redacted
ok 15 header "set-cookie" is redacted
ok 16 header "keepmeResponse" is still set
ok 17 key "keepmeResponse" has correct value
ok 18 header "password" is redacted
ok 19 header "passwd" is redacted
ok 20 header "pwd" is redacted
ok 21 header "secret" is redacted
ok 22 header "Somethingkey" is redacted
ok 23 header "FOOtokenBAR" is redacted
ok 24 header "ZIPsessionZAP" is redacted
ok 25 header "FOOsessionBAR" is redacted
ok 26 header "FULLOFcreditBEES" is redacted
ok 27 header "SINGcardSONG" is redacted
ok 28 header "authorization" is redacted
ok 29 header "set-cookie" is redacted
ok 30 received response
# tests default wildcard handling, with text bodyparsing
ok 31 received request
ok 32 header "keepmeRequest" is still set
ok 33 key "keepmeRequest" has correct value
ok 34 header "password" is redacted
ok 35 header "passwd" is redacted
ok 36 header "pwd" is redacted
ok 37 header "secret" is redacted
ok 38 header "Somethingkey" is redacted
ok 39 header "FOOtokenBAR" is redacted
ok 40 header "ZIPsessionZAP" is redacted
ok 41 header "FOOsessionBAR" is redacted
ok 42 header "FULLOFcreditBEES" is redacted
ok 43 header "SINGcardSONG" is redacted
ok 44 header "authorization" is redacted
ok 45 header "set-cookie" is redacted
ok 46 header "keepmeResponse" is still set
ok 47 key "keepmeResponse" has correct value
ok 48 header "password" is redacted
ok 49 header "passwd" is redacted
ok 50 header "pwd" is redacted
ok 51 header "secret" is redacted
ok 52 header "Somethingkey" is redacted
ok 53 header "FOOtokenBAR" is redacted
ok 54 header "ZIPsessionZAP" is redacted
ok 55 header "FOOsessionBAR" is redacted
ok 56 header "FULLOFcreditBEES" is redacted
ok 57 header "SINGcardSONG" is redacted
ok 58 header "authorization" is redacted
ok 59 header "set-cookie" is redacted
ok 60 received response
# tests configured wildcard handling, with urlencode bodyparsing
ok 61 received request
ok 62 header "password" is still set
ok 63 key "password" has correct value
ok 64 header "thisisa" is redacted
ok 65 header "passwd" is still set
ok 66 key "passwd" has correct value
ok 67 header "thisisa" is redacted
ok 68 received response
# tests configured wildcard handling, case insensativity turned off
ok 69 received request
ok 70 header "password" is still set
ok 71 key "password" has correct value
ok 72 header "thisisa" is still set
ok 73 key "thisisa" has correct value
ok 74 header "passwd" is still set
ok 75 key "passwd" has correct value
ok 76 header "thisisa" is still set
ok 77 key "thisisa" has correct value
ok 78 received response

1..78
# tests 78
# pass  78

# ok

running (cwd: ./): node --unhandled-rejections=strict test/sanitize-field-names/main.test.js
TAP version 13
# redactKeysFromObject tests
ok 1 can import function
ok 2 key three redacted
ok 3 key one remains in ibject
ok 4 key five remains in object
ok 5 key three redacted
ok 6 key one remains in ibject
ok 7 key five redacted
# redactKeysFromPostedFormVariables tests
ok 8 can import function
ok 9 key three removed from object
ok 10 key one remains in object
ok 11 key five redacted
ok 12 key three remains in object
ok 13 key one redacted
ok 14 key five remains in object
ok 15 key three removed from object
ok 16 key one remains in object
ok 17 key five remains in object

1..17
# tests 17
# pass  17

# ok

running (cwd: ./): node --unhandled-rejections=strict test/sanitize-field-names/restify.test.js
TAP version 13
# Running fixtures with restify
# tests default wildcard handling, with urlencode bodyparsing
ok 1 received request
ok 2 header "keepmeRequest" is still set
ok 3 key "keepmeRequest" has correct value
ok 4 header "password" is redacted
ok 5 header "passwd" is redacted
ok 6 header "pwd" is redacted
ok 7 header "secret" is redacted
ok 8 header "Somethingkey" is redacted
ok 9 header "FOOtokenBAR" is redacted
ok 10 header "ZIPsessionZAP" is redacted
ok 11 header "FOOsessionBAR" is redacted
ok 12 header "FULLOFcreditBEES" is redacted
ok 13 header "SINGcardSONG" is redacted
ok 14 header "authorization" is redacted
ok 15 header "set-cookie" is redacted
ok 16 header "keepmeResponse" is still set
ok 17 key "keepmeResponse" has correct value
ok 18 header "password" is redacted
ok 19 header "passwd" is redacted
ok 20 header "pwd" is redacted
ok 21 header "secret" is redacted
ok 22 header "Somethingkey" is redacted
ok 23 header "FOOtokenBAR" is redacted
ok 24 header "ZIPsessionZAP" is redacted
ok 25 header "FOOsessionBAR" is redacted
ok 26 header "FULLOFcreditBEES" is redacted
ok 27 header "SINGcardSONG" is redacted
ok 28 header "authorization" is redacted
ok 29 header "set-cookie" is redacted
ok 30 key "keepmeForm" is still set
ok 31 key "keepmeForm" has correct value
ok 32 key "password" is not set
ok 33 key "passwd" is not set
ok 34 key "pwd" is not set
ok 35 key "secret" is not set
ok 36 key "Somethingkey" is not set
ok 37 key "FOOtokenBAR" is not set
ok 38 key "ZIPsessionZAP" is not set
ok 39 key "FOOsessionBAR" is not set
ok 40 key "FULLOFcreditBEES" is not set
ok 41 key "SINGcardSONG" is not set
ok 42 key "authorization" is not set
ok 43 key "set-cookie" is not set
ok 44 received response
# tests default wildcard handling, with text bodyparsing
ok 45 received request
ok 46 header "keepmeRequest" is still set
ok 47 key "keepmeRequest" has correct value
ok 48 header "password" is redacted
ok 49 header "passwd" is redacted
ok 50 header "pwd" is redacted
ok 51 header "secret" is redacted
ok 52 header "Somethingkey" is redacted
ok 53 header "FOOtokenBAR" is redacted
ok 54 header "ZIPsessionZAP" is redacted
ok 55 header "FOOsessionBAR" is redacted
ok 56 header "FULLOFcreditBEES" is redacted
ok 57 header "SINGcardSONG" is redacted
ok 58 header "authorization" is redacted
ok 59 header "set-cookie" is redacted
ok 60 header "keepmeResponse" is still set
ok 61 key "keepmeResponse" has correct value
ok 62 header "password" is redacted
ok 63 header "passwd" is redacted
ok 64 header "pwd" is redacted
ok 65 header "secret" is redacted
ok 66 header "Somethingkey" is redacted
ok 67 header "FOOtokenBAR" is redacted
ok 68 header "ZIPsessionZAP" is redacted
ok 69 header "FOOsessionBAR" is redacted
ok 70 header "FULLOFcreditBEES" is redacted
ok 71 header "SINGcardSONG" is redacted
ok 72 header "authorization" is redacted
ok 73 header "set-cookie" is redacted
ok 74 key "keepmeForm" is still set
ok 75 key "keepmeForm" has correct value
ok 76 key "password" is not set
ok 77 key "passwd" is not set
ok 78 key "pwd" is not set
ok 79 key "secret" is not set
ok 80 key "Somethingkey" is not set
ok 81 key "FOOtokenBAR" is not set
ok 82 key "ZIPsessionZAP" is not set
ok 83 key "FOOsessionBAR" is not set
ok 84 key "FULLOFcreditBEES" is not set
ok 85 key "SINGcardSONG" is not set
ok 86 key "authorization" is not set
ok 87 key "set-cookie" is not set
ok 88 received response
# tests configured wildcard handling, with urlencode bodyparsing
ok 89 received request
ok 90 header "password" is still set
ok 91 key "password" has correct value
ok 92 header "thisisa" is redacted
ok 93 header "passwd" is still set
ok 94 key "passwd" has correct value
ok 95 header "thisisa" is redacted
ok 96 key "Somethingkey" is still set
ok 97 key "Somethingkey" has correct value
ok 98 key "thisisa" is not set
ok 99 received response
# tests configured wildcard handling, case insensativity turned off
ok 100 received request
ok 101 header "password" is still set
ok 102 key "password" has correct value
ok 103 header "thisisa" is still set
ok 104 key "thisisa" has correct value
ok 105 header "passwd" is still set
ok 106 key "passwd" has correct value
ok 107 header "thisisa" is still set
ok 108 key "thisisa" has correct value
ok 109 key "Somethingkey" is still set
ok 110 key "Somethingkey" has correct value
ok 111 key "thisisa" is still set
ok 112 key "thisisa" has correct value
ok 113 received response

1..113
# tests 113
# pass  113

# ok

running (cwd: ./): node --unhandled-rejections=strict test/sourcemaps/index.test.js
TAP version 13
# source map inlined
ok 1 should be strictly equal
ok 2 should be strictly equal
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should be strictly equal
ok 7 should be strictly equal
ok 8 should be strictly equal
ok 9 should be deeply equivalent
ok 10 should be strictly equal
ok 11 should be deeply equivalent
# source map linked
# source mapped source code embedded
ok 12 should be strictly equal
ok 13 should be strictly equal
ok 14 should be strictly equal
ok 15 should be strictly equal
ok 16 should be strictly equal
ok 17 should be strictly equal
ok 18 should be strictly equal
ok 19 should be strictly equal
ok 20 should be deeply equivalent
ok 21 should be strictly equal
ok 22 should be deeply equivalent
# source mapped source code on disk
ok 23 should be strictly equal
ok 24 should be strictly equal
ok 25 should be strictly equal
ok 26 should be strictly equal
ok 27 should be strictly equal
ok 28 should be strictly equal
ok 29 should be strictly equal
ok 30 should be strictly equal
ok 31 should be deeply equivalent
ok 32 should be strictly equal
ok 33 should be deeply equivalent
# source mapped source code not found
ok 34 should be strictly equal
ok 35 should be strictly equal
ok 36 should be strictly equal
ok 37 should be strictly equal
ok 38 should be strictly equal
ok 39 should be strictly equal
ok 40 should be strictly equal
ok 41 should be strictly equal
ok 42 should be strictly equal
ok 43 should be strictly equal
ok 44 should be strictly equal
# fails
# inlined source map broken
ok 45 should be strictly equal
ok 46 should be strictly equal
ok 47 should be strictly equal
ok 48 should be strictly equal
ok 49 should be strictly equal
ok 50 should be strictly equal
ok 51 should be strictly equal
ok 52 should be strictly equal
ok 53 should be strictly equal
# linked source map not found
ok 54 should be strictly equal
ok 55 should be strictly equal
ok 56 should be strictly equal
ok 57 should be strictly equal
ok 58 should be strictly equal
ok 59 should be strictly equal
ok 60 should be strictly equal
ok 61 should be strictly equal
ok 62 should be strictly equal
# linked source map broken
ok 63 should be strictly equal
ok 64 should be strictly equal
ok 65 should be strictly equal
ok 66 should be strictly equal
ok 67 should be strictly equal
ok 68 should be strictly equal
ok 69 should be strictly equal
ok 70 should be strictly equal
ok 71 should be strictly equal

1..71
# tests 71
# pass  71

# ok

running (cwd: ./): node --unhandled-rejections=strict test/stacktraces/stacktraces.test.js
TAP version 13
# error.exception.stacktrace
ok 1 throw-an-error.js errored out
ok 2 err.message includes /Error: boom/: "Command failed: /usr/local/bin/node fixtures/throw-an-error.js\nError: boom\n at main (/app/test/stacktraces/fixtures/throw-an-error.js:15:9)\n at Object.<anonymous> (/app/test/stacktraces/fixtures/throw-an-error.js:18:1)\n at Module._compile (node:internal/modules/cjs/loader:1108:14)\n at Module.replacementCompile (/app/node_modules/append-transform/index.js:60:13)\n at Module._extensions..js (node:internal/modules/cjs/loader:1137:10)\n at Object.<anonymous> (/app/node_modules/append-transform/index.js:64:4)\n at Module.load (node:internal/modules/cjs/loader:988:32)\n at Function.Module._load (node:internal/modules/cjs/loader:828:14)\n at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:76:12)\n at node:internal/main/run_main_module:17:47\n"
ok 3 APM server got event metadata object
ok 4 APM server got error event
ok 5 stacktrace top frame is as expected
# error.exception.stacktrace does not have "[Circular]" frames
ok 6 circular-stack.js exited non-zero
ok 7 APM server got first metadata object
ok 8 APM server got first error event
ok 9 APM server got second metadata object
ok 10 APM server got second error event
ok 11 "boom on zero" stacktrace frame is as expected
ok 12 "boom on zero" stacktrace frame is as expected
ok 13 "boom on zero" stacktrace frame is as expected
ok 14 "boom on zero" stacktrace frame is as expected
ok 15 "boom on zero" stacktrace frame is as expected
ok 16 "boom on zero" stacktrace frame is as expected
ok 17 "boom on zero" stacktrace frame is as expected
ok 18 "boom on zero" stacktrace frame is as expected
ok 19 "boom on zero" stacktrace frame is as expected
ok 20 found 9 "boom on zero" stacktrace frames
# error.log.stacktrace
ok 21 capture-error-string.js did not error
ok 22 APM server got event metadata object
ok 23 first error.log.stacktrace top frame is as expected
ok 24 second error.log.stacktrace top frame is as expected
# span.stacktrace
ok 25 send-a-span.js did not error
ok 26 APM server got event metadata object
ok 27 APM server got span event
ok 28 span has a stacktrace
ok 29 first app frame in stacktrace is as expected
# error.exception.stacktrace with sourcemap
ok 30 throw-an-error-with-sourcemap.js errored out
ok 31 err.message includes /Error: boom/: "Command failed: /usr/local/bin/node fixtures/dist/throw-an-error-with-sourcemap.js\nError: boom\n at main (/app/test/stacktraces/fixtures/dist/throw-an-error-with-sourcemap.js:19:11)\n at Object.<anonymous> (/app/test/stacktraces/fixtures/dist/throw-an-error-with-sourcemap.js:21:1)\n at Module._compile (node:internal/modules/cjs/loader:1108:14)\n at Module.replacementCompile (/app/node_modules/append-transform/index.js:60:13)\n at Module._extensions..js (node:internal/modules/cjs/loader:1137:10)\n at Object.<anonymous> (/app/node_modules/append-transform/index.js:64:4)\n at Module.load (node:internal/modules/cjs/loader:988:32)\n at Function.Module._load (node:internal/modules/cjs/loader:828:14)\n at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:76:12)\n at node:internal/main/run_main_module:17:47\n"
ok 32 APM server got event metadata object
ok 33 APM server got error event
ok 34 stacktrace top frame is as expected
# stackTraceFromErrStackString()
ok 35 got a stacktrace
ok 36 stacktrace is an Array
ok 37 stacktrace top frame is as expected
# gatherStackTrace()
# 0 lines of source context
ok 38 top frame is as expected
# 1 lines of source context
ok 39 top frame is as expected
# 2 lines of source context
ok 40 top frame is as expected
# 3 lines of source context
ok 41 top frame is as expected
# 4 lines of source context
ok 42 top frame is as expected
# 5 lines of source context
ok 43 top frame is as expected

1..43
# tests 43
# pass  43

# ok

running (cwd: ./): node --unhandled-rejections=strict test/uncaught-exceptions/log-uncaught-exceptions-off.test.js
TAP version 13
# should capture uncaught exceptions but not log if disabled
ok 1 should capture the error
{"log.level":"info","@timestamp":"2021-11-25T13:07:12.381Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"8a5a0688d4c152f942eadda6ba45eb67\"}"}
ok 2 error.exception.message
ok 3 error.exception.type
ok 4 error.exception.handled
ok 5 should have a stack trace
ok 6 stack trace should contain frames
ok 7 top frame should be this file

1..7
# tests 7
# pass  7

# ok

running (cwd: ./): node --unhandled-rejections=strict test/uncaught-exceptions/log-uncaught-exceptions-on.test.js
TAP version 13
# should capture and log uncaught exceptions by default
ok 1 should log the error to STDERR
ok 2 should capture the error
{"log.level":"info","@timestamp":"2021-11-25T13:07:13.593Z","log":{"logger":"elastic-apm-node"},"ecs":{"version":"1.6.0"},"message":"Sending error to Elastic APM: {\"id\":\"7ca04e1f0923d7986bcd9a648dfd5619\"}"}
ok 3 should be strictly equal
ok 4 should be strictly equal
ok 5 should be strictly equal
ok 6 should have a stack trace
ok 7 stack trace should contain frames
ok 8 top frame should be this file

1..8
# tests 8
# pass  8

# ok

---------------------------------------|---------|----------|---------|---------|-------------------
File                                   | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s
---------------------------------------|---------|----------|---------|---------|-------------------
All files                              |   85.46 |    76.03 |   89.56 |   86.65 |
 app                                   |     100 |      100 |     100 |     100 |
  index.js                             |     100 |      100 |     100 |     100 |
 app/lib                               |   90.62 |    85.41 |   94.44 |   90.59 |
  InflightEventSet.js                  |     100 |      100 |     100 |     100 |
  agent.js                             |   91.03 |     84.7 |    97.5 |    90.8 | ...41-543,661-662
  config.js                            |      92 |    87.22 |   97.61 |   92.21 | ...21-822,834,948
  constants.js                         |     100 |      100 |     100 |     100 |
  errors.js                            |   95.57 |    90.14 |     100 |   96.26 | 47,73,85,175
  http-request.js                      |   50.87 |    66.66 |   54.54 |   50.87 | ...13,188-223,227
  lambda.js                            |   98.28 |    89.65 |     100 |   98.28 | 347,357,402
  logging.js                           |   94.44 |    85.71 |     100 |   94.44 | 113,125
  noop-transport.js                    |   63.63 |       50 |   77.77 |   63.63 | 18,24,30,36
  parsers.js                           |   77.77 |    68.62 |     100 |   77.35 | 86-104
  stacktraces.js                       |    91.9 |    89.81 |   95.65 |   91.71 | ...59,170,196,234
  symbols.js                           |     100 |      100 |     100 |     100 |
  wildcard-matcher.js                  |     100 |      100 |     100 |     100 |
 app/lib/cloud-metadata                |   93.64 |    90.14 |   90.74 |   93.64 |
  aws.js                               |   96.07 |     87.5 |    87.5 |   96.07 | 56,123
  azure.js                             |   97.36 |      100 |    87.5 |   97.36 | 61
  callback-coordination.js             |   95.55 |    86.95 |     100 |   95.55 | 77-78
  gcp.js                               |     100 |      100 |     100 |     100 |
  index.js                             |   81.48 |     87.5 |   86.66 |   81.48 | 147-156,162
 app/lib/filters                       |   96.15 |    91.42 |     100 |      96 |
  http-headers.js                      |   96.66 |       90 |     100 |   96.42 | 55
  sanitize-field-names.js              |   95.45 |    93.33 |     100 |   95.45 | 32
 app/lib/instrumentation               |    85.8 |     74.3 |   90.35 |   87.78 |
  context.js                           |     100 |    92.85 |     100 |     100 | 8
  elasticsearch-shared.js              |     100 |     87.5 |     100 |     100 | 44,54,57
  express-utils.js                     |   85.71 |    84.61 |   85.71 |      88 | 9-10,41
  generic-span.js                      |   97.14 |    90.62 |     100 |    98.5 | 122
  http-shared.js                       |   97.85 |     86.2 |     100 |   98.42 | 196,226
  ids.js                               |     100 |      100 |     100 |     100 |
  index.js                             |   90.03 |     78.3 |   97.14 |    90.2 | ...75,494-497,503
  named-array.js                       |     100 |       90 |     100 |     100 | 35
  patch-async.js                       |   61.13 |     38.7 |      65 |   65.19 | ...54-559,574-579
  shimmer.js                           |   68.62 |    61.76 |   83.33 |      68 | ...,89-90,101-109
  span.js                              |   93.96 |    92.22 |      95 |   95.57 | ...34,157,197,205
  template-shared.js                   |     100 |       70 |     100 |     100 | 15,32-34
  timer.js                             |     100 |      100 |     100 |     100 |
  transaction.js                       |   92.65 |    91.52 |   96.55 |   94.64 | ...54-255,274-278
 app/lib/instrumentation/modules       |   80.22 |    64.32 |   87.92 |   82.25 |
  apollo-server-core.js                |   78.26 |       50 |     100 |   80.95 | 11-12,24-25
  aws-sdk.js                           |   83.33 |       50 |     100 |   86.95 | 28,35-36
  bluebird.js                          |    65.9 |       50 |   63.63 |   69.23 | 16-17,51-63
  cassandra-driver.js                  |      73 |       55 |   76.19 |   74.22 | ...56,168,190-194
  elasticsearch.js                     |   81.69 |    68.08 |   88.88 |   84.05 | ...06-107,126-127
  express-graphql.js                   |   77.77 |       60 |     100 |   86.66 | 9-10
  express-queue.js                     |    92.3 |       50 |     100 |     100 | 6-14
  express.js                           |   84.72 |    76.92 |   81.25 |   88.05 | 15-16,118-126
  fastify.js                           |   42.55 |       30 |   44.44 |   42.22 | 16-18,23-43,67-79
  finalhandler.js                      |   86.66 |     62.5 |     100 |   92.85 | 21
  generic-pool.js                      |   43.58 |       45 |   42.85 |   43.58 | 9-40,69
  graphql.js                           |    90.9 |    76.04 |     100 |   94.44 | 16-17,74,174-178
  handlebars.js                        |    87.5 |       50 |     100 |     100 | 7
  hapi.js                              |      75 |    56.66 |   76.92 |   76.19 | ...,70-71,133,158
  http.js                              |     100 |    88.88 |     100 |     100 | 7,43-47
  http2.js                             |   82.83 |    67.44 |   96.15 |   84.25 | ...29,184-196,248
  https.js                             |     100 |    77.77 |     100 |     100 | 9,22
  ioredis.js                           |   88.88 |    73.33 |     100 |   88.88 | 19,22-23,36
  jade.js                              |    87.5 |       50 |     100 |     100 | 7
  knex.js                              |   88.23 |    58.33 |     100 |    90.9 | 11-12,21
  koa-router.js                        |   76.92 |    76.47 |     100 |      80 | 10-11,20-21,37
  koa.js                               |      80 |       50 |     100 |     100 | 4
  memcached.js                         |   91.66 |    58.82 |     100 |   91.66 | 10,13-14
  mimic-response.js                    |      50 |       20 |      50 |   54.54 | 13-25
  mongodb-core.js                      |   89.61 |    66.66 |     100 |   94.44 | 15-16,49-50
  mongodb.js                           |   78.57 |       68 |     100 |      80 | 13-14,19-23,31,87
  mysql.js                             |   91.57 |    72.72 |     100 |   92.47 | ...13,135-136,163
  mysql2.js                            |   89.09 |    80.55 |     100 |   89.09 | 13-14,31-32,53-54
  pg.js                                |   86.56 |    67.64 |    87.5 |   87.69 | ...5,30-34,82,114
  pug.js                               |    87.5 |       50 |     100 |     100 | 7
  redis.js                             |    59.7 |    44.44 |      75 |   59.09 | ...7-38,62,88-122
  restify.js                           |   73.91 |     37.5 |      75 |      80 | 21-24
  tedious.js                           |   79.62 |    51.85 |     100 |   81.13 | ...29,40-43,70,74
  ws.js                                |   81.48 |    66.66 |     100 |   83.33 | 10-11,33-34
 ...b/instrumentation/modules/@elastic |   90.62 |    72.34 |     100 |   90.62 |
  elasticsearch.js                     |   90.62 |    72.34 |     100 |   90.62 | 17,20-21,68-69,86
 ...ib/instrumentation/modules/aws-sdk |   93.33 |    89.01 |     100 |   93.33 |
  dynamodb.js                          |   97.61 |    97.14 |     100 |   97.61 | 63
  s3.js                                |   93.61 |    81.81 |     100 |   93.61 | 37,64,114
  sns.js                               |     100 |    96.66 |     100 |     100 | 93-95
  sqs.js                               |   85.52 |    79.62 |     100 |   85.52 | ...05,145,162-166
 app/lib/instrumentation/run-context   |   89.79 |    83.92 |   83.33 |    90.2 |
  AbstractRunContextManager.js         |   82.35 |    71.42 |   66.66 |   83.33 | ...,70,98,126,168
  AsyncHooksRunContextManager.js       |   95.83 |    83.33 |     100 |   95.83 | 60
  BasicRunContextManager.js            |    90.9 |      100 |    90.9 |   90.47 | 38-39
  RunContext.js                        |     100 |      100 |     100 |     100 |
  index.js                             |     100 |      100 |     100 |     100 |
 app/lib/metrics                       |   76.31 |    68.57 |   66.66 |   76.71 |
  index.js                             |   92.59 |    93.33 |   69.23 |   92.59 | 75-76
  queue.js                             |    3.44 |        0 |       0 |    3.57 | 4-78
  registry.js                          |     100 |       60 |     100 |     100 | 10-15,19-34
  reporter.js                          |   91.83 |       84 |     100 |   93.47 | 35-36,98
  runtime.js                           |    93.1 |       70 |   66.66 |   92.59 | 7,11
 app/lib/metrics/platforms/linux       |   96.51 |    81.25 |     100 |    97.5 |
  index.js                             |     100 |      100 |     100 |     100 |
  stats.js                             |    96.2 |    81.25 |     100 |   97.29 | 64-65
 app/lib/middleware                    |     100 |      100 |     100 |     100 |
  connect.js                           |     100 |      100 |     100 |     100 |
 app/lib/redact-secrets                |     100 |      100 |     100 |     100 |
  index.js                             |     100 |      100 |     100 |     100 |
  is-secret.js                         |     100 |      100 |     100 |     100 |
 app/lib/tracecontext                  |   63.72 |    62.66 |      75 |   65.26 |
  index.js                             |    91.3 |      100 |      75 |    90.9 | 35-39
  tracestate.js                        |   60.22 |    56.92 |      75 |    61.9 | ...63,270,313-342
---------------------------------------|---------|----------|---------|---------|-------------------
