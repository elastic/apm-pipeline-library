// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import org.junit.Before
import org.junit.Test
import static org.junit.Assert.assertFalse
import static org.junit.Assert.assertNotNull
import static org.junit.Assert.assertNull
import static org.junit.Assert.assertTrue

class RunWatcherStepTests extends ApmBasePipelineTest {

  @Override
  @Before
  void setUp() throws Exception {
    super.setUp()
    script = loadScript('vars/runWatcher.groovy')
    helper.registerAllowedMethod('sendDataToElasticsearch', [Map.class], {readJSON(file: "watcher-output.json")})
    helper.registerAllowedMethod("getVaultSecret", [Map.class], {
      return [data: [user: "admin", password: "admin123", url: 'http://']]
    })
  }

  @Test
  void test_without_arguments() throws Exception {
    testMissingArgument('watcher') {
      script.call()
    }
  }

  @Test
  void test_with_defaults() throws Exception {
    def output = script.call(watcher: 'foo')
    printCallStack()
    assertNotNull(output)
    assertFalse(assertMethodCallContainsPattern('mail', '[Autogenerated]'))
    assertJobStatusSuccess()
  }

  @Test
  void test_with_email() throws Exception {
    def output = script.call(watcher: 'foo', sendEmail: true, to: 'me@acme.com')
    printCallStack()
    assertNotNull(output)
    assertTrue(assertMethodCallContainsPattern('mail', '[Autogenerated]'))
    assertTrue(assertMethodCallContainsPattern('mail', 'test failures'))
    assertJobStatusSuccess()
  }

  @Test
  void test_with_email_and_no_to() throws Exception {
    def output = script.call(watcher: 'foo', sendEmail: true)
    printCallStack()
    assertNotNull(output)
    assertTrue(assertMethodCallContainsPattern('log', "to' param is empty"))
    assertFalse(assertMethodCallContainsPattern('mail', '[Autogenerated]'))
    assertJobStatusSuccess()
  }

  @Test
  void test_with_defaults_but_no_log_action() throws Exception {
    helper.registerAllowedMethod('sendDataToElasticsearch', [Map.class], {readJSON(file: "watcher-output-no-log.json")})
    def output = script.call(watcher: 'foo')
    printCallStack()
    assertNull(output)
    assertTrue(assertMethodCallContainsPattern('log', 'log action could not be found in the response'))
    assertTrue(assertMethodCallOccurrences('writeFile', 0))
    assertJobStatusSuccess()
  }

  @Test
  void test_with_email_and_debugFileName() throws Exception {
    def output = script.call(watcher: 'foo', sendEmail: true, to: 'me@acme.com', debugFileName: 'foo.txt')
    printCallStack()
    assertNotNull(output)
    assertTrue(assertMethodCallOccurrences('writeFile', 1))
    assertJobStatusSuccess()
  }

  @Test
  void test_with_email_without_test_failures() throws Exception {
    helper.registerAllowedMethod('sendDataToElasticsearch', [Map.class], {readJSON(file: "watcher-output-without-test-failures.json")})
    def output
    try {
      output = script.call(watcher: 'foo', sendEmail: true, to: 'me@acme.com')
    } catch (e) {
      println e
    }
    println output
    printCallStack()
    assertNotNull(output)
    assertTrue(assertMethodCallContainsPattern('mail', '[Autogenerated]'))
    assertTrue(assertMethodCallContainsPattern('mail', 'no failures'))
    assertJobStatusSuccess()
  }
}
